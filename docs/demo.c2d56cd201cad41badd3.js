!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=33)}([function(e,n,t){"use strict";(function(e){function o(e,n){const t=Object.create(null),o=e.split(",");for(let e=0;e<o.length;e++)t[o[e]]=!0;return n?e=>!!t[e.toLowerCase()]:e=>!!t[e]}t.d(n,"a",(function(){return C})),t.d(n,"b",(function(){return y})),t.d(n,"c",(function(){return E})),t.d(n,"d",(function(){return O})),t.d(n,"e",(function(){return Q})),t.d(n,"f",(function(){return ee})),t.d(n,"g",(function(){return re})),t.d(n,"h",(function(){return B})),t.d(n,"i",(function(){return le})),t.d(n,"j",(function(){return te})),t.d(n,"k",(function(){return V})),t.d(n,"l",(function(){return Z})),t.d(n,"m",(function(){return v})),t.d(n,"n",(function(){return oe})),t.d(n,"o",(function(){return T})),t.d(n,"p",(function(){return X})),t.d(n,"q",(function(){return R})),t.d(n,"r",(function(){return r})),t.d(n,"s",(function(){return f})),t.d(n,"t",(function(){return $})),t.d(n,"u",(function(){return N})),t.d(n,"v",(function(){return w})),t.d(n,"w",(function(){return U})),t.d(n,"x",(function(){return j})),t.d(n,"y",(function(){return W})),t.d(n,"z",(function(){return L})),t.d(n,"A",(function(){return I})),t.d(n,"B",(function(){return Y})),t.d(n,"C",(function(){return p})),t.d(n,"D",(function(){return P})),t.d(n,"E",(function(){return m})),t.d(n,"F",(function(){return F})),t.d(n,"G",(function(){return D})),t.d(n,"H",(function(){return g})),t.d(n,"I",(function(){return b})),t.d(n,"J",(function(){return ie})),t.d(n,"K",(function(){return o})),t.d(n,"L",(function(){return u})),t.d(n,"M",(function(){return d})),t.d(n,"N",(function(){return i})),t.d(n,"O",(function(){return k})),t.d(n,"P",(function(){return A})),t.d(n,"Q",(function(){return ne})),t.d(n,"R",(function(){return se})),t.d(n,"S",(function(){return H}));const r=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");function i(e){if(T(e)){const n={};for(let t=0;t<e.length;t++){const o=e[t],r=F(o)?c(o):i(o);if(r)for(const e in r)n[e]=r[e]}return n}return F(e)||U(e)?e:void 0}const s=/;(?![^(]*\))/g,a=/:([^]+)/,l=/\/\*.*?\*\//gs;function c(e){const n={};return e.replace(l,"").split(s).forEach(e=>{if(e){const t=e.split(a);t.length>1&&(n[t[0].trim()]=t[1].trim())}}),n}function u(e){let n="";if(F(e))n=e;else if(T(e))for(let t=0;t<e.length;t++){const o=u(e[t]);o&&(n+=o+" ")}else if(U(e))for(const t in e)e[t]&&(n+=t+" ");return n.trim()}function d(e){if(!e)return null;let{class:n,style:t}=e;return n&&!F(n)&&(e.class=u(n)),t&&(e.style=i(t)),e}const f=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),p=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),h="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",m=o(h);function v(e){return!!e||""===e}function g(e,n){if(e===n)return!0;let t=M(e),o=M(n);if(t||o)return!(!t||!o)&&e.getTime()===n.getTime();if(t=D(e),o=D(n),t||o)return e===n;if(t=T(e),o=T(n),t||o)return!(!t||!o)&&function(e,n){if(e.length!==n.length)return!1;let t=!0;for(let o=0;t&&o<e.length;o++)t=g(e[o],n[o]);return t}(e,n);if(t=U(e),o=U(n),t||o){if(!t||!o)return!1;if(Object.keys(e).length!==Object.keys(n).length)return!1;for(const t in e){const o=e.hasOwnProperty(t),r=n.hasOwnProperty(t);if(o&&!r||!o&&r||!g(e[t],n[t]))return!1}}return String(e)===String(n)}function b(e,n){return e.findIndex(e=>g(e,n))}const A=e=>F(e)?e:null==e?"":T(e)||U(e)&&(e.toString===z||!R(e.toString))?JSON.stringify(e,_,2):String(e),_=(e,n)=>n&&n.__v_isRef?_(e,n.value):N(n)?{[`Map(${n.size})`]:[...n.entries()].reduce((e,[n,t])=>(e[n+" =>"]=t,e),{})}:P(n)?{[`Set(${n.size})`]:[...n.values()]}:!U(n)||T(n)||W(n)?n:String(n),y={},C=[],O=()=>{},E=()=>!1,x=/^on[^a-z]/,j=e=>x.test(e),w=e=>e.startsWith("onUpdate:"),B=Object.assign,k=(e,n)=>{const t=e.indexOf(n);t>-1&&e.splice(t,1)},S=Object.prototype.hasOwnProperty,V=(e,n)=>S.call(e,n),T=Array.isArray,N=e=>"[object Map]"===q(e),P=e=>"[object Set]"===q(e),M=e=>"[object Date]"===q(e),I=e=>"[object RegExp]"===q(e),R=e=>"function"==typeof e,F=e=>"string"==typeof e,D=e=>"symbol"==typeof e,U=e=>null!==e&&"object"==typeof e,L=e=>U(e)&&R(e.then)&&R(e.catch),z=Object.prototype.toString,q=e=>z.call(e),H=e=>q(e).slice(8,-1),W=e=>"[object Object]"===q(e),$=e=>F(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Y=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),X=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),K=e=>{const n=Object.create(null);return t=>n[t]||(n[t]=e(t))},G=/-(\w)/g,Q=K(e=>e.replace(G,(e,n)=>n?n.toUpperCase():"")),J=/\B([A-Z])/g,Z=K(e=>e.replace(J,"-$1").toLowerCase()),ee=K(e=>e.charAt(0).toUpperCase()+e.slice(1)),ne=K(e=>e?"on"+ee(e):""),te=(e,n)=>!Object.is(e,n),oe=(e,n)=>{for(let t=0;t<e.length;t++)e[t](n)},re=(e,n,t)=>{Object.defineProperty(e,n,{configurable:!0,enumerable:!1,value:t})},ie=e=>{const n=parseFloat(e);return isNaN(n)?e:n},se=e=>{const n=F(e)?Number(e):NaN;return isNaN(n)?e:n};let ae;const le=()=>ae||(ae="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{})}).call(this,t(34))},function(e,n,t){"use strict";t.r(n),t.d(n,"EffectScope",(function(){return i})),t.d(n,"ReactiveEffect",(function(){return A})),t.d(n,"customRef",(function(){return $e})),t.d(n,"effect",(function(){return y})),t.d(n,"effectScope",(function(){return s})),t.d(n,"getCurrentScope",(function(){return l})),t.d(n,"isProxy",(function(){return ke})),t.d(n,"isReactive",(function(){return je})),t.d(n,"isReadonly",(function(){return we})),t.d(n,"isRef",(function(){return Ie})),t.d(n,"isShallow",(function(){return Be})),t.d(n,"markRaw",(function(){return Ve})),t.d(n,"onScopeDispose",(function(){return c})),t.d(n,"proxyRefs",(function(){return He})),t.d(n,"reactive",(function(){return ye})),t.d(n,"readonly",(function(){return Oe})),t.d(n,"ref",(function(){return Re})),t.d(n,"shallowReactive",(function(){return Ce})),t.d(n,"shallowReadonly",(function(){return Ee})),t.d(n,"shallowRef",(function(){return Fe})),t.d(n,"stop",(function(){return C})),t.d(n,"toRaw",(function(){return Se})),t.d(n,"toRef",(function(){return Ke})),t.d(n,"toRefs",(function(){return Ye})),t.d(n,"triggerRef",(function(){return Le})),t.d(n,"unref",(function(){return ze})),t.d(n,"camelize",(function(){return o.e})),t.d(n,"capitalize",(function(){return o.f})),t.d(n,"normalizeClass",(function(){return o.L})),t.d(n,"normalizeProps",(function(){return o.M})),t.d(n,"normalizeStyle",(function(){return o.N})),t.d(n,"toDisplayString",(function(){return o.P})),t.d(n,"toHandlerKey",(function(){return o.Q})),t.d(n,"BaseTransition",(function(){return pt})),t.d(n,"Comment",(function(){return er})),t.d(n,"Fragment",(function(){return Jo})),t.d(n,"KeepAlive",(function(){return xt})),t.d(n,"Static",(function(){return nr})),t.d(n,"Suspense",(function(){return Xn})),t.d(n,"Teleport",(function(){return Go})),t.d(n,"Text",(function(){return Zo})),t.d(n,"assertNumber",(function(){return Ze})),t.d(n,"callWithAsyncErrorHandling",(function(){return nn})),t.d(n,"callWithErrorHandling",(function(){return en})),t.d(n,"cloneVNode",(function(){return Cr})),t.d(n,"compatUtils",(function(){return gi})),t.d(n,"computed",(function(){return Qr})),t.d(n,"createBlock",(function(){return dr})),t.d(n,"createCommentVNode",(function(){return xr})),t.d(n,"createElementBlock",(function(){return ur})),t.d(n,"createElementVNode",(function(){return br})),t.d(n,"createHydrationRenderer",(function(){return zo})),t.d(n,"createPropsRestProxy",(function(){return si})),t.d(n,"createRenderer",(function(){return Lo})),t.d(n,"createSlots",(function(){return eo})),t.d(n,"createStaticVNode",(function(){return Er})),t.d(n,"createTextVNode",(function(){return Or})),t.d(n,"createVNode",(function(){return Ar})),t.d(n,"defineAsyncComponent",(function(){return Ct})),t.d(n,"defineComponent",(function(){return _t})),t.d(n,"defineEmits",(function(){return Zr})),t.d(n,"defineExpose",(function(){return ei})),t.d(n,"defineProps",(function(){return Jr})),t.d(n,"devtools",(function(){return Cn})),t.d(n,"getCurrentInstance",(function(){return Mr})),t.d(n,"getTransitionRawChildren",(function(){return At})),t.d(n,"guardReactiveProps",(function(){return yr})),t.d(n,"h",(function(){return li})),t.d(n,"handleError",(function(){return tn})),t.d(n,"initCustomFormatter",(function(){return di})),t.d(n,"inject",(function(){return nt})),t.d(n,"isMemoSame",(function(){return pi})),t.d(n,"isRuntimeOnly",(function(){return Wr})),t.d(n,"isVNode",(function(){return fr})),t.d(n,"mergeDefaults",(function(){return ii})),t.d(n,"mergeProps",(function(){return kr})),t.d(n,"nextTick",(function(){return pn})),t.d(n,"onActivated",(function(){return wt})),t.d(n,"onBeforeMount",(function(){return Mt})),t.d(n,"onBeforeUnmount",(function(){return Dt})),t.d(n,"onBeforeUpdate",(function(){return Rt})),t.d(n,"onDeactivated",(function(){return Bt})),t.d(n,"onErrorCaptured",(function(){return Ht})),t.d(n,"onMounted",(function(){return It})),t.d(n,"onRenderTracked",(function(){return qt})),t.d(n,"onRenderTriggered",(function(){return zt})),t.d(n,"onServerPrefetch",(function(){return Lt})),t.d(n,"onUnmounted",(function(){return Ut})),t.d(n,"onUpdated",(function(){return Ft})),t.d(n,"openBlock",(function(){return rr})),t.d(n,"popScopeId",(function(){return Fn})),t.d(n,"provide",(function(){return et})),t.d(n,"pushScopeId",(function(){return Rn})),t.d(n,"queuePostFlushCb",(function(){return vn})),t.d(n,"registerRuntimeCompiler",(function(){return Hr})),t.d(n,"renderList",(function(){return Zt})),t.d(n,"renderSlot",(function(){return no})),t.d(n,"resolveComponent",(function(){return Yt})),t.d(n,"resolveDirective",(function(){return Gt})),t.d(n,"resolveDynamicComponent",(function(){return Kt})),t.d(n,"resolveFilter",(function(){return vi})),t.d(n,"resolveTransitionHooks",(function(){return mt})),t.d(n,"setBlockTracking",(function(){return lr})),t.d(n,"setDevtoolsHook",(function(){return jn})),t.d(n,"setTransitionHooks",(function(){return bt})),t.d(n,"ssrContextKey",(function(){return ci})),t.d(n,"ssrUtils",(function(){return mi})),t.d(n,"toHandlers",(function(){return to})),t.d(n,"transformVNodeArgs",(function(){return hr})),t.d(n,"useAttrs",(function(){return oi})),t.d(n,"useSSRContext",(function(){return ui})),t.d(n,"useSlots",(function(){return ti})),t.d(n,"useTransitionState",(function(){return dt})),t.d(n,"version",(function(){return hi})),t.d(n,"warn",(function(){return Je})),t.d(n,"watch",(function(){return st})),t.d(n,"watchEffect",(function(){return tt})),t.d(n,"watchPostEffect",(function(){return ot})),t.d(n,"watchSyncEffect",(function(){return rt})),t.d(n,"withAsyncContext",(function(){return ai})),t.d(n,"withCtx",(function(){return Un})),t.d(n,"withDefaults",(function(){return ni})),t.d(n,"withDirectives",(function(){return Wt})),t.d(n,"withMemo",(function(){return fi})),t.d(n,"withScopeId",(function(){return Dn})),t.d(n,"Transition",(function(){return Di})),t.d(n,"TransitionGroup",(function(){return rs})),t.d(n,"VueElement",(function(){return Mi})),t.d(n,"createApp",(function(){return Is})),t.d(n,"createSSRApp",(function(){return Rs})),t.d(n,"defineCustomElement",(function(){return Ti})),t.d(n,"defineSSRCustomElement",(function(){return Ni})),t.d(n,"hydrate",(function(){return Ms})),t.d(n,"initDirectivesForSSR",(function(){return Us})),t.d(n,"render",(function(){return Ps})),t.d(n,"useCssModule",(function(){return Ii})),t.d(n,"useCssVars",(function(){return Ri})),t.d(n,"vModelCheckbox",(function(){return fs})),t.d(n,"vModelDynamic",(function(){return As})),t.d(n,"vModelRadio",(function(){return hs})),t.d(n,"vModelSelect",(function(){return ms})),t.d(n,"vModelText",(function(){return ds})),t.d(n,"vShow",(function(){return ws})),t.d(n,"withKeys",(function(){return js})),t.d(n,"withModifiers",(function(){return Es})),t.d(n,"compile",(function(){return Ls}));var o=t(0);let r;class i{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=r,!e&&r&&(this.index=(r.scopes||(r.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const n=r;try{return r=this,e()}finally{r=n}}else 0}on(){r=this}off(){r=this.parent}stop(e){if(this._active){let n,t;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].stop();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function s(e){return new i(e)}function a(e,n=r){n&&n.active&&n.effects.push(e)}function l(){return r}function c(e){r&&r.cleanups.push(e)}const u=e=>{const n=new Set(e);return n.w=0,n.n=0,n},d=e=>(e.w&m)>0,f=e=>(e.n&m)>0,p=new WeakMap;let h=0,m=1;let v;const g=Symbol(""),b=Symbol("");class A{constructor(e,n=null,t){this.fn=e,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,a(this,t)}run(){if(!this.active)return this.fn();let e=v,n=O;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=v,v=this,O=!0,m=1<<++h,h<=30?(({deps:e})=>{if(e.length)for(let n=0;n<e.length;n++)e[n].w|=m})(this):_(this),this.fn()}finally{h<=30&&(e=>{const{deps:n}=e;if(n.length){let t=0;for(let o=0;o<n.length;o++){const r=n[o];d(r)&&!f(r)?r.delete(e):n[t++]=r,r.w&=~m,r.n&=~m}n.length=t}})(this),m=1<<--h,v=this.parent,O=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){v===this?this.deferStop=!0:this.active&&(_(this),this.onStop&&this.onStop(),this.active=!1)}}function _(e){const{deps:n}=e;if(n.length){for(let t=0;t<n.length;t++)n[t].delete(e);n.length=0}}function y(e,n){e.effect&&(e=e.effect.fn);const t=new A(e);n&&(Object(o.h)(t,n),n.scope&&a(t,n.scope)),n&&n.lazy||t.run();const r=t.run.bind(t);return r.effect=t,r}function C(e){e.effect.stop()}let O=!0;const E=[];function x(){E.push(O),O=!1}function j(){const e=E.pop();O=void 0===e||e}function w(e,n,t){if(O&&v){let n=p.get(e);n||p.set(e,n=new Map);let o=n.get(t);o||n.set(t,o=u());B(o,void 0)}}function B(e,n){let t=!1;h<=30?f(e)||(e.n|=m,t=!d(e)):t=!e.has(v),t&&(e.add(v),v.deps.push(e))}function k(e,n,t,r,i,s){const a=p.get(e);if(!a)return;let l=[];if("clear"===n)l=[...a.values()];else if("length"===t&&Object(o.o)(e)){const e=Number(r);a.forEach((n,t)=>{("length"===t||t>=e)&&l.push(n)})}else switch(void 0!==t&&l.push(a.get(t)),n){case"add":Object(o.o)(e)?Object(o.t)(t)&&l.push(a.get("length")):(l.push(a.get(g)),Object(o.u)(e)&&l.push(a.get(b)));break;case"delete":Object(o.o)(e)||(l.push(a.get(g)),Object(o.u)(e)&&l.push(a.get(b)));break;case"set":Object(o.u)(e)&&l.push(a.get(g))}if(1===l.length)l[0]&&S(l[0]);else{const e=[];for(const n of l)n&&e.push(...n);S(u(e))}}function S(e,n){const t=Object(o.o)(e)?e:[...e];for(const e of t)e.computed&&V(e,n);for(const e of t)e.computed||V(e,n)}function V(e,n){(e!==v||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const T=Object(o.K)("__proto__,__v_isRef,__isVue"),N=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>"arguments"!==e&&"caller"!==e).map(e=>Symbol[e]).filter(o.G)),P=L(),M=L(!1,!0),I=L(!0),R=L(!0,!0),F=D();function D(){const e={};return["includes","indexOf","lastIndexOf"].forEach(n=>{e[n]=function(...e){const t=Se(this);for(let e=0,n=this.length;e<n;e++)w(t,0,e+"");const o=t[n](...e);return-1===o||!1===o?t[n](...e.map(Se)):o}}),["push","pop","shift","unshift","splice"].forEach(n=>{e[n]=function(...e){x();const t=Se(this)[n].apply(this,e);return j(),t}}),e}function U(e){const n=Se(this);return w(n,0,e),n.hasOwnProperty(e)}function L(e=!1,n=!1){return function(t,r,i){if("__v_isReactive"===r)return!e;if("__v_isReadonly"===r)return e;if("__v_isShallow"===r)return n;if("__v_raw"===r&&i===(e?n?_e:Ae:n?be:ge).get(t))return t;const s=Object(o.o)(t);if(!e){if(s&&Object(o.k)(F,r))return Reflect.get(F,r,i);if("hasOwnProperty"===r)return U}const a=Reflect.get(t,r,i);return(Object(o.G)(r)?N.has(r):T(r))?a:(e||w(t,0,r),n?a:Ie(a)?s&&Object(o.t)(r)?a:a.value:Object(o.w)(a)?e?Oe(a):ye(a):a)}}const z=H(),q=H(!0);function H(e=!1){return function(n,t,r,i){let s=n[t];if(we(s)&&Ie(s)&&!Ie(r))return!1;if(!e&&(Be(r)||we(r)||(s=Se(s),r=Se(r)),!Object(o.o)(n)&&Ie(s)&&!Ie(r)))return s.value=r,!0;const a=Object(o.o)(n)&&Object(o.t)(t)?Number(t)<n.length:Object(o.k)(n,t),l=Reflect.set(n,t,r,i);return n===Se(i)&&(a?Object(o.j)(r,s)&&k(n,"set",t,r):k(n,"add",t,r)),l}}const W={get:P,set:z,deleteProperty:function(e,n){const t=Object(o.k)(e,n),r=(e[n],Reflect.deleteProperty(e,n));return r&&t&&k(e,"delete",n,void 0),r},has:function(e,n){const t=Reflect.has(e,n);return Object(o.G)(n)&&N.has(n)||w(e,0,n),t},ownKeys:function(e){return w(e,0,Object(o.o)(e)?"length":g),Reflect.ownKeys(e)}},$={get:I,set:(e,n)=>!0,deleteProperty:(e,n)=>!0},Y=Object(o.h)({},W,{get:M,set:q}),X=Object(o.h)({},$,{get:R}),K=e=>e,G=e=>Reflect.getPrototypeOf(e);function Q(e,n,t=!1,o=!1){const r=Se(e=e.__v_raw),i=Se(n);t||(n!==i&&w(r,0,n),w(r,0,i));const{has:s}=G(r),a=o?K:t?Ne:Te;return s.call(r,n)?a(e.get(n)):s.call(r,i)?a(e.get(i)):void(e!==r&&e.get(n))}function J(e,n=!1){const t=this.__v_raw,o=Se(t),r=Se(e);return n||(e!==r&&w(o,0,e),w(o,0,r)),e===r?t.has(e):t.has(e)||t.has(r)}function Z(e,n=!1){return e=e.__v_raw,!n&&w(Se(e),0,g),Reflect.get(e,"size",e)}function ee(e){e=Se(e);const n=Se(this);return G(n).has.call(n,e)||(n.add(e),k(n,"add",e,e)),this}function ne(e,n){n=Se(n);const t=Se(this),{has:r,get:i}=G(t);let s=r.call(t,e);s||(e=Se(e),s=r.call(t,e));const a=i.call(t,e);return t.set(e,n),s?Object(o.j)(n,a)&&k(t,"set",e,n):k(t,"add",e,n),this}function te(e){const n=Se(this),{has:t,get:o}=G(n);let r=t.call(n,e);r||(e=Se(e),r=t.call(n,e));o&&o.call(n,e);const i=n.delete(e);return r&&k(n,"delete",e,void 0),i}function oe(){const e=Se(this),n=0!==e.size,t=e.clear();return n&&k(e,"clear",void 0,void 0),t}function re(e,n){return function(t,o){const r=this,i=r.__v_raw,s=Se(i),a=n?K:e?Ne:Te;return!e&&w(s,0,g),i.forEach((e,n)=>t.call(o,a(e),a(n),r))}}function ie(e,n,t){return function(...r){const i=this.__v_raw,s=Se(i),a=Object(o.u)(s),l="entries"===e||e===Symbol.iterator&&a,c="keys"===e&&a,u=i[e](...r),d=t?K:n?Ne:Te;return!n&&w(s,0,c?b:g),{next(){const{value:e,done:n}=u.next();return n?{value:e,done:n}:{value:l?[d(e[0]),d(e[1])]:d(e),done:n}},[Symbol.iterator](){return this}}}}function se(e){return function(...n){return"delete"!==e&&this}}function ae(){const e={get(e){return Q(this,e)},get size(){return Z(this)},has:J,add:ee,set:ne,delete:te,clear:oe,forEach:re(!1,!1)},n={get(e){return Q(this,e,!1,!0)},get size(){return Z(this)},has:J,add:ee,set:ne,delete:te,clear:oe,forEach:re(!1,!0)},t={get(e){return Q(this,e,!0)},get size(){return Z(this,!0)},has(e){return J.call(this,e,!0)},add:se("add"),set:se("set"),delete:se("delete"),clear:se("clear"),forEach:re(!0,!1)},o={get(e){return Q(this,e,!0,!0)},get size(){return Z(this,!0)},has(e){return J.call(this,e,!0)},add:se("add"),set:se("set"),delete:se("delete"),clear:se("clear"),forEach:re(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{e[r]=ie(r,!1,!1),t[r]=ie(r,!0,!1),n[r]=ie(r,!1,!0),o[r]=ie(r,!0,!0)}),[e,t,n,o]}const[le,ce,ue,de]=ae();function fe(e,n){const t=n?e?de:ue:e?ce:le;return(n,r,i)=>"__v_isReactive"===r?!e:"__v_isReadonly"===r?e:"__v_raw"===r?n:Reflect.get(Object(o.k)(t,r)&&r in n?t:n,r,i)}const pe={get:fe(!1,!1)},he={get:fe(!1,!0)},me={get:fe(!0,!1)},ve={get:fe(!0,!0)};const ge=new WeakMap,be=new WeakMap,Ae=new WeakMap,_e=new WeakMap;function ye(e){return we(e)?e:xe(e,!1,W,pe,ge)}function Ce(e){return xe(e,!1,Y,he,be)}function Oe(e){return xe(e,!0,$,me,Ae)}function Ee(e){return xe(e,!0,X,ve,_e)}function xe(e,n,t,r,i){if(!Object(o.w)(e))return e;if(e.__v_raw&&(!n||!e.__v_isReactive))return e;const s=i.get(e);if(s)return s;const a=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(Object(o.S)(l));var l;if(0===a)return e;const c=new Proxy(e,2===a?r:t);return i.set(e,c),c}function je(e){return we(e)?je(e.__v_raw):!(!e||!e.__v_isReactive)}function we(e){return!(!e||!e.__v_isReadonly)}function Be(e){return!(!e||!e.__v_isShallow)}function ke(e){return je(e)||we(e)}function Se(e){const n=e&&e.__v_raw;return n?Se(n):e}function Ve(e){return Object(o.g)(e,"__v_skip",!0),e}const Te=e=>Object(o.w)(e)?ye(e):e,Ne=e=>Object(o.w)(e)?Oe(e):e;function Pe(e){O&&v&&B((e=Se(e)).dep||(e.dep=u()))}function Me(e,n){const t=(e=Se(e)).dep;t&&S(t)}function Ie(e){return!(!e||!0!==e.__v_isRef)}function Re(e){return De(e,!1)}function Fe(e){return De(e,!0)}function De(e,n){return Ie(e)?e:new Ue(e,n)}class Ue{constructor(e,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?e:Se(e),this._value=n?e:Te(e)}get value(){return Pe(this),this._value}set value(e){const n=this.__v_isShallow||Be(e)||we(e);e=n?e:Se(e),Object(o.j)(e,this._rawValue)&&(this._rawValue=e,this._value=n?e:Te(e),Me(this))}}function Le(e){Me(e)}function ze(e){return Ie(e)?e.value:e}const qe={get:(e,n,t)=>ze(Reflect.get(e,n,t)),set:(e,n,t,o)=>{const r=e[n];return Ie(r)&&!Ie(t)?(r.value=t,!0):Reflect.set(e,n,t,o)}};function He(e){return je(e)?e:new Proxy(e,qe)}class We{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:n,set:t}=e(()=>Pe(this),()=>Me(this));this._get=n,this._set=t}get value(){return this._get()}set value(e){this._set(e)}}function $e(e){return new We(e)}function Ye(e){const n=Object(o.o)(e)?new Array(e.length):{};for(const t in e)n[t]=Ke(e,t);return n}class Xe{constructor(e,n,t){this._object=e,this._key=n,this._defaultValue=t,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return e=Se(this._object),n=this._key,null===(t=p.get(e))||void 0===t?void 0:t.get(n);var e,n,t}}function Ke(e,n,t){const o=e[n];return Ie(o)?o:new Xe(e,n,t)}var Ge;class Qe{constructor(e,n,t,o){this._setter=n,this.dep=void 0,this.__v_isRef=!0,this[Ge]=!1,this._dirty=!0,this.effect=new A(e,()=>{this._dirty||(this._dirty=!0,Me(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=t}get value(){const e=Se(this);return Pe(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}Ge="__v_isReadonly";function Je(e,...n){}function Ze(e,n){}function en(e,n,t,o){let r;try{r=o?e(...o):e()}catch(e){tn(e,n,t)}return r}function nn(e,n,t,r){if(Object(o.q)(e)){const i=en(e,n,t,r);return i&&Object(o.z)(i)&&i.catch(e=>{tn(e,n,t)}),i}const i=[];for(let o=0;o<e.length;o++)i.push(nn(e[o],n,t,r));return i}function tn(e,n,t,o=!0){n&&n.vnode;if(n){let o=n.parent;const r=n.proxy,i=t;for(;o;){const n=o.ec;if(n)for(let t=0;t<n.length;t++)if(!1===n[t](e,r,i))return;o=o.parent}const s=n.appContext.config.errorHandler;if(s)return void en(s,null,10,[e,r,i])}!function(e,n,t,o=!0){console.error(e)}(e,0,0,o)}let on=!1,rn=!1;const sn=[];let an=0;const ln=[];let cn=null,un=0;const dn=Promise.resolve();let fn=null;function pn(e){const n=fn||dn;return e?n.then(this?e.bind(this):e):n}function hn(e){sn.length&&sn.includes(e,on&&e.allowRecurse?an+1:an)||(null==e.id?sn.push(e):sn.splice(function(e){let n=an+1,t=sn.length;for(;n<t;){const o=n+t>>>1;An(sn[o])<e?n=o+1:t=o}return n}(e.id),0,e),mn())}function mn(){on||rn||(rn=!0,fn=dn.then(yn))}function vn(e){Object(o.o)(e)?ln.push(...e):cn&&cn.includes(e,e.allowRecurse?un+1:un)||ln.push(e),mn()}function gn(e,n=(on?an+1:0)){for(0;n<sn.length;n++){const e=sn[n];e&&e.pre&&(sn.splice(n,1),n--,e())}}function bn(e){if(ln.length){const e=[...new Set(ln)];if(ln.length=0,cn)return void cn.push(...e);for(cn=e,cn.sort((e,n)=>An(e)-An(n)),un=0;un<cn.length;un++)cn[un]();cn=null,un=0}}const An=e=>null==e.id?1/0:e.id,_n=(e,n)=>{const t=An(e)-An(n);if(0===t){if(e.pre&&!n.pre)return-1;if(n.pre&&!e.pre)return 1}return t};function yn(e){rn=!1,on=!0,sn.sort(_n);o.d;try{for(an=0;an<sn.length;an++){const e=sn[an];e&&!1!==e.active&&en(e,null,14)}}finally{an=0,sn.length=0,bn(),on=!1,fn=null,(sn.length||ln.length)&&yn(e)}}new Set;new Map;let Cn,On=[],En=!1;function xn(e,...n){Cn?Cn.emit(e,...n):En||On.push({event:e,args:n})}function jn(e,n){var t,o;if(Cn=e,Cn)Cn.enabled=!0,On.forEach(({event:e,args:n})=>Cn.emit(e,...n)),On=[];else if("undefined"!=typeof window&&window.HTMLElement&&!(null===(o=null===(t=window.navigator)||void 0===t?void 0:t.userAgent)||void 0===o?void 0:o.includes("jsdom"))){(n.__VUE_DEVTOOLS_HOOK_REPLAY__=n.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(e=>{jn(e,n)}),setTimeout(()=>{Cn||(n.__VUE_DEVTOOLS_HOOK_REPLAY__=null,En=!0,On=[])},3e3)}else En=!0,On=[]}const wn=Sn("component:added"),Bn=Sn("component:updated"),kn=Sn("component:removed");function Sn(e){return n=>{xn(e,n.appContext.app,n.uid,n.parent?n.parent.uid:void 0,n)}}function Vn(e,n,...t){if(e.isUnmounted)return;const r=e.vnode.props||o.b;let i=t;const s=n.startsWith("update:"),a=s&&n.slice(7);if(a&&a in r){const e=("modelValue"===a?"model":a)+"Modifiers",{number:n,trim:s}=r[e]||o.b;s&&(i=t.map(e=>Object(o.F)(e)?e.trim():e)),n&&(i=t.map(o.J))}let l;__VUE_PROD_DEVTOOLS__&&function(e,n,t){xn("component:emit",e.appContext.app,e,n,t)}(e,n,i);let c=r[l=Object(o.Q)(n)]||r[l=Object(o.Q)(Object(o.e)(n))];!c&&s&&(c=r[l=Object(o.Q)(Object(o.l)(n))]),c&&nn(c,e,6,i);const u=r[l+"Once"];if(u){if(e.emitted){if(e.emitted[l])return}else e.emitted={};e.emitted[l]=!0,nn(u,e,6,i)}}function Tn(e,n,t=!1){const r=n.emitsCache,i=r.get(e);if(void 0!==i)return i;const s=e.emits;let a={},l=!1;if(__VUE_OPTIONS_API__&&!Object(o.q)(e)){const r=e=>{const t=Tn(e,n,!0);t&&(l=!0,Object(o.h)(a,t))};!t&&n.mixins.length&&n.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}return s||l?(Object(o.o)(s)?s.forEach(e=>a[e]=null):Object(o.h)(a,s),Object(o.w)(e)&&r.set(e,a),a):(Object(o.w)(e)&&r.set(e,null),null)}function Nn(e,n){return!(!e||!Object(o.x)(n))&&(n=n.slice(2).replace(/Once$/,""),Object(o.k)(e,n[0].toLowerCase()+n.slice(1))||Object(o.k)(e,Object(o.l)(n))||Object(o.k)(e,n))}let Pn=null,Mn=null;function In(e){const n=Pn;return Pn=e,Mn=e&&e.type.__scopeId||null,n}function Rn(e){Mn=e}function Fn(){Mn=null}const Dn=e=>Un;function Un(e,n=Pn,t){if(!n)return e;if(e._n)return e;const o=(...t)=>{o._d&&lr(-1);const r=In(n);let i;try{i=e(...t)}finally{In(r),o._d&&lr(1)}return __VUE_PROD_DEVTOOLS__&&Bn(n),i};return o._n=!0,o._c=!0,o._d=!0,o}function Ln(e){const{type:n,vnode:t,proxy:r,withProxy:i,props:s,propsOptions:[a],slots:l,attrs:c,emit:u,render:d,renderCache:f,data:p,setupState:h,ctx:m,inheritAttrs:v}=e;let g,b;const A=In(e);try{if(4&t.shapeFlag){const e=i||r;g=jr(d.call(e,e,f,s,h,p,m)),b=c}else{const e=n;0,g=jr(e.length>1?e(s,{attrs:c,slots:l,emit:u}):e(s,null)),b=n.props?c:qn(c)}}catch(n){tr.length=0,tn(n,e,1),g=Ar(er)}let _=g;if(b&&!1!==v){const e=Object.keys(b),{shapeFlag:n}=_;e.length&&7&n&&(a&&e.some(o.v)&&(b=Hn(b,a)),_=Cr(_,b))}return t.dirs&&(_=Cr(_),_.dirs=_.dirs?_.dirs.concat(t.dirs):t.dirs),t.transition&&(_.transition=t.transition),g=_,In(A),g}function zn(e){let n;for(let t=0;t<e.length;t++){const o=e[t];if(!fr(o))return;if(o.type!==er||"v-if"===o.children){if(n)return;n=o}}return n}const qn=e=>{let n;for(const t in e)("class"===t||"style"===t||Object(o.x)(t))&&((n||(n={}))[t]=e[t]);return n},Hn=(e,n)=>{const t={};for(const r in e)Object(o.v)(r)&&r.slice(9)in n||(t[r]=e[r]);return t};function Wn(e,n,t){const o=Object.keys(n);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const i=o[r];if(n[i]!==e[i]&&!Nn(t,i))return!0}return!1}function $n({vnode:e,parent:n},t){for(;n&&n.subTree===e;)(e=n.vnode).el=t,n=n.parent}const Yn=e=>e.__isSuspense,Xn={name:"Suspense",__isSuspense:!0,process(e,n,t,o,r,i,s,a,l,c){null==e?function(e,n,t,o,r,i,s,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),f=e.suspense=Gn(e,r,o,n,d,t,i,s,a,l);c(null,f.pendingBranch=e.ssContent,d,null,o,f,i,s),f.deps>0?(Kn(e,"onPending"),Kn(e,"onFallback"),c(null,e.ssFallback,n,t,o,null,i,s),Zn(f,e.ssFallback)):f.resolve()}(n,t,o,r,i,s,a,l,c):function(e,n,t,o,r,i,s,a,{p:l,um:c,o:{createElement:u}}){const d=n.suspense=e.suspense;d.vnode=n,n.el=e.el;const f=n.ssContent,p=n.ssFallback,{activeBranch:h,pendingBranch:m,isInFallback:v,isHydrating:g}=d;if(m)d.pendingBranch=f,pr(f,m)?(l(m,f,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0?d.resolve():v&&(l(h,p,t,o,r,null,i,s,a),Zn(d,p))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=m):c(m,r,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),v?(l(null,f,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0?d.resolve():(l(h,p,t,o,r,null,i,s,a),Zn(d,p))):h&&pr(f,h)?(l(h,f,t,o,r,d,i,s,a),d.resolve(!0)):(l(null,f,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0&&d.resolve()));else if(h&&pr(f,h))l(h,f,t,o,r,d,i,s,a),Zn(d,f);else if(Kn(n,"onPending"),d.pendingBranch=f,d.pendingId++,l(null,f,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:n}=d;e>0?setTimeout(()=>{d.pendingId===n&&d.fallback(p)},e):0===e&&d.fallback(p)}}(e,n,t,o,r,s,a,l,c)},hydrate:function(e,n,t,o,r,i,s,a,l){const c=n.suspense=Gn(n,o,t,e.parentNode,document.createElement("div"),null,r,i,s,a,!0),u=l(e,c.pendingBranch=n.ssContent,t,c,i,s);0===c.deps&&c.resolve();return u},create:Gn,normalize:function(e){const{shapeFlag:n,children:t}=e,o=32&n;e.ssContent=Qn(o?t.default:t),e.ssFallback=o?Qn(t.fallback):Ar(er)}};function Kn(e,n){const t=e.props&&e.props[n];Object(o.q)(t)&&t()}function Gn(e,n,t,r,i,s,a,l,c,u,d=!1){const{p:f,m:p,um:h,n:m,o:{parentNode:v,remove:g}}=u,b=e.props?Object(o.R)(e.props.timeout):void 0;const A={vnode:e,parent:n,parentComponent:t,isSVG:a,container:r,hiddenContainer:i,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof b?b:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:d,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:n,activeBranch:t,pendingBranch:o,pendingId:r,effects:i,parentComponent:s,container:a}=A;if(A.isHydrating)A.isHydrating=!1;else if(!e){const e=t&&o.transition&&"out-in"===o.transition.mode;e&&(t.transition.afterLeave=()=>{r===A.pendingId&&p(o,a,n,0)});let{anchor:n}=A;t&&(n=m(t),h(t,s,A,!0)),e||p(o,a,n,0)}Zn(A,o),A.pendingBranch=null,A.isInFallback=!1;let l=A.parent,c=!1;for(;l;){if(l.pendingBranch){l.effects.push(...i),c=!0;break}l=l.parent}c||vn(i),A.effects=[],Kn(n,"onResolve")},fallback(e){if(!A.pendingBranch)return;const{vnode:n,activeBranch:t,parentComponent:o,container:r,isSVG:i}=A;Kn(n,"onFallback");const s=m(t),a=()=>{A.isInFallback&&(f(null,e,r,s,o,null,i,l,c),Zn(A,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(t.transition.afterLeave=a),A.isInFallback=!0,h(t,o,null,!0),u||a()},move(e,n,t){A.activeBranch&&p(A.activeBranch,e,n,t),A.container=e},next:()=>A.activeBranch&&m(A.activeBranch),registerDep(e,n){const t=!!A.pendingBranch;t&&A.deps++;const o=e.vnode.el;e.asyncDep.catch(n=>{tn(n,e,0)}).then(r=>{if(e.isUnmounted||A.isUnmounted||A.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:i}=e;qr(e,r,!1),o&&(i.el=o);const s=!o&&e.subTree.el;n(e,i,v(o||e.subTree.el),o?null:m(e.subTree),A,a,c),s&&g(s),$n(e,i.el),t&&0==--A.deps&&A.resolve()})},unmount(e,n){A.isUnmounted=!0,A.activeBranch&&h(A.activeBranch,t,e,n),A.pendingBranch&&h(A.pendingBranch,t,e,n)}};return A}function Qn(e){let n;if(Object(o.q)(e)){const t=ar&&e._c;t&&(e._d=!1,rr()),e=e(),t&&(e._d=!0,n=or,ir())}if(Object(o.o)(e)){const n=zn(e);0,e=n}return e=jr(e),n&&!e.dynamicChildren&&(e.dynamicChildren=n.filter(n=>n!==e)),e}function Jn(e,n){n&&n.pendingBranch?Object(o.o)(e)?n.effects.push(...e):n.effects.push(e):vn(e)}function Zn(e,n){e.activeBranch=n;const{vnode:t,parentComponent:o}=e,r=t.el=n.el;o&&o.subTree===t&&(o.vnode.el=r,$n(o,r))}function et(e,n){if(Pr){let t=Pr.provides;const o=Pr.parent&&Pr.parent.provides;o===t&&(t=Pr.provides=Object.create(o)),t[e]=n}else 0}function nt(e,n,t=!1){const r=Pr||Pn;if(r){const i=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(i&&e in i)return i[e];if(arguments.length>1)return t&&Object(o.q)(n)?n.call(r.proxy):n}else 0}function tt(e,n){return at(e,null,n)}function ot(e,n){return at(e,null,{flush:"post"})}function rt(e,n){return at(e,null,{flush:"sync"})}const it={};function st(e,n,t){return at(e,n,t)}function at(e,n,{immediate:t,deep:r,flush:i,onTrack:s,onTrigger:a}=o.b){const c=l()===(null==Pr?void 0:Pr.scope)?Pr:null;let u,d,f=!1,p=!1;if(Ie(e)?(u=()=>e.value,f=Be(e)):je(e)?(u=()=>e,r=!0):Object(o.o)(e)?(p=!0,f=e.some(e=>je(e)||Be(e)),u=()=>e.map(e=>Ie(e)?e.value:je(e)?ut(e):Object(o.q)(e)?en(e,c,2):void 0)):u=Object(o.q)(e)?n?()=>en(e,c,2):()=>{if(!c||!c.isUnmounted)return d&&d(),nn(e,c,3,[m])}:o.d,n&&r){const e=u;u=()=>ut(e())}let h,m=e=>{d=_.onStop=()=>{en(e,c,4)}};if(Lr){if(m=o.d,n?t&&nn(n,c,3,[u(),p?[]:void 0,m]):u(),"sync"!==i)return o.d;{const e=ui();h=e.__watcherHandles||(e.__watcherHandles=[])}}let v=p?new Array(e.length).fill(it):it;const g=()=>{if(_.active)if(n){const e=_.run();(r||f||(p?e.some((e,n)=>Object(o.j)(e,v[n])):Object(o.j)(e,v)))&&(d&&d(),nn(n,c,3,[e,v===it?void 0:p&&v[0]===it?[]:v,m]),v=e)}else _.run()};let b;g.allowRecurse=!!n,"sync"===i?b=g:"post"===i?b=()=>Uo(g,c&&c.suspense):(g.pre=!0,c&&(g.id=c.uid),b=()=>hn(g));const _=new A(u,b);n?t?g():v=_.run():"post"===i?Uo(_.run.bind(_),c&&c.suspense):_.run();const y=()=>{_.stop(),c&&c.scope&&Object(o.O)(c.scope.effects,_)};return h&&h.push(y),y}function lt(e,n,t){const r=this.proxy,i=Object(o.F)(e)?e.includes(".")?ct(r,e):()=>r[e]:e.bind(r,r);let s;Object(o.q)(n)?s=n:(s=n.handler,t=n);const a=Pr;Ir(this);const l=at(i,s.bind(r),t);return a?Ir(a):Rr(),l}function ct(e,n){const t=n.split(".");return()=>{let n=e;for(let e=0;e<t.length&&n;e++)n=n[t[e]];return n}}function ut(e,n){if(!Object(o.w)(e)||e.__v_skip)return e;if((n=n||new Set).has(e))return e;if(n.add(e),Ie(e))ut(e.value,n);else if(Object(o.o)(e))for(let t=0;t<e.length;t++)ut(e[t],n);else if(Object(o.D)(e)||Object(o.u)(e))e.forEach(e=>{ut(e,n)});else if(Object(o.y)(e))for(const t in e)ut(e[t],n);return e}function dt(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return It(()=>{e.isMounted=!0}),Dt(()=>{e.isUnmounting=!0}),e}const ft=[Function,Array],pt={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ft,onEnter:ft,onAfterEnter:ft,onEnterCancelled:ft,onBeforeLeave:ft,onLeave:ft,onAfterLeave:ft,onLeaveCancelled:ft,onBeforeAppear:ft,onAppear:ft,onAfterAppear:ft,onAppearCancelled:ft},setup(e,{slots:n}){const t=Mr(),o=dt();let r;return()=>{const i=n.default&&At(n.default(),!0);if(!i||!i.length)return;let s=i[0];if(i.length>1){let e=!1;for(const n of i)if(n.type!==er){0,s=n,e=!0;break}}const a=Se(e),{mode:l}=a;if(o.isLeaving)return vt(s);const c=gt(s);if(!c)return vt(s);const u=mt(c,a,o,t);bt(c,u);const d=t.subTree,f=d&&gt(d);let p=!1;const{getTransitionKey:h}=c.type;if(h){const e=h();void 0===r?r=e:e!==r&&(r=e,p=!0)}if(f&&f.type!==er&&(!pr(c,f)||p)){const e=mt(f,a,o,t);if(bt(f,e),"out-in"===l)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,!1!==t.update.active&&t.update()},vt(s);"in-out"===l&&c.type!==er&&(e.delayLeave=(e,n,t)=>{ht(o,f)[String(f.key)]=f,e._leaveCb=()=>{n(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=t})}return s}}};function ht(e,n){const{leavingVNodes:t}=e;let o=t.get(n.type);return o||(o=Object.create(null),t.set(n.type,o)),o}function mt(e,n,t,r){const{appear:i,mode:s,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:f,onLeave:p,onAfterLeave:h,onLeaveCancelled:m,onBeforeAppear:v,onAppear:g,onAfterAppear:b,onAppearCancelled:A}=n,_=String(e.key),y=ht(t,e),C=(e,n)=>{e&&nn(e,r,9,n)},O=(e,n)=>{const t=n[1];C(e,n),Object(o.o)(e)?e.every(e=>e.length<=1)&&t():e.length<=1&&t()},E={mode:s,persisted:a,beforeEnter(n){let o=l;if(!t.isMounted){if(!i)return;o=v||l}n._leaveCb&&n._leaveCb(!0);const r=y[_];r&&pr(e,r)&&r.el._leaveCb&&r.el._leaveCb(),C(o,[n])},enter(e){let n=c,o=u,r=d;if(!t.isMounted){if(!i)return;n=g||c,o=b||u,r=A||d}let s=!1;const a=e._enterCb=n=>{s||(s=!0,C(n?r:o,[e]),E.delayedLeave&&E.delayedLeave(),e._enterCb=void 0)};n?O(n,[e,a]):a()},leave(n,o){const r=String(e.key);if(n._enterCb&&n._enterCb(!0),t.isUnmounting)return o();C(f,[n]);let i=!1;const s=n._leaveCb=t=>{i||(i=!0,o(),C(t?m:h,[n]),n._leaveCb=void 0,y[r]===e&&delete y[r])};y[r]=e,p?O(p,[n,s]):s()},clone:e=>mt(e,n,t,r)};return E}function vt(e){if(Et(e))return(e=Cr(e)).children=null,e}function gt(e){return Et(e)?e.children?e.children[0]:void 0:e}function bt(e,n){6&e.shapeFlag&&e.component?bt(e.component.subTree,n):128&e.shapeFlag?(e.ssContent.transition=n.clone(e.ssContent),e.ssFallback.transition=n.clone(e.ssFallback)):e.transition=n}function At(e,n=!1,t){let o=[],r=0;for(let i=0;i<e.length;i++){let s=e[i];const a=null==t?s.key:String(t)+String(null!=s.key?s.key:i);s.type===Jo?(128&s.patchFlag&&r++,o=o.concat(At(s.children,n,a))):(n||s.type!==er)&&o.push(null!=a?Cr(s,{key:a}):s)}if(r>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function _t(e){return Object(o.q)(e)?{setup:e,name:e.name}:e}const yt=e=>!!e.type.__asyncLoader;function Ct(e){Object(o.q)(e)&&(e={loader:e});const{loader:n,loadingComponent:t,errorComponent:r,delay:i=200,timeout:s,suspensible:a=!0,onError:l}=e;let c,u=null,d=0;const f=()=>{let e;return u||(e=u=n().catch(e=>{if(e=e instanceof Error?e:new Error(String(e)),l)return new Promise((n,t)=>{l(e,()=>n((d++,u=null,f())),()=>t(e),d+1)});throw e}).then(n=>e!==u&&u?u:(n&&(n.__esModule||"Module"===n[Symbol.toStringTag])&&(n=n.default),c=n,n)))};return _t({name:"AsyncComponentWrapper",__asyncLoader:f,get __asyncResolved(){return c},setup(){const e=Pr;if(c)return()=>Ot(c,e);const n=n=>{u=null,tn(n,e,13,!r)};if(a&&e.suspense||Lr)return f().then(n=>()=>Ot(n,e)).catch(e=>(n(e),()=>r?Ar(r,{error:e}):null));const o=Re(!1),l=Re(),d=Re(!!i);return i&&setTimeout(()=>{d.value=!1},i),null!=s&&setTimeout(()=>{if(!o.value&&!l.value){const e=new Error(`Async component timed out after ${s}ms.`);n(e),l.value=e}},s),f().then(()=>{o.value=!0,e.parent&&Et(e.parent.vnode)&&hn(e.parent.update)}).catch(e=>{n(e),l.value=e}),()=>o.value&&c?Ot(c,e):l.value&&r?Ar(r,{error:l.value}):t&&!d.value?Ar(t):void 0}})}function Ot(e,n){const{ref:t,props:o,children:r,ce:i}=n.vnode,s=Ar(e,o,r);return s.ref=t,s.ce=i,delete n.vnode.ce,s}const Et=e=>e.type.__isKeepAlive,xt={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:n}){const t=Mr(),r=t.ctx;if(!r.renderer)return()=>{const e=n.default&&n.default();return e&&1===e.length?e[0]:e};const i=new Map,s=new Set;let a=null;__VUE_PROD_DEVTOOLS__&&(t.__v_cache=i);const l=t.suspense,{renderer:{p:c,m:u,um:d,o:{createElement:f}}}=r,p=f("div");function h(e){Vt(e),d(e,t,l,!0)}function m(e){i.forEach((n,t)=>{const o=Kr(n.type);!o||e&&e(o)||v(t)})}function v(e){const n=i.get(e);a&&pr(n,a)?a&&Vt(a):h(n),i.delete(e),s.delete(e)}r.activate=(e,n,t,r,i)=>{const s=e.component;u(e,n,t,0,l),c(s.vnode,e,n,t,s,l,r,e.slotScopeIds,i),Uo(()=>{s.isDeactivated=!1,s.a&&Object(o.n)(s.a);const n=e.props&&e.props.onVnodeMounted;n&&Sr(n,s.parent,e)},l),__VUE_PROD_DEVTOOLS__&&wn(s)},r.deactivate=e=>{const n=e.component;u(e,p,null,1,l),Uo(()=>{n.da&&Object(o.n)(n.da);const t=e.props&&e.props.onVnodeUnmounted;t&&Sr(t,n.parent,e),n.isDeactivated=!0},l),__VUE_PROD_DEVTOOLS__&&wn(n)},st(()=>[e.include,e.exclude],([e,n])=>{e&&m(n=>jt(e,n)),n&&m(e=>!jt(n,e))},{flush:"post",deep:!0});let g=null;const b=()=>{null!=g&&i.set(g,Tt(t.subTree))};return It(b),Ft(b),Dt(()=>{i.forEach(e=>{const{subTree:n,suspense:o}=t,r=Tt(n);if(e.type!==r.type||e.key!==r.key)h(e);else{Vt(r);const e=r.component.da;e&&Uo(e,o)}})}),()=>{if(g=null,!n.default)return null;const t=n.default(),o=t[0];if(t.length>1)return a=null,t;if(!(fr(o)&&(4&o.shapeFlag||128&o.shapeFlag)))return a=null,o;let r=Tt(o);const l=r.type,c=Kr(yt(r)?r.type.__asyncResolved||{}:l),{include:u,exclude:d,max:f}=e;if(u&&(!c||!jt(u,c))||d&&c&&jt(d,c))return a=r,o;const p=null==r.key?l:r.key,h=i.get(p);return r.el&&(r=Cr(r),128&o.shapeFlag&&(o.ssContent=r)),g=p,h?(r.el=h.el,r.component=h.component,r.transition&&bt(r,r.transition),r.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),f&&s.size>parseInt(f,10)&&v(s.values().next().value)),r.shapeFlag|=256,a=r,Yn(o.type)?o:r}}};function jt(e,n){return Object(o.o)(e)?e.some(e=>jt(e,n)):Object(o.F)(e)?e.split(",").includes(n):!!Object(o.A)(e)&&e.test(n)}function wt(e,n){kt(e,"a",n)}function Bt(e,n){kt(e,"da",n)}function kt(e,n,t=Pr){const o=e.__wdc||(e.__wdc=()=>{let n=t;for(;n;){if(n.isDeactivated)return;n=n.parent}return e()});if(Nt(n,o,t),t){let e=t.parent;for(;e&&e.parent;)Et(e.parent.vnode)&&St(o,n,t,e),e=e.parent}}function St(e,n,t,r){const i=Nt(n,e,r,!0);Ut(()=>{Object(o.O)(r[n],i)},t)}function Vt(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function Tt(e){return 128&e.shapeFlag?e.ssContent:e}function Nt(e,n,t=Pr,o=!1){if(t){const r=t[e]||(t[e]=[]),i=n.__weh||(n.__weh=(...o)=>{if(t.isUnmounted)return;x(),Ir(t);const r=nn(n,t,e,o);return Rr(),j(),r});return o?r.unshift(i):r.push(i),i}}const Pt=e=>(n,t=Pr)=>(!Lr||"sp"===e)&&Nt(e,(...e)=>n(...e),t),Mt=Pt("bm"),It=Pt("m"),Rt=Pt("bu"),Ft=Pt("u"),Dt=Pt("bum"),Ut=Pt("um"),Lt=Pt("sp"),zt=Pt("rtg"),qt=Pt("rtc");function Ht(e,n=Pr){Nt("ec",e,n)}function Wt(e,n){const t=Pn;if(null===t)return e;const r=Xr(t)||t.proxy,i=e.dirs||(e.dirs=[]);for(let e=0;e<n.length;e++){let[t,s,a,l=o.b]=n[e];t&&(Object(o.q)(t)&&(t={mounted:t,updated:t}),t.deep&&ut(s),i.push({dir:t,instance:r,value:s,oldValue:void 0,arg:a,modifiers:l}))}return e}function $t(e,n,t,o){const r=e.dirs,i=n&&n.dirs;for(let s=0;s<r.length;s++){const a=r[s];i&&(a.oldValue=i[s].value);let l=a.dir[o];l&&(x(),nn(l,t,8,[e.el,a,e,n]),j())}}function Yt(e,n){return Qt("components",e,!0,n)||e}const Xt=Symbol();function Kt(e){return Object(o.F)(e)?Qt("components",e,!1)||e:e||Xt}function Gt(e){return Qt("directives",e)}function Qt(e,n,t=!0,r=!1){const i=Pn||Pr;if(i){const t=i.type;if("components"===e){const e=Kr(t,!1);if(e&&(e===n||e===Object(o.e)(n)||e===Object(o.f)(Object(o.e)(n))))return t}const s=Jt(i[e]||t[e],n)||Jt(i.appContext[e],n);return!s&&r?t:s}}function Jt(e,n){return e&&(e[n]||e[Object(o.e)(n)]||e[Object(o.f)(Object(o.e)(n))])}function Zt(e,n,t,r){let i;const s=t&&t[r];if(Object(o.o)(e)||Object(o.F)(e)){i=new Array(e.length);for(let t=0,o=e.length;t<o;t++)i[t]=n(e[t],t,void 0,s&&s[t])}else if("number"==typeof e){0,i=new Array(e);for(let t=0;t<e;t++)i[t]=n(t+1,t,void 0,s&&s[t])}else if(Object(o.w)(e))if(e[Symbol.iterator])i=Array.from(e,(e,t)=>n(e,t,void 0,s&&s[t]));else{const t=Object.keys(e);i=new Array(t.length);for(let o=0,r=t.length;o<r;o++){const r=t[o];i[o]=n(e[r],r,o,s&&s[o])}}else i=[];return t&&(t[r]=i),i}function eo(e,n){for(let t=0;t<n.length;t++){const r=n[t];if(Object(o.o)(r))for(let n=0;n<r.length;n++)e[r[n].name]=r[n].fn;else r&&(e[r.name]=r.key?(...e)=>{const n=r.fn(...e);return n&&(n.key=r.key),n}:r.fn)}return e}function no(e,n,t={},o,r){if(Pn.isCE||Pn.parent&&yt(Pn.parent)&&Pn.parent.isCE)return"default"!==n&&(t.name=n),Ar("slot",t,o&&o());let i=e[n];i&&i._c&&(i._d=!1),rr();const s=i&&function e(n){return n.some(n=>!fr(n)||n.type!==er&&!(n.type===Jo&&!e(n.children)))?n:null}(i(t)),a=dr(Jo,{key:t.key||s&&s.key||"_"+n},s||(o?o():[]),s&&1===e._?64:-2);return!r&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function to(e,n){const t={};for(const r in e)t[n&&/[A-Z]/.test(r)?"on:"+r:Object(o.Q)(r)]=e[r];return t}const oo=e=>e?Fr(e)?Xr(e)||e.proxy:oo(e.parent):null,ro=Object(o.h)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>oo(e.parent),$root:e=>oo(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?po(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>hn(e.update)),$nextTick:e=>e.n||(e.n=pn.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?lt.bind(e):o.d}),io=(e,n)=>e!==o.b&&!e.__isScriptSetup&&Object(o.k)(e,n),so={get({_:e},n){const{ctx:t,setupState:r,data:i,props:s,accessCache:a,type:l,appContext:c}=e;let u;if("$"!==n[0]){const l=a[n];if(void 0!==l)switch(l){case 1:return r[n];case 2:return i[n];case 4:return t[n];case 3:return s[n]}else{if(io(r,n))return a[n]=1,r[n];if(i!==o.b&&Object(o.k)(i,n))return a[n]=2,i[n];if((u=e.propsOptions[0])&&Object(o.k)(u,n))return a[n]=3,s[n];if(t!==o.b&&Object(o.k)(t,n))return a[n]=4,t[n];__VUE_OPTIONS_API__&&!lo||(a[n]=0)}}const d=ro[n];let f,p;return d?("$attrs"===n&&w(e,0,n),d(e)):(f=l.__cssModules)&&(f=f[n])?f:t!==o.b&&Object(o.k)(t,n)?(a[n]=4,t[n]):(p=c.config.globalProperties,Object(o.k)(p,n)?p[n]:void 0)},set({_:e},n,t){const{data:r,setupState:i,ctx:s}=e;return io(i,n)?(i[n]=t,!0):r!==o.b&&Object(o.k)(r,n)?(r[n]=t,!0):!Object(o.k)(e.props,n)&&(("$"!==n[0]||!(n.slice(1)in e))&&(s[n]=t,!0))},has({_:{data:e,setupState:n,accessCache:t,ctx:r,appContext:i,propsOptions:s}},a){let l;return!!t[a]||e!==o.b&&Object(o.k)(e,a)||io(n,a)||(l=s[0])&&Object(o.k)(l,a)||Object(o.k)(r,a)||Object(o.k)(ro,a)||Object(o.k)(i.config.globalProperties,a)},defineProperty(e,n,t){return null!=t.get?e._.accessCache[n]=0:Object(o.k)(t,"value")&&this.set(e,n,t.value,null),Reflect.defineProperty(e,n,t)}};const ao=Object(o.h)({},so,{get(e,n){if(n!==Symbol.unscopables)return so.get(e,n,e)},has:(e,n)=>"_"!==n[0]&&!Object(o.r)(n)});let lo=!0;function co(e){const n=po(e),t=e.proxy,r=e.ctx;lo=!1,n.beforeCreate&&uo(n.beforeCreate,e,"bc");const{data:i,computed:s,methods:a,watch:l,provide:c,inject:u,created:d,beforeMount:f,mounted:p,beforeUpdate:h,updated:m,activated:v,deactivated:g,beforeDestroy:b,beforeUnmount:A,destroyed:_,unmounted:y,render:C,renderTracked:O,renderTriggered:E,errorCaptured:x,serverPrefetch:j,expose:w,inheritAttrs:B,components:k,directives:S,filters:V}=n;if(u&&function(e,n,t=o.d,r=!1){Object(o.o)(e)&&(e=go(e));for(const t in e){const i=e[t];let s;s=Object(o.w)(i)?"default"in i?nt(i.from||t,i.default,!0):nt(i.from||t):nt(i),Ie(s)&&r?Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):n[t]=s}}(u,r,null,e.appContext.config.unwrapInjectedRef),a)for(const e in a){const n=a[e];Object(o.q)(n)&&(r[e]=n.bind(t))}if(i){0;const n=i.call(t,t);0,Object(o.w)(n)&&(e.data=ye(n))}if(lo=!0,s)for(const e in s){const n=s[e],i=Object(o.q)(n)?n.bind(t,t):Object(o.q)(n.get)?n.get.bind(t,t):o.d;0;const a=!Object(o.q)(n)&&Object(o.q)(n.set)?n.set.bind(t):o.d,l=Qr({get:i,set:a});Object.defineProperty(r,e,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e})}if(l)for(const e in l)fo(l[e],r,t,e);if(c){const e=Object(o.q)(c)?c.call(t):c;Reflect.ownKeys(e).forEach(n=>{et(n,e[n])})}function T(e,n){Object(o.o)(n)?n.forEach(n=>e(n.bind(t))):n&&e(n.bind(t))}if(d&&uo(d,e,"c"),T(Mt,f),T(It,p),T(Rt,h),T(Ft,m),T(wt,v),T(Bt,g),T(Ht,x),T(qt,O),T(zt,E),T(Dt,A),T(Ut,y),T(Lt,j),Object(o.o)(w))if(w.length){const n=e.exposed||(e.exposed={});w.forEach(e=>{Object.defineProperty(n,e,{get:()=>t[e],set:n=>t[e]=n})})}else e.exposed||(e.exposed={});C&&e.render===o.d&&(e.render=C),null!=B&&(e.inheritAttrs=B),k&&(e.components=k),S&&(e.directives=S)}function uo(e,n,t){nn(Object(o.o)(e)?e.map(e=>e.bind(n.proxy)):e.bind(n.proxy),n,t)}function fo(e,n,t,r){const i=r.includes(".")?ct(t,r):()=>t[r];if(Object(o.F)(e)){const t=n[e];Object(o.q)(t)&&st(i,t)}else if(Object(o.q)(e))st(i,e.bind(t));else if(Object(o.w)(e))if(Object(o.o)(e))e.forEach(e=>fo(e,n,t,r));else{const r=Object(o.q)(e.handler)?e.handler.bind(t):n[e.handler];Object(o.q)(r)&&st(i,r,e)}else 0}function po(e){const n=e.type,{mixins:t,extends:r}=n,{mixins:i,optionsCache:s,config:{optionMergeStrategies:a}}=e.appContext,l=s.get(n);let c;return l?c=l:i.length||t||r?(c={},i.length&&i.forEach(e=>ho(c,e,a,!0)),ho(c,n,a)):c=n,Object(o.w)(n)&&s.set(n,c),c}function ho(e,n,t,o=!1){const{mixins:r,extends:i}=n;i&&ho(e,i,t,!0),r&&r.forEach(n=>ho(e,n,t,!0));for(const r in n)if(o&&"expose"===r);else{const o=mo[r]||t&&t[r];e[r]=o?o(e[r],n[r]):n[r]}return e}const mo={data:vo,props:Ao,emits:Ao,methods:Ao,computed:Ao,beforeCreate:bo,created:bo,beforeMount:bo,mounted:bo,beforeUpdate:bo,updated:bo,beforeDestroy:bo,beforeUnmount:bo,destroyed:bo,unmounted:bo,activated:bo,deactivated:bo,errorCaptured:bo,serverPrefetch:bo,components:Ao,directives:Ao,watch:function(e,n){if(!e)return n;if(!n)return e;const t=Object(o.h)(Object.create(null),e);for(const o in n)t[o]=bo(e[o],n[o]);return t},provide:vo,inject:function(e,n){return Ao(go(e),go(n))}};function vo(e,n){return n?e?function(){return Object(o.h)(Object(o.q)(e)?e.call(this,this):e,Object(o.q)(n)?n.call(this,this):n)}:n:e}function go(e){if(Object(o.o)(e)){const n={};for(let t=0;t<e.length;t++)n[e[t]]=e[t];return n}return e}function bo(e,n){return e?[...new Set([].concat(e,n))]:n}function Ao(e,n){return e?Object(o.h)(Object(o.h)(Object.create(null),e),n):n}function _o(e,n,t,r){const[i,s]=e.propsOptions;let a,l=!1;if(n)for(let c in n){if(Object(o.B)(c))continue;const u=n[c];let d;i&&Object(o.k)(i,d=Object(o.e)(c))?s&&s.includes(d)?(a||(a={}))[d]=u:t[d]=u:Nn(e.emitsOptions,c)||c in r&&u===r[c]||(r[c]=u,l=!0)}if(s){const n=Se(t),r=a||o.b;for(let a=0;a<s.length;a++){const l=s[a];t[l]=yo(i,n,l,r[l],e,!Object(o.k)(r,l))}}return l}function yo(e,n,t,r,i,s){const a=e[t];if(null!=a){const e=Object(o.k)(a,"default");if(e&&void 0===r){const e=a.default;if(a.type!==Function&&Object(o.q)(e)){const{propsDefaults:o}=i;t in o?r=o[t]:(Ir(i),r=o[t]=e.call(null,n),Rr())}else r=e}a[0]&&(s&&!e?r=!1:!a[1]||""!==r&&r!==Object(o.l)(t)||(r=!0))}return r}function Co(e,n,t=!1){const r=n.propsCache,i=r.get(e);if(i)return i;const s=e.props,a={},l=[];let c=!1;if(__VUE_OPTIONS_API__&&!Object(o.q)(e)){const r=e=>{c=!0;const[t,r]=Co(e,n,!0);Object(o.h)(a,t),r&&l.push(...r)};!t&&n.mixins.length&&n.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}if(!s&&!c)return Object(o.w)(e)&&r.set(e,o.a),o.a;if(Object(o.o)(s))for(let e=0;e<s.length;e++){0;const n=Object(o.e)(s[e]);Oo(n)&&(a[n]=o.b)}else if(s){0;for(const e in s){const n=Object(o.e)(e);if(Oo(n)){const t=s[e],r=a[n]=Object(o.o)(t)||Object(o.q)(t)?{type:t}:Object.assign({},t);if(r){const e=jo(Boolean,r.type),t=jo(String,r.type);r[0]=e>-1,r[1]=t<0||e<t,(e>-1||Object(o.k)(r,"default"))&&l.push(n)}}}}const u=[a,l];return Object(o.w)(e)&&r.set(e,u),u}function Oo(e){return"$"!==e[0]}function Eo(e){const n=e&&e.toString().match(/^\s*(function|class) (\w+)/);return n?n[2]:null===e?"null":""}function xo(e,n){return Eo(e)===Eo(n)}function jo(e,n){return Object(o.o)(n)?n.findIndex(n=>xo(n,e)):Object(o.q)(n)&&xo(n,e)?0:-1}const wo=e=>"_"===e[0]||"$stable"===e,Bo=e=>Object(o.o)(e)?e.map(jr):[jr(e)],ko=(e,n,t)=>{if(n._n)return n;const o=Un((...e)=>Bo(n(...e)),t);return o._c=!1,o},So=(e,n,t)=>{const r=e._ctx;for(const t in e){if(wo(t))continue;const i=e[t];if(Object(o.q)(i))n[t]=ko(0,i,r);else if(null!=i){0;const e=Bo(i);n[t]=()=>e}}},Vo=(e,n)=>{const t=Bo(n);e.slots.default=()=>t};function To(){return{app:null,config:{isNativeTag:o.c,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let No=0;function Po(e,n){return function(t,r=null){Object(o.q)(t)||(t=Object.assign({},t)),null==r||Object(o.w)(r)||(r=null);const i=To(),s=new Set;let a=!1;const l=i.app={_uid:No++,_component:t,_props:r,_container:null,_context:i,_instance:null,version:hi,get config(){return i.config},set config(e){0},use:(e,...n)=>(s.has(e)||(e&&Object(o.q)(e.install)?(s.add(e),e.install(l,...n)):Object(o.q)(e)&&(s.add(e),e(l,...n))),l),mixin:e=>(__VUE_OPTIONS_API__&&(i.mixins.includes(e)||i.mixins.push(e)),l),component:(e,n)=>n?(i.components[e]=n,l):i.components[e],directive:(e,n)=>n?(i.directives[e]=n,l):i.directives[e],mount(o,s,c){if(!a){0;const u=Ar(t,r);return u.appContext=i,s&&n?n(u,o):e(u,o,c),a=!0,l._container=o,o.__vue_app__=l,__VUE_PROD_DEVTOOLS__&&(l._instance=u.component,function(e,n){xn("app:init",e,n,{Fragment:Jo,Text:Zo,Comment:er,Static:nr})}(l,hi)),Xr(u.component)||u.component.proxy}},unmount(){a&&(e(null,l._container),__VUE_PROD_DEVTOOLS__&&(l._instance=null,function(e){xn("app:unmount",e)}(l)),delete l._container.__vue_app__)},provide:(e,n)=>(i.provides[e]=n,l)};return l}}function Mo(e,n,t,r,i=!1){if(Object(o.o)(e))return void e.forEach((e,s)=>Mo(e,n&&(Object(o.o)(n)?n[s]:n),t,r,i));if(yt(r)&&!i)return;const s=4&r.shapeFlag?Xr(r.component)||r.component.proxy:r.el,a=i?null:s,{i:l,r:c}=e;const u=n&&n.r,d=l.refs===o.b?l.refs={}:l.refs,f=l.setupState;if(null!=u&&u!==c&&(Object(o.F)(u)?(d[u]=null,Object(o.k)(f,u)&&(f[u]=null)):Ie(u)&&(u.value=null)),Object(o.q)(c))en(c,l,12,[a,d]);else{const n=Object(o.F)(c),r=Ie(c);if(n||r){const l=()=>{if(e.f){const t=n?Object(o.k)(f,c)?f[c]:d[c]:c.value;i?Object(o.o)(t)&&Object(o.O)(t,s):Object(o.o)(t)?t.includes(s)||t.push(s):n?(d[c]=[s],Object(o.k)(f,c)&&(f[c]=d[c])):(c.value=[s],e.k&&(d[e.k]=c.value))}else n?(d[c]=a,Object(o.k)(f,c)&&(f[c]=a)):r&&(c.value=a,e.k&&(d[e.k]=a))};a?(l.id=-1,Uo(l,t)):l()}else 0}}let Io=!1;const Ro=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,Fo=e=>8===e.nodeType;function Do(e){const{mt:n,p:t,o:{patchProp:r,createText:i,nextSibling:s,parentNode:a,remove:l,insert:c,createComment:u}}=e,d=(t,o,r,l,u,g=!1)=>{const b=Fo(t)&&"["===t.data,A=()=>m(t,o,r,l,u,b),{type:_,ref:y,shapeFlag:C,patchFlag:O}=o;let E=t.nodeType;o.el=t,-2===O&&(g=!1,o.dynamicChildren=null);let x=null;switch(_){case Zo:3!==E?""===o.children?(c(o.el=i(""),a(t),t),x=t):x=A():(t.data!==o.children&&(Io=!0,t.data=o.children),x=s(t));break;case er:x=8!==E||b?A():s(t);break;case nr:if(b&&(E=(t=s(t)).nodeType),1===E||3===E){x=t;const e=!o.children.length;for(let n=0;n<o.staticCount;n++)e&&(o.children+=1===x.nodeType?x.outerHTML:x.data),n===o.staticCount-1&&(o.anchor=x),x=s(x);return b?s(x):x}A();break;case Jo:x=b?h(t,o,r,l,u,g):A();break;default:if(1&C)x=1!==E||o.type.toLowerCase()!==t.tagName.toLowerCase()?A():f(t,o,r,l,u,g);else if(6&C){o.slotScopeIds=u;const e=a(t);if(n(o,e,null,r,l,Ro(e),g),x=b?v(t):s(t),x&&Fo(x)&&"teleport end"===x.data&&(x=s(x)),yt(o)){let n;b?(n=Ar(Jo),n.anchor=x?x.previousSibling:e.lastChild):n=3===t.nodeType?Or(""):Ar("div"),n.el=t,o.component.subTree=n}}else 64&C?x=8!==E?A():o.type.hydrate(t,o,r,l,u,g,e,p):128&C&&(x=o.type.hydrate(t,o,r,l,Ro(a(t)),u,g,e,d))}return null!=y&&Mo(y,null,l,o),x},f=(e,n,t,i,s,a)=>{a=a||!!n.dynamicChildren;const{type:c,props:u,patchFlag:d,shapeFlag:f,dirs:h}=n,m="input"===c&&h||"option"===c;if(m||-1!==d){if(h&&$t(n,null,t,"created"),u)if(m||!a||48&d)for(const n in u)(m&&n.endsWith("value")||Object(o.x)(n)&&!Object(o.B)(n))&&r(e,n,null,u[n],!1,void 0,t);else u.onClick&&r(e,"onClick",null,u.onClick,!1,void 0,t);let c;if((c=u&&u.onVnodeBeforeMount)&&Sr(c,t,n),h&&$t(n,null,t,"beforeMount"),((c=u&&u.onVnodeMounted)||h)&&Jn(()=>{c&&Sr(c,t,n),h&&$t(n,null,t,"mounted")},i),16&f&&(!u||!u.innerHTML&&!u.textContent)){let o=p(e.firstChild,n,e,t,i,s,a);for(;o;){Io=!0;const e=o;o=o.nextSibling,l(e)}}else 8&f&&e.textContent!==n.children&&(Io=!0,e.textContent=n.children)}return e.nextSibling},p=(e,n,o,r,i,s,a)=>{a=a||!!n.dynamicChildren;const l=n.children,c=l.length;for(let n=0;n<c;n++){const c=a?l[n]:l[n]=jr(l[n]);if(e)e=d(e,c,r,i,s,a);else{if(c.type===Zo&&!c.children)continue;Io=!0,t(null,c,o,null,r,i,Ro(o),s)}}return e},h=(e,n,t,o,r,i)=>{const{slotScopeIds:l}=n;l&&(r=r?r.concat(l):l);const d=a(e),f=p(s(e),n,d,t,o,r,i);return f&&Fo(f)&&"]"===f.data?s(n.anchor=f):(Io=!0,c(n.anchor=u("]"),d,f),f)},m=(e,n,o,r,i,c)=>{if(Io=!0,n.el=null,c){const n=v(e);for(;;){const t=s(e);if(!t||t===n)break;l(t)}}const u=s(e),d=a(e);return l(e),t(null,n,d,u,o,r,Ro(d),i),u},v=e=>{let n=0;for(;e;)if((e=s(e))&&Fo(e)&&("["===e.data&&n++,"]"===e.data)){if(0===n)return s(e);n--}return e};return[(e,n)=>{if(!n.hasChildNodes())return t(null,e,n),bn(),void(n._vnode=e);Io=!1,d(n.firstChild,e,null,null,null),bn(),n._vnode=e,Io&&console.error("Hydration completed but contains mismatches.")},d]}const Uo=Jn;function Lo(e){return qo(e)}function zo(e){return qo(e,Do)}function qo(e,n){"boolean"!=typeof __VUE_OPTIONS_API__&&(Object(o.i)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(Object(o.i)().__VUE_PROD_DEVTOOLS__=!1);const t=Object(o.i)();t.__VUE__=!0,__VUE_PROD_DEVTOOLS__&&jn(t.__VUE_DEVTOOLS_GLOBAL_HOOK__,t);const{insert:r,remove:i,patchProp:s,createElement:a,createText:l,createComment:c,setText:u,setElementText:d,parentNode:f,nextSibling:p,setScopeId:h=o.d,insertStaticContent:m}=e,v=(e,n,t,o=null,r=null,i=null,s=!1,a=null,l=!!n.dynamicChildren)=>{if(e===n)return;e&&!pr(e,n)&&(o=Y(e),z(e,r,i,!0),e=null),-2===n.patchFlag&&(l=!1,n.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=n;switch(c){case Zo:g(e,n,t,o);break;case er:b(e,n,t,o);break;case nr:null==e&&_(n,t,o,s);break;case Jo:T(e,n,t,o,r,i,s,a,l);break;default:1&d?C(e,n,t,o,r,i,s,a,l):6&d?N(e,n,t,o,r,i,s,a,l):(64&d||128&d)&&c.process(e,n,t,o,r,i,s,a,l,K)}null!=u&&r&&Mo(u,e&&e.ref,i,n||e,!n)},g=(e,n,t,o)=>{if(null==e)r(n.el=l(n.children),t,o);else{const t=n.el=e.el;n.children!==e.children&&u(t,n.children)}},b=(e,n,t,o)=>{null==e?r(n.el=c(n.children||""),t,o):n.el=e.el},_=(e,n,t,o)=>{[e.el,e.anchor]=m(e.children,n,t,o,e.el,e.anchor)},y=({el:e,anchor:n})=>{let t;for(;e&&e!==n;)t=p(e),i(e),e=t;i(n)},C=(e,n,t,o,r,i,s,a,l)=>{s=s||"svg"===n.type,null==e?O(n,t,o,r,i,s,a,l):B(e,n,r,i,s,a,l)},O=(e,n,t,i,l,c,u,f)=>{let p,h;const{type:m,props:v,shapeFlag:g,transition:b,dirs:A}=e;if(p=e.el=a(e.type,c,v&&v.is,v),8&g?d(p,e.children):16&g&&w(e.children,p,null,i,l,c&&"foreignObject"!==m,u,f),A&&$t(e,null,i,"created"),E(p,e,e.scopeId,u,i),v){for(const n in v)"value"===n||Object(o.B)(n)||s(p,n,null,v[n],c,e.children,i,l,$);"value"in v&&s(p,"value",null,v.value),(h=v.onVnodeBeforeMount)&&Sr(h,i,e)}__VUE_PROD_DEVTOOLS__&&(Object.defineProperty(p,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(p,"__vueParentComponent",{value:i,enumerable:!1})),A&&$t(e,null,i,"beforeMount");const _=(!l||l&&!l.pendingBranch)&&b&&!b.persisted;_&&b.beforeEnter(p),r(p,n,t),((h=v&&v.onVnodeMounted)||_||A)&&Uo(()=>{h&&Sr(h,i,e),_&&b.enter(p),A&&$t(e,null,i,"mounted")},l)},E=(e,n,t,o,r)=>{if(t&&h(e,t),o)for(let n=0;n<o.length;n++)h(e,o[n]);if(r){if(n===r.subTree){const n=r.vnode;E(e,n,n.scopeId,n.slotScopeIds,r.parent)}}},w=(e,n,t,o,r,i,s,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?wr(e[c]):jr(e[c]);v(null,l,n,t,o,r,i,s,a)}},B=(e,n,t,r,i,a,l)=>{const c=n.el=e.el;let{patchFlag:u,dynamicChildren:f,dirs:p}=n;u|=16&e.patchFlag;const h=e.props||o.b,m=n.props||o.b;let v;t&&Ho(t,!1),(v=m.onVnodeBeforeUpdate)&&Sr(v,t,n,e),p&&$t(n,e,t,"beforeUpdate"),t&&Ho(t,!0);const g=i&&"foreignObject"!==n.type;if(f?S(e.dynamicChildren,f,c,t,r,g,a):l||F(e,n,c,null,t,r,g,a,!1),u>0){if(16&u)V(c,n,h,m,t,r,i);else if(2&u&&h.class!==m.class&&s(c,"class",null,m.class,i),4&u&&s(c,"style",h.style,m.style,i),8&u){const o=n.dynamicProps;for(let n=0;n<o.length;n++){const a=o[n],l=h[a],u=m[a];u===l&&"value"!==a||s(c,a,l,u,i,e.children,t,r,$)}}1&u&&e.children!==n.children&&d(c,n.children)}else l||null!=f||V(c,n,h,m,t,r,i);((v=m.onVnodeUpdated)||p)&&Uo(()=>{v&&Sr(v,t,n,e),p&&$t(n,e,t,"updated")},r)},S=(e,n,t,o,r,i,s)=>{for(let a=0;a<n.length;a++){const l=e[a],c=n[a],u=l.el&&(l.type===Jo||!pr(l,c)||70&l.shapeFlag)?f(l.el):t;v(l,c,u,null,o,r,i,s,!0)}},V=(e,n,t,r,i,a,l)=>{if(t!==r){if(t!==o.b)for(const c in t)Object(o.B)(c)||c in r||s(e,c,t[c],null,l,n.children,i,a,$);for(const c in r){if(Object(o.B)(c))continue;const u=r[c],d=t[c];u!==d&&"value"!==c&&s(e,c,d,u,l,n.children,i,a,$)}"value"in r&&s(e,"value",t.value,r.value)}},T=(e,n,t,o,i,s,a,c,u)=>{const d=n.el=e?e.el:l(""),f=n.anchor=e?e.anchor:l("");let{patchFlag:p,dynamicChildren:h,slotScopeIds:m}=n;m&&(c=c?c.concat(m):m),null==e?(r(d,t,o),r(f,t,o),w(n.children,t,f,i,s,a,c,u)):p>0&&64&p&&h&&e.dynamicChildren?(S(e.dynamicChildren,h,t,i,s,a,c),(null!=n.key||i&&n===i.subTree)&&Wo(e,n,!0)):F(e,n,t,f,i,s,a,c,u)},N=(e,n,t,o,r,i,s,a,l)=>{n.slotScopeIds=a,null==e?512&n.shapeFlag?r.ctx.activate(n,t,o,s,l):P(n,t,o,r,i,s,l):M(e,n,l)},P=(e,n,t,o,r,i,s)=>{const a=e.component=Nr(e,o,r);if(Et(e)&&(a.ctx.renderer=K),zr(a),a.asyncDep){if(r&&r.registerDep(a,I),!e.el){const e=a.subTree=Ar(er);b(null,e,n,t)}}else I(a,e,n,t,r,i,s)},M=(e,n,t)=>{const o=n.component=e.component;if(function(e,n,t){const{props:o,children:r,component:i}=e,{props:s,children:a,patchFlag:l}=n,c=i.emitsOptions;if(n.dirs||n.transition)return!0;if(!(t&&l>=0))return!(!r&&!a||a&&a.$stable)||o!==s&&(o?!s||Wn(o,s,c):!!s);if(1024&l)return!0;if(16&l)return o?Wn(o,s,c):!!s;if(8&l){const e=n.dynamicProps;for(let n=0;n<e.length;n++){const t=e[n];if(s[t]!==o[t]&&!Nn(c,t))return!0}}return!1}(e,n,t)){if(o.asyncDep&&!o.asyncResolved)return void R(o,n,t);o.next=n,function(e){const n=sn.indexOf(e);n>an&&sn.splice(n,1)}(o.update),o.update()}else n.el=e.el,o.vnode=n},I=(e,n,t,r,i,s,a)=>{const l=e.effect=new A(()=>{if(e.isMounted){let n,{next:t,bu:r,u:l,parent:c,vnode:u}=e,d=t;0,Ho(e,!1),t?(t.el=u.el,R(e,t,a)):t=u,r&&Object(o.n)(r),(n=t.props&&t.props.onVnodeBeforeUpdate)&&Sr(n,c,t,u),Ho(e,!0);const p=Ln(e);0;const h=e.subTree;e.subTree=p,v(h,p,f(h.el),Y(h),e,i,s),t.el=p.el,null===d&&$n(e,p.el),l&&Uo(l,i),(n=t.props&&t.props.onVnodeUpdated)&&Uo(()=>Sr(n,c,t,u),i),__VUE_PROD_DEVTOOLS__&&Bn(e)}else{let a;const{el:l,props:c}=n,{bm:u,m:d,parent:f}=e,p=yt(n);if(Ho(e,!1),u&&Object(o.n)(u),!p&&(a=c&&c.onVnodeBeforeMount)&&Sr(a,f,n),Ho(e,!0),l&&Q){const t=()=>{e.subTree=Ln(e),Q(l,e.subTree,e,i,null)};p?n.type.__asyncLoader().then(()=>!e.isUnmounted&&t()):t()}else{0;const o=e.subTree=Ln(e);0,v(null,o,t,r,e,i,s),n.el=o.el}if(d&&Uo(d,i),!p&&(a=c&&c.onVnodeMounted)){const e=n;Uo(()=>Sr(a,f,e),i)}(256&n.shapeFlag||f&&yt(f.vnode)&&256&f.vnode.shapeFlag)&&e.a&&Uo(e.a,i),e.isMounted=!0,__VUE_PROD_DEVTOOLS__&&wn(e),n=t=r=null}},()=>hn(c),e.scope),c=e.update=()=>l.run();c.id=e.uid,Ho(e,!0),c()},R=(e,n,t)=>{n.component=e;const r=e.vnode.props;e.vnode=n,e.next=null,function(e,n,t,r){const{props:i,attrs:s,vnode:{patchFlag:a}}=e,l=Se(i),[c]=e.propsOptions;let u=!1;if(!(r||a>0)||16&a){let r;_o(e,n,i,s)&&(u=!0);for(const s in l)n&&(Object(o.k)(n,s)||(r=Object(o.l)(s))!==s&&Object(o.k)(n,r))||(c?!t||void 0===t[s]&&void 0===t[r]||(i[s]=yo(c,l,s,void 0,e,!0)):delete i[s]);if(s!==l)for(const e in s)n&&Object(o.k)(n,e)||(delete s[e],u=!0)}else if(8&a){const t=e.vnode.dynamicProps;for(let r=0;r<t.length;r++){let a=t[r];if(Nn(e.emitsOptions,a))continue;const d=n[a];if(c)if(Object(o.k)(s,a))d!==s[a]&&(s[a]=d,u=!0);else{const n=Object(o.e)(a);i[n]=yo(c,l,n,d,e,!1)}else d!==s[a]&&(s[a]=d,u=!0)}}u&&k(e,"set","$attrs")}(e,n.props,r,t),((e,n,t)=>{const{vnode:r,slots:i}=e;let s=!0,a=o.b;if(32&r.shapeFlag){const e=n._;e?t&&1===e?s=!1:(Object(o.h)(i,n),t||1!==e||delete i._):(s=!n.$stable,So(n,i)),a=n}else n&&(Vo(e,n),a={default:1});if(s)for(const e in i)wo(e)||e in a||delete i[e]})(e,n.children,t),x(),gn(),j()},F=(e,n,t,o,r,i,s,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,f=n.children,{patchFlag:p,shapeFlag:h}=n;if(p>0){if(128&p)return void U(c,f,t,o,r,i,s,a,l);if(256&p)return void D(c,f,t,o,r,i,s,a,l)}8&h?(16&u&&$(c,r,i),f!==c&&d(t,f)):16&u?16&h?U(c,f,t,o,r,i,s,a,l):$(c,r,i,!0):(8&u&&d(t,""),16&h&&w(f,t,o,r,i,s,a,l))},D=(e,n,t,r,i,s,a,l,c)=>{e=e||o.a,n=n||o.a;const u=e.length,d=n.length,f=Math.min(u,d);let p;for(p=0;p<f;p++){const o=n[p]=c?wr(n[p]):jr(n[p]);v(e[p],o,t,null,i,s,a,l,c)}u>d?$(e,i,s,!0,!1,f):w(n,t,r,i,s,a,l,c,f)},U=(e,n,t,r,i,s,a,l,c)=>{let u=0;const d=n.length;let f=e.length-1,p=d-1;for(;u<=f&&u<=p;){const o=e[u],r=n[u]=c?wr(n[u]):jr(n[u]);if(!pr(o,r))break;v(o,r,t,null,i,s,a,l,c),u++}for(;u<=f&&u<=p;){const o=e[f],r=n[p]=c?wr(n[p]):jr(n[p]);if(!pr(o,r))break;v(o,r,t,null,i,s,a,l,c),f--,p--}if(u>f){if(u<=p){const e=p+1,o=e<d?n[e].el:r;for(;u<=p;)v(null,n[u]=c?wr(n[u]):jr(n[u]),t,o,i,s,a,l,c),u++}}else if(u>p)for(;u<=f;)z(e[u],i,s,!0),u++;else{const h=u,m=u,g=new Map;for(u=m;u<=p;u++){const e=n[u]=c?wr(n[u]):jr(n[u]);null!=e.key&&g.set(e.key,u)}let b,A=0;const _=p-m+1;let y=!1,C=0;const O=new Array(_);for(u=0;u<_;u++)O[u]=0;for(u=h;u<=f;u++){const o=e[u];if(A>=_){z(o,i,s,!0);continue}let r;if(null!=o.key)r=g.get(o.key);else for(b=m;b<=p;b++)if(0===O[b-m]&&pr(o,n[b])){r=b;break}void 0===r?z(o,i,s,!0):(O[r-m]=u+1,r>=C?C=r:y=!0,v(o,n[r],t,null,i,s,a,l,c),A++)}const E=y?function(e){const n=e.slice(),t=[0];let o,r,i,s,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(r=t[t.length-1],e[r]<l){n[o]=r,t.push(o);continue}for(i=0,s=t.length-1;i<s;)a=i+s>>1,e[t[a]]<l?i=a+1:s=a;l<e[t[i]]&&(i>0&&(n[o]=t[i-1]),t[i]=o)}}i=t.length,s=t[i-1];for(;i-- >0;)t[i]=s,s=n[s];return t}(O):o.a;for(b=E.length-1,u=_-1;u>=0;u--){const e=m+u,o=n[e],f=e+1<d?n[e+1].el:r;0===O[u]?v(null,o,t,f,i,s,a,l,c):y&&(b<0||u!==E[b]?L(o,t,f,2):b--)}}},L=(e,n,t,o,i=null)=>{const{el:s,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)return void L(e.component.subTree,n,t,o);if(128&u)return void e.suspense.move(n,t,o);if(64&u)return void a.move(e,n,t,K);if(a===Jo){r(s,n,t);for(let e=0;e<c.length;e++)L(c[e],n,t,o);return void r(e.anchor,n,t)}if(a===nr)return void(({el:e,anchor:n},t,o)=>{let i;for(;e&&e!==n;)i=p(e),r(e,t,o),e=i;r(n,t,o)})(e,n,t);if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(s),r(s,n,t),Uo(()=>l.enter(s),i);else{const{leave:e,delayLeave:o,afterLeave:i}=l,a=()=>r(s,n,t),c=()=>{e(s,()=>{a(),i&&i()})};o?o(s,a,c):c()}else r(s,n,t)},z=(e,n,t,o=!1,r=!1)=>{const{type:i,props:s,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:f}=e;if(null!=a&&Mo(a,null,t,e,!0),256&u)return void n.ctx.deactivate(e);const p=1&u&&f,h=!yt(e);let m;if(h&&(m=s&&s.onVnodeBeforeUnmount)&&Sr(m,n,e),6&u)W(e.component,t,o);else{if(128&u)return void e.suspense.unmount(t,o);p&&$t(e,null,n,"beforeUnmount"),64&u?e.type.remove(e,n,t,r,K,o):c&&(i!==Jo||d>0&&64&d)?$(c,n,t,!1,!0):(i===Jo&&384&d||!r&&16&u)&&$(l,n,t),o&&q(e)}(h&&(m=s&&s.onVnodeUnmounted)||p)&&Uo(()=>{m&&Sr(m,n,e),p&&$t(e,null,n,"unmounted")},t)},q=e=>{const{type:n,el:t,anchor:o,transition:r}=e;if(n===Jo)return void H(t,o);if(n===nr)return void y(e);const s=()=>{i(t),r&&!r.persisted&&r.afterLeave&&r.afterLeave()};if(1&e.shapeFlag&&r&&!r.persisted){const{leave:n,delayLeave:o}=r,i=()=>n(t,s);o?o(e.el,s,i):i()}else s()},H=(e,n)=>{let t;for(;e!==n;)t=p(e),i(e),e=t;i(n)},W=(e,n,t)=>{const{bum:r,scope:i,update:s,subTree:a,um:l}=e;var c;r&&Object(o.n)(r),i.stop(),s&&(s.active=!1,z(a,e,n,t)),l&&Uo(l,n),Uo(()=>{e.isUnmounted=!0},n),n&&n.pendingBranch&&!n.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===n.pendingId&&(n.deps--,0===n.deps&&n.resolve()),__VUE_PROD_DEVTOOLS__&&(c=e,Cn&&"function"==typeof Cn.cleanupBuffer&&!Cn.cleanupBuffer(c)&&kn(c))},$=(e,n,t,o=!1,r=!1,i=0)=>{for(let s=i;s<e.length;s++)z(e[s],n,t,o,r)},Y=e=>6&e.shapeFlag?Y(e.component.subTree):128&e.shapeFlag?e.suspense.next():p(e.anchor||e.el),X=(e,n,t)=>{null==e?n._vnode&&z(n._vnode,null,null,!0):v(n._vnode||null,e,n,null,null,null,t),gn(),bn(),n._vnode=e},K={p:v,um:z,m:L,r:q,mt:P,mc:w,pc:F,pbc:S,n:Y,o:e};let G,Q;return n&&([G,Q]=n(K)),{render:X,hydrate:G,createApp:Po(X,G)}}function Ho({effect:e,update:n},t){e.allowRecurse=n.allowRecurse=t}function Wo(e,n,t=!1){const r=e.children,i=n.children;if(Object(o.o)(r)&&Object(o.o)(i))for(let e=0;e<r.length;e++){const n=r[e];let o=i[e];1&o.shapeFlag&&!o.dynamicChildren&&((o.patchFlag<=0||32===o.patchFlag)&&(o=i[e]=wr(i[e]),o.el=n.el),t||Wo(n,o)),o.type===Zo&&(o.el=n.el)}}const $o=e=>e&&(e.disabled||""===e.disabled),Yo=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Xo=(e,n)=>{const t=e&&e.to;if(Object(o.F)(t)){if(n){const e=n(t);return e}return null}return t};function Ko(e,n,t,{o:{insert:o},m:r},i=2){0===i&&o(e.targetAnchor,n,t);const{el:s,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===i;if(d&&o(s,n,t),(!d||$o(u))&&16&l)for(let e=0;e<c.length;e++)r(c[e],n,t,2);d&&o(a,n,t)}const Go={__isTeleport:!0,process(e,n,t,o,r,i,s,a,l,c){const{mc:u,pc:d,pbc:f,o:{insert:p,querySelector:h,createText:m,createComment:v}}=c,g=$o(n.props);let{shapeFlag:b,children:A,dynamicChildren:_}=n;if(null==e){const e=n.el=m(""),c=n.anchor=m("");p(e,t,o),p(c,t,o);const d=n.target=Xo(n.props,h),f=n.targetAnchor=m("");d&&(p(f,d),s=s||Yo(d));const v=(e,n)=>{16&b&&u(A,e,n,r,i,s,a,l)};g?v(t,c):d&&v(d,f)}else{n.el=e.el;const o=n.anchor=e.anchor,u=n.target=e.target,p=n.targetAnchor=e.targetAnchor,m=$o(e.props),v=m?t:u,b=m?o:p;if(s=s||Yo(u),_?(f(e.dynamicChildren,_,v,r,i,s,a),Wo(e,n,!0)):l||d(e,n,v,b,r,i,s,a,!1),g)m||Ko(n,t,o,c,1);else if((n.props&&n.props.to)!==(e.props&&e.props.to)){const e=n.target=Xo(n.props,h);e&&Ko(n,e,null,c,0)}else m&&Ko(n,u,p,c,1)}Qo(n)},remove(e,n,t,o,{um:r,o:{remove:i}},s){const{shapeFlag:a,children:l,anchor:c,targetAnchor:u,target:d,props:f}=e;if(d&&i(u),(s||!$o(f))&&(i(c),16&a))for(let e=0;e<l.length;e++){const o=l[e];r(o,n,t,!0,!!o.dynamicChildren)}},move:Ko,hydrate:function(e,n,t,o,r,i,{o:{nextSibling:s,parentNode:a,querySelector:l}},c){const u=n.target=Xo(n.props,l);if(u){const l=u._lpa||u.firstChild;if(16&n.shapeFlag)if($o(n.props))n.anchor=c(s(e),n,a(e),t,o,r,i),n.targetAnchor=l;else{n.anchor=s(e);let a=l;for(;a;)if(a=s(a),a&&8===a.nodeType&&"teleport anchor"===a.data){n.targetAnchor=a,u._lpa=n.targetAnchor&&s(n.targetAnchor);break}c(l,n,u,t,o,r,i)}Qo(n)}return n.anchor&&s(n.anchor)}};function Qo(e){const n=e.ctx;if(n&&n.ut){let t=e.children[0].el;for(;t!==e.targetAnchor;)1===t.nodeType&&t.setAttribute("data-v-owner",n.uid),t=t.nextSibling;n.ut()}}const Jo=Symbol(void 0),Zo=Symbol(void 0),er=Symbol(void 0),nr=Symbol(void 0),tr=[];let or=null;function rr(e=!1){tr.push(or=e?null:[])}function ir(){tr.pop(),or=tr[tr.length-1]||null}let sr,ar=1;function lr(e){ar+=e}function cr(e){return e.dynamicChildren=ar>0?or||o.a:null,ir(),ar>0&&or&&or.push(e),e}function ur(e,n,t,o,r,i){return cr(br(e,n,t,o,r,i,!0))}function dr(e,n,t,o,r){return cr(Ar(e,n,t,o,r,!0))}function fr(e){return!!e&&!0===e.__v_isVNode}function pr(e,n){return e.type===n.type&&e.key===n.key}function hr(e){sr=e}const mr="__vInternal",vr=({key:e})=>null!=e?e:null,gr=({ref:e,ref_key:n,ref_for:t})=>null!=e?Object(o.F)(e)||Ie(e)||Object(o.q)(e)?{i:Pn,r:e,k:n,f:!!t}:e:null;function br(e,n=null,t=null,r=0,i=null,s=(e===Jo?0:1),a=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:n,key:n&&vr(n),ref:n&&gr(n),scopeId:Mn,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:r,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:Pn};return l?(Br(c,t),128&s&&e.normalize(c)):t&&(c.shapeFlag|=Object(o.F)(t)?8:16),ar>0&&!a&&or&&(c.patchFlag>0||6&s)&&32!==c.patchFlag&&or.push(c),c}const Ar=_r;function _r(e,n=null,t=null,r=0,i=null,s=!1){if(e&&e!==Xt||(e=er),fr(e)){const o=Cr(e,n,!0);return t&&Br(o,t),ar>0&&!s&&or&&(6&o.shapeFlag?or[or.indexOf(e)]=o:or.push(o)),o.patchFlag|=-2,o}if(Gr(e)&&(e=e.__vccOpts),n){n=yr(n);let{class:e,style:t}=n;e&&!Object(o.F)(e)&&(n.class=Object(o.L)(e)),Object(o.w)(t)&&(ke(t)&&!Object(o.o)(t)&&(t=Object(o.h)({},t)),n.style=Object(o.N)(t))}return br(e,n,t,r,i,Object(o.F)(e)?1:Yn(e)?128:(e=>e.__isTeleport)(e)?64:Object(o.w)(e)?4:Object(o.q)(e)?2:0,s,!0)}function yr(e){return e?ke(e)||mr in e?Object(o.h)({},e):e:null}function Cr(e,n,t=!1){const{props:r,ref:i,patchFlag:s,children:a}=e,l=n?kr(r||{},n):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&vr(l),ref:n&&n.ref?t&&i?Object(o.o)(i)?i.concat(gr(n)):[i,gr(n)]:gr(n):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:n&&e.type!==Jo?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Cr(e.ssContent),ssFallback:e.ssFallback&&Cr(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function Or(e=" ",n=0){return Ar(Zo,null,e,n)}function Er(e,n){const t=Ar(nr,null,e);return t.staticCount=n,t}function xr(e="",n=!1){return n?(rr(),dr(er,null,e)):Ar(er,null,e)}function jr(e){return null==e||"boolean"==typeof e?Ar(er):Object(o.o)(e)?Ar(Jo,null,e.slice()):"object"==typeof e?wr(e):Ar(Zo,null,String(e))}function wr(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:Cr(e)}function Br(e,n){let t=0;const{shapeFlag:r}=e;if(null==n)n=null;else if(Object(o.o)(n))t=16;else if("object"==typeof n){if(65&r){const t=n.default;return void(t&&(t._c&&(t._d=!1),Br(e,t()),t._c&&(t._d=!0)))}{t=32;const o=n._;o||mr in n?3===o&&Pn&&(1===Pn.slots._?n._=1:(n._=2,e.patchFlag|=1024)):n._ctx=Pn}}else Object(o.q)(n)?(n={default:n,_ctx:Pn},t=32):(n=String(n),64&r?(t=16,n=[Or(n)]):t=8);e.children=n,e.shapeFlag|=t}function kr(...e){const n={};for(let t=0;t<e.length;t++){const r=e[t];for(const e in r)if("class"===e)n.class!==r.class&&(n.class=Object(o.L)([n.class,r.class]));else if("style"===e)n.style=Object(o.N)([n.style,r.style]);else if(Object(o.x)(e)){const t=n[e],i=r[e];!i||t===i||Object(o.o)(t)&&t.includes(i)||(n[e]=t?[].concat(t,i):i)}else""!==e&&(n[e]=r[e])}return n}function Sr(e,n,t,o=null){nn(e,n,7,[t,o])}const Vr=To();let Tr=0;function Nr(e,n,t){const r=e.type,s=(n?n.appContext:e.appContext)||Vr,a={uid:Tr++,vnode:e,type:r,parent:n,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new i(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:n?n.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Co(r,s),emitsOptions:Tn(r,s),emit:null,emitted:null,propsDefaults:o.b,inheritAttrs:r.inheritAttrs,ctx:o.b,data:o.b,props:o.b,attrs:o.b,slots:o.b,refs:o.b,setupState:o.b,setupContext:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx={_:a},a.root=n?n.root:a,a.emit=Vn.bind(null,a),e.ce&&e.ce(a),a}let Pr=null;const Mr=()=>Pr||Pn,Ir=e=>{Pr=e,e.scope.on()},Rr=()=>{Pr&&Pr.scope.off(),Pr=null};function Fr(e){return 4&e.vnode.shapeFlag}let Dr,Ur,Lr=!1;function zr(e,n=!1){Lr=n;const{props:t,children:r}=e.vnode,i=Fr(e);!function(e,n,t,r=!1){const i={},s={};Object(o.g)(s,mr,1),e.propsDefaults=Object.create(null),_o(e,n,i,s);for(const n in e.propsOptions[0])n in i||(i[n]=void 0);t?e.props=r?i:Ce(i):e.type.props?e.props=i:e.props=s,e.attrs=s}(e,t,i,n),((e,n)=>{if(32&e.vnode.shapeFlag){const t=n._;t?(e.slots=Se(n),Object(o.g)(n,"_",t)):So(n,e.slots={})}else e.slots={},n&&Vo(e,n);Object(o.g)(e.slots,mr,1)})(e,r);const s=i?function(e,n){const t=e.type;0;e.accessCache=Object.create(null),e.proxy=Ve(new Proxy(e.ctx,so)),!1;const{setup:r}=t;if(r){const t=e.setupContext=r.length>1?Yr(e):null;Ir(e),x();const i=en(r,e,0,[e.props,t]);if(j(),Rr(),Object(o.z)(i)){if(i.then(Rr,Rr),n)return i.then(t=>{qr(e,t,n)}).catch(n=>{tn(n,e,0)});e.asyncDep=i}else qr(e,i,n)}else $r(e,n)}(e,n):void 0;return Lr=!1,s}function qr(e,n,t){Object(o.q)(n)?e.type.__ssrInlineRender?e.ssrRender=n:e.render=n:Object(o.w)(n)&&(__VUE_PROD_DEVTOOLS__&&(e.devtoolsRawSetupState=n),e.setupState=He(n)),$r(e,t)}function Hr(e){Dr=e,Ur=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,ao))}}const Wr=()=>!Dr;function $r(e,n,t){const r=e.type;if(!e.render){if(!n&&Dr&&!r.render){const n=r.template||po(e).template;if(n){0;const{isCustomElement:t,compilerOptions:i}=e.appContext.config,{delimiters:s,compilerOptions:a}=r,l=Object(o.h)(Object(o.h)({isCustomElement:t,delimiters:s},i),a);r.render=Dr(n,l)}}e.render=r.render||o.d,Ur&&Ur(e)}__VUE_OPTIONS_API__&&(Ir(e),x(),co(e),j(),Rr())}function Yr(e){const n=n=>{e.exposed=n||{}};let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(n,t)=>(w(e,0,"$attrs"),n[t])})}(e))},slots:e.slots,emit:e.emit,expose:n}}function Xr(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(He(Ve(e.exposed)),{get:(n,t)=>t in n?n[t]:t in ro?ro[t](e):void 0,has:(e,n)=>n in e||n in ro}))}function Kr(e,n=!0){return Object(o.q)(e)?e.displayName||e.name:e.name||n&&e.__name}function Gr(e){return Object(o.q)(e)&&"__vccOpts"in e}const Qr=(e,n)=>function(e,n,t=!1){let r,i;const s=Object(o.q)(e);return s?(r=e,i=o.d):(r=e.get,i=e.set),new Qe(r,i,s||!i,t)}(e,0,Lr);function Jr(){return null}function Zr(){return null}function ei(e){0}function ni(e,n){return null}function ti(){return ri().slots}function oi(){return ri().attrs}function ri(){const e=Mr();return e.setupContext||(e.setupContext=Yr(e))}function ii(e,n){const t=Object(o.o)(e)?e.reduce((e,n)=>(e[n]={},e),{}):e;for(const e in n){const r=t[e];r?Object(o.o)(r)||Object(o.q)(r)?t[e]={type:r,default:n[e]}:r.default=n[e]:null===r&&(t[e]={default:n[e]})}return t}function si(e,n){const t={};for(const o in e)n.includes(o)||Object.defineProperty(t,o,{enumerable:!0,get:()=>e[o]});return t}function ai(e){const n=Mr();let t=e();return Rr(),Object(o.z)(t)&&(t=t.catch(e=>{throw Ir(n),e})),[t,()=>Ir(n)]}function li(e,n,t){const r=arguments.length;return 2===r?Object(o.w)(n)&&!Object(o.o)(n)?fr(n)?Ar(e,null,[n]):Ar(e,n):Ar(e,null,n):(r>3?t=Array.prototype.slice.call(arguments,2):3===r&&fr(t)&&(t=[t]),Ar(e,n,t))}const ci=Symbol(""),ui=()=>{{const e=nt(ci);return e}};function di(){return void 0}function fi(e,n,t,o){const r=t[o];if(r&&pi(r,e))return r;const i=n();return i.memo=e.slice(),t[o]=i}function pi(e,n){const t=e.memo;if(t.length!=n.length)return!1;for(let e=0;e<t.length;e++)if(Object(o.j)(t[e],n[e]))return!1;return ar>0&&or&&or.push(e),!0}const hi="3.2.47",mi={createComponentInstance:Nr,setupComponent:zr,renderComponentRoot:Ln,setCurrentRenderingInstance:In,isVNode:fr,normalizeVNode:jr},vi=null,gi=null,bi="undefined"!=typeof document?document:null,Ai=bi&&bi.createElement("template"),_i={insert:(e,n,t)=>{n.insertBefore(e,t||null)},remove:e=>{const n=e.parentNode;n&&n.removeChild(e)},createElement:(e,n,t,o)=>{const r=n?bi.createElementNS("http://www.w3.org/2000/svg",e):bi.createElement(e,t?{is:t}:void 0);return"select"===e&&o&&null!=o.multiple&&r.setAttribute("multiple",o.multiple),r},createText:e=>bi.createTextNode(e),createComment:e=>bi.createComment(e),setText:(e,n)=>{e.nodeValue=n},setElementText:(e,n)=>{e.textContent=n},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>bi.querySelector(e),setScopeId(e,n){e.setAttribute(n,"")},insertStaticContent(e,n,t,o,r,i){const s=t?t.previousSibling:n.lastChild;if(r&&(r===i||r.nextSibling))for(;n.insertBefore(r.cloneNode(!0),t),r!==i&&(r=r.nextSibling););else{Ai.innerHTML=o?`<svg>${e}</svg>`:e;const r=Ai.content;if(o){const e=r.firstChild;for(;e.firstChild;)r.appendChild(e.firstChild);r.removeChild(e)}n.insertBefore(r,t)}return[s?s.nextSibling:n.firstChild,t?t.previousSibling:n.lastChild]}};const yi=/\s*!important$/;function Ci(e,n,t){if(Object(o.o)(t))t.forEach(t=>Ci(e,n,t));else if(null==t&&(t=""),n.startsWith("--"))e.setProperty(n,t);else{const r=function(e,n){const t=Ei[n];if(t)return t;let r=Object(o.e)(n);if("filter"!==r&&r in e)return Ei[n]=r;r=Object(o.f)(r);for(let t=0;t<Oi.length;t++){const o=Oi[t]+r;if(o in e)return Ei[n]=o}return n}(e,n);yi.test(t)?e.setProperty(Object(o.l)(r),t.replace(yi,""),"important"):e[r]=t}}const Oi=["Webkit","Moz","ms"],Ei={};const xi="http://www.w3.org/1999/xlink";function ji(e,n,t,o){e.addEventListener(n,t,o)}function wi(e,n,t,r,i=null){const s=e._vei||(e._vei={}),a=s[n];if(r&&a)a.value=r;else{const[t,l]=function(e){let n;if(Bi.test(e)){let t;for(n={};t=e.match(Bi);)e=e.slice(0,e.length-t[0].length),n[t[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):Object(o.l)(e.slice(2)),n]}(n);if(r){ji(e,t,s[n]=function(e,n){const t=e=>{if(e._vts){if(e._vts<=t.attached)return}else e._vts=Date.now();nn(function(e,n){if(Object(o.o)(n)){const t=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{t.call(e),e._stopped=!0},n.map(e=>n=>!n._stopped&&e&&e(n))}return n}(e,t.value),n,5,[e])};return t.value=e,t.attached=(()=>ki||(Si.then(()=>ki=0),ki=Date.now()))(),t}(r,i),l)}else a&&(!function(e,n,t,o){e.removeEventListener(n,t,o)}(e,t,a,l),s[n]=void 0)}}const Bi=/(?:Once|Passive|Capture)$/;let ki=0;const Si=Promise.resolve();const Vi=/^on[a-z]/;function Ti(e,n){const t=_t(e);class o extends Mi{constructor(e){super(t,e,n)}}return o.def=t,o}const Ni=e=>Ti(e,Ms),Pi="undefined"!=typeof HTMLElement?HTMLElement:class{};class Mi extends Pi{constructor(e,n={},t){super(),this._def=e,this._props=n,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&t?t(this._createVNode(),this.shadowRoot):(this.attachShadow({mode:"open"}),this._def.__asyncLoader||this._resolveProps(this._def))}connectedCallback(){this._connected=!0,this._instance||(this._resolved?this._update():this._resolveDef())}disconnectedCallback(){this._connected=!1,pn(()=>{this._connected||(Ps(null,this.shadowRoot),this._instance=null)})}_resolveDef(){this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver(e=>{for(const n of e)this._setAttr(n.attributeName)}).observe(this,{attributes:!0});const e=(e,n=!1)=>{const{props:t,styles:r}=e;let i;if(t&&!Object(o.o)(t))for(const e in t){const n=t[e];(n===Number||n&&n.type===Number)&&(e in this._props&&(this._props[e]=Object(o.R)(this._props[e])),(i||(i=Object.create(null)))[Object(o.e)(e)]=!0)}this._numberProps=i,n&&this._resolveProps(e),this._applyStyles(r),this._update()},n=this._def.__asyncLoader;n?n().then(n=>e(n,!0)):e(this._def)}_resolveProps(e){const{props:n}=e,t=Object(o.o)(n)?n:Object.keys(n||{});for(const e of Object.keys(this))"_"!==e[0]&&t.includes(e)&&this._setProp(e,this[e],!0,!1);for(const e of t.map(o.e))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(n){this._setProp(e,n)}})}_setAttr(e){let n=this.getAttribute(e);const t=Object(o.e)(e);this._numberProps&&this._numberProps[t]&&(n=Object(o.R)(n)),this._setProp(t,n,!1)}_getProp(e){return this._props[e]}_setProp(e,n,t=!0,r=!0){n!==this._props[e]&&(this._props[e]=n,r&&this._instance&&this._update(),t&&(!0===n?this.setAttribute(Object(o.l)(e),""):"string"==typeof n||"number"==typeof n?this.setAttribute(Object(o.l)(e),n+""):n||this.removeAttribute(Object(o.l)(e))))}_update(){Ps(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Ar(this._def,Object(o.h)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0;const n=(e,n)=>{this.dispatchEvent(new CustomEvent(e,{detail:n}))};e.emit=(e,...t)=>{n(e,t),Object(o.l)(e)!==e&&n(Object(o.l)(e),t)};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof Mi){e.parent=t._instance,e.provides=t._instance.provides;break}}),e}_applyStyles(e){e&&e.forEach(e=>{const n=document.createElement("style");n.textContent=e,this.shadowRoot.appendChild(n)})}}function Ii(e="$style"){{const n=Mr();if(!n)return o.b;const t=n.type.__cssModules;if(!t)return o.b;const r=t[e];return r||o.b}}function Ri(e){const n=Mr();if(!n)return;const t=n.ut=(t=e(n.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${n.uid}"]`)).forEach(e=>Fi(e,t))},o=()=>{const o=e(n.proxy);!function e(n,t){if(128&n.shapeFlag){const o=n.suspense;n=o.activeBranch,o.pendingBranch&&!o.isHydrating&&o.effects.push(()=>{e(o.activeBranch,t)})}for(;n.component;)n=n.component.subTree;if(1&n.shapeFlag&&n.el)Fi(n.el,t);else if(n.type===Jo)n.children.forEach(n=>e(n,t));else if(n.type===nr){let{el:e,anchor:o}=n;for(;e&&(Fi(e,t),e!==o);)e=e.nextSibling}}(n.subTree,o),t(o)};ot(o),It(()=>{const e=new MutationObserver(o);e.observe(n.subTree.el.parentNode,{childList:!0}),Ut(()=>e.disconnect())})}function Fi(e,n){if(1===e.nodeType){const t=e.style;for(const e in n)t.setProperty("--"+e,n[e])}}const Di=(e,{slots:n})=>li(pt,Hi(e),n);Di.displayName="Transition";const Ui={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Li=Di.props=Object(o.h)({},pt.props,Ui),zi=(e,n=[])=>{Object(o.o)(e)?e.forEach(e=>e(...n)):e&&e(...n)},qi=e=>!!e&&(Object(o.o)(e)?e.some(e=>e.length>1):e.length>1);function Hi(e){const n={};for(const t in e)t in Ui||(n[t]=e[t]);if(!1===e.css)return n;const{name:t="v",type:r,duration:i,enterFromClass:s=t+"-enter-from",enterActiveClass:a=t+"-enter-active",enterToClass:l=t+"-enter-to",appearFromClass:c=s,appearActiveClass:u=a,appearToClass:d=l,leaveFromClass:f=t+"-leave-from",leaveActiveClass:p=t+"-leave-active",leaveToClass:h=t+"-leave-to"}=e,m=function(e){if(null==e)return null;if(Object(o.w)(e))return[Wi(e.enter),Wi(e.leave)];{const n=Wi(e);return[n,n]}}(i),v=m&&m[0],g=m&&m[1],{onBeforeEnter:b,onEnter:A,onEnterCancelled:_,onLeave:y,onLeaveCancelled:C,onBeforeAppear:O=b,onAppear:E=A,onAppearCancelled:x=_}=n,j=(e,n,t)=>{Yi(e,n?d:l),Yi(e,n?u:a),t&&t()},w=(e,n)=>{e._isLeaving=!1,Yi(e,f),Yi(e,h),Yi(e,p),n&&n()},B=e=>(n,t)=>{const o=e?E:A,i=()=>j(n,e,t);zi(o,[n,i]),Xi(()=>{Yi(n,e?c:s),$i(n,e?d:l),qi(o)||Gi(n,r,v,i)})};return Object(o.h)(n,{onBeforeEnter(e){zi(b,[e]),$i(e,s),$i(e,a)},onBeforeAppear(e){zi(O,[e]),$i(e,c),$i(e,u)},onEnter:B(!1),onAppear:B(!0),onLeave(e,n){e._isLeaving=!0;const t=()=>w(e,n);$i(e,f),es(),$i(e,p),Xi(()=>{e._isLeaving&&(Yi(e,f),$i(e,h),qi(y)||Gi(e,r,g,t))}),zi(y,[e,t])},onEnterCancelled(e){j(e,!1),zi(_,[e])},onAppearCancelled(e){j(e,!0),zi(x,[e])},onLeaveCancelled(e){w(e),zi(C,[e])}})}function Wi(e){return Object(o.R)(e)}function $i(e,n){n.split(/\s+/).forEach(n=>n&&e.classList.add(n)),(e._vtc||(e._vtc=new Set)).add(n)}function Yi(e,n){n.split(/\s+/).forEach(n=>n&&e.classList.remove(n));const{_vtc:t}=e;t&&(t.delete(n),t.size||(e._vtc=void 0))}function Xi(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let Ki=0;function Gi(e,n,t,o){const r=e._endId=++Ki,i=()=>{r===e._endId&&o()};if(t)return setTimeout(i,t);const{type:s,timeout:a,propCount:l}=Qi(e,n);if(!s)return o();const c=s+"end";let u=0;const d=()=>{e.removeEventListener(c,f),i()},f=n=>{n.target===e&&++u>=l&&d()};setTimeout(()=>{u<l&&d()},a+1),e.addEventListener(c,f)}function Qi(e,n){const t=window.getComputedStyle(e),o=e=>(t[e]||"").split(", "),r=o("transitionDelay"),i=o("transitionDuration"),s=Ji(r,i),a=o("animationDelay"),l=o("animationDuration"),c=Ji(a,l);let u=null,d=0,f=0;"transition"===n?s>0&&(u="transition",d=s,f=i.length):"animation"===n?c>0&&(u="animation",d=c,f=l.length):(d=Math.max(s,c),u=d>0?s>c?"transition":"animation":null,f=u?"transition"===u?i.length:l.length:0);return{type:u,timeout:d,propCount:f,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(o("transitionProperty").toString())}}function Ji(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max(...n.map((n,t)=>Zi(n)+Zi(e[t])))}function Zi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function es(){return document.body.offsetHeight}const ns=new WeakMap,ts=new WeakMap,os={name:"TransitionGroup",props:Object(o.h)({},Li,{tag:String,moveClass:String}),setup(e,{slots:n}){const t=Mr(),o=dt();let r,i;return Ft(()=>{if(!r.length)return;const n=e.moveClass||(e.name||"v")+"-move";if(!function(e,n,t){const o=e.cloneNode();e._vtc&&e._vtc.forEach(e=>{e.split(/\s+/).forEach(e=>e&&o.classList.remove(e))});t.split(/\s+/).forEach(e=>e&&o.classList.add(e)),o.style.display="none";const r=1===n.nodeType?n:n.parentNode;r.appendChild(o);const{hasTransform:i}=Qi(o);return r.removeChild(o),i}(r[0].el,t.vnode.el,n))return;r.forEach(is),r.forEach(ss);const o=r.filter(as);es(),o.forEach(e=>{const t=e.el,o=t.style;$i(t,n),o.transform=o.webkitTransform=o.transitionDuration="";const r=t._moveCb=e=>{e&&e.target!==t||e&&!/transform$/.test(e.propertyName)||(t.removeEventListener("transitionend",r),t._moveCb=null,Yi(t,n))};t.addEventListener("transitionend",r)})}),()=>{const s=Se(e),a=Hi(s);let l=s.tag||Jo;r=i,i=n.default?At(n.default()):[];for(let e=0;e<i.length;e++){const n=i[e];null!=n.key&&bt(n,mt(n,a,o,t))}if(r)for(let e=0;e<r.length;e++){const n=r[e];bt(n,mt(n,a,o,t)),ns.set(n,n.el.getBoundingClientRect())}return Ar(l,null,i)}}},rs=os;function is(e){const n=e.el;n._moveCb&&n._moveCb(),n._enterCb&&n._enterCb()}function ss(e){ts.set(e,e.el.getBoundingClientRect())}function as(e){const n=ns.get(e),t=ts.get(e),o=n.left-t.left,r=n.top-t.top;if(o||r){const n=e.el.style;return n.transform=n.webkitTransform=`translate(${o}px,${r}px)`,n.transitionDuration="0s",e}}const ls=e=>{const n=e.props["onUpdate:modelValue"]||!1;return Object(o.o)(n)?e=>Object(o.n)(n,e):n};function cs(e){e.target.composing=!0}function us(e){const n=e.target;n.composing&&(n.composing=!1,n.dispatchEvent(new Event("input")))}const ds={created(e,{modifiers:{lazy:n,trim:t,number:r}},i){e._assign=ls(i);const s=r||i.props&&"number"===i.props.type;ji(e,n?"change":"input",n=>{if(n.target.composing)return;let r=e.value;t&&(r=r.trim()),s&&(r=Object(o.J)(r)),e._assign(r)}),t&&ji(e,"change",()=>{e.value=e.value.trim()}),n||(ji(e,"compositionstart",cs),ji(e,"compositionend",us),ji(e,"change",us))},mounted(e,{value:n}){e.value=null==n?"":n},beforeUpdate(e,{value:n,modifiers:{lazy:t,trim:r,number:i}},s){if(e._assign=ls(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(t)return;if(r&&e.value.trim()===n)return;if((i||"number"===e.type)&&Object(o.J)(e.value)===n)return}const a=null==n?"":n;e.value!==a&&(e.value=a)}},fs={deep:!0,created(e,n,t){e._assign=ls(t),ji(e,"change",()=>{const n=e._modelValue,t=gs(e),r=e.checked,i=e._assign;if(Object(o.o)(n)){const e=Object(o.I)(n,t),s=-1!==e;if(r&&!s)i(n.concat(t));else if(!r&&s){const t=[...n];t.splice(e,1),i(t)}}else if(Object(o.D)(n)){const e=new Set(n);r?e.add(t):e.delete(t),i(e)}else i(bs(e,r))})},mounted:ps,beforeUpdate(e,n,t){e._assign=ls(t),ps(e,n,t)}};function ps(e,{value:n,oldValue:t},r){e._modelValue=n,Object(o.o)(n)?e.checked=Object(o.I)(n,r.props.value)>-1:Object(o.D)(n)?e.checked=n.has(r.props.value):n!==t&&(e.checked=Object(o.H)(n,bs(e,!0)))}const hs={created(e,{value:n},t){e.checked=Object(o.H)(n,t.props.value),e._assign=ls(t),ji(e,"change",()=>{e._assign(gs(e))})},beforeUpdate(e,{value:n,oldValue:t},r){e._assign=ls(r),n!==t&&(e.checked=Object(o.H)(n,r.props.value))}},ms={deep:!0,created(e,{value:n,modifiers:{number:t}},r){const i=Object(o.D)(n);ji(e,"change",()=>{const n=Array.prototype.filter.call(e.options,e=>e.selected).map(e=>t?Object(o.J)(gs(e)):gs(e));e._assign(e.multiple?i?new Set(n):n:n[0])}),e._assign=ls(r)},mounted(e,{value:n}){vs(e,n)},beforeUpdate(e,n,t){e._assign=ls(t)},updated(e,{value:n}){vs(e,n)}};function vs(e,n){const t=e.multiple;if(!t||Object(o.o)(n)||Object(o.D)(n)){for(let r=0,i=e.options.length;r<i;r++){const i=e.options[r],s=gs(i);if(t)Object(o.o)(n)?i.selected=Object(o.I)(n,s)>-1:i.selected=n.has(s);else if(Object(o.H)(gs(i),n))return void(e.selectedIndex!==r&&(e.selectedIndex=r))}t||-1===e.selectedIndex||(e.selectedIndex=-1)}}function gs(e){return"_value"in e?e._value:e.value}function bs(e,n){const t=n?"_trueValue":"_falseValue";return t in e?e[t]:n}const As={created(e,n,t){ys(e,n,t,null,"created")},mounted(e,n,t){ys(e,n,t,null,"mounted")},beforeUpdate(e,n,t,o){ys(e,n,t,o,"beforeUpdate")},updated(e,n,t,o){ys(e,n,t,o,"updated")}};function _s(e,n){switch(e){case"SELECT":return ms;case"TEXTAREA":return ds;default:switch(n){case"checkbox":return fs;case"radio":return hs;default:return ds}}}function ys(e,n,t,o,r){const i=_s(e.tagName,t.props&&t.props.type)[r];i&&i(e,n,t,o)}const Cs=["ctrl","shift","alt","meta"],Os={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,n)=>Cs.some(t=>e[t+"Key"]&&!n.includes(t))},Es=(e,n)=>(t,...o)=>{for(let e=0;e<n.length;e++){const o=Os[n[e]];if(o&&o(t,n))return}return e(t,...o)},xs={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},js=(e,n)=>t=>{if(!("key"in t))return;const r=Object(o.l)(t.key);return n.some(e=>e===r||xs[e]===r)?e(t):void 0},ws={beforeMount(e,{value:n},{transition:t}){e._vod="none"===e.style.display?"":e.style.display,t&&n?t.beforeEnter(e):Bs(e,n)},mounted(e,{value:n},{transition:t}){t&&n&&t.enter(e)},updated(e,{value:n,oldValue:t},{transition:o}){!n!=!t&&(o?n?(o.beforeEnter(e),Bs(e,!0),o.enter(e)):o.leave(e,()=>{Bs(e,!1)}):Bs(e,n))},beforeUnmount(e,{value:n}){Bs(e,n)}};function Bs(e,n){e.style.display=n?e._vod:"none"}const ks=Object(o.h)({patchProp:(e,n,t,r,i=!1,s,a,l,c)=>{"class"===n?function(e,n,t){const o=e._vtc;o&&(n=(n?[n,...o]:[...o]).join(" ")),null==n?e.removeAttribute("class"):t?e.setAttribute("class",n):e.className=n}(e,r,i):"style"===n?function(e,n,t){const r=e.style,i=Object(o.F)(t);if(t&&!i){if(n&&!Object(o.F)(n))for(const e in n)null==t[e]&&Ci(r,e,"");for(const e in t)Ci(r,e,t[e])}else{const o=r.display;i?n!==t&&(r.cssText=t):n&&e.removeAttribute("style"),"_vod"in e&&(r.display=o)}}(e,t,r):Object(o.x)(n)?Object(o.v)(n)||wi(e,n,0,r,a):("."===n[0]?(n=n.slice(1),1):"^"===n[0]?(n=n.slice(1),0):function(e,n,t,r){if(r)return"innerHTML"===n||"textContent"===n||!!(n in e&&Vi.test(n)&&Object(o.q)(t));if("spellcheck"===n||"draggable"===n||"translate"===n)return!1;if("form"===n)return!1;if("list"===n&&"INPUT"===e.tagName)return!1;if("type"===n&&"TEXTAREA"===e.tagName)return!1;if(Vi.test(n)&&Object(o.F)(t))return!1;return n in e}(e,n,r,i))?function(e,n,t,r,i,s,a){if("innerHTML"===n||"textContent"===n)return r&&a(r,i,s),void(e[n]=null==t?"":t);if("value"===n&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=t;const o=null==t?"":t;return e.value===o&&"OPTION"!==e.tagName||(e.value=o),void(null==t&&e.removeAttribute(n))}let l=!1;if(""===t||null==t){const r=typeof e[n];"boolean"===r?t=Object(o.m)(t):null==t&&"string"===r?(t="",l=!0):"number"===r&&(t=0,l=!0)}try{e[n]=t}catch(e){0}l&&e.removeAttribute(n)}(e,n,r,s,a,l,c):("true-value"===n?e._trueValue=r:"false-value"===n&&(e._falseValue=r),function(e,n,t,r,i){if(r&&n.startsWith("xlink:"))null==t?e.removeAttributeNS(xi,n.slice(6,n.length)):e.setAttributeNS(xi,n,t);else{const r=Object(o.E)(n);null==t||r&&!Object(o.m)(t)?e.removeAttribute(n):e.setAttribute(n,r?"":t)}}(e,n,r,i))}},_i);let Ss,Vs=!1;function Ts(){return Ss||(Ss=Lo(ks))}function Ns(){return Ss=Vs?Ss:zo(ks),Vs=!0,Ss}const Ps=(...e)=>{Ts().render(...e)},Ms=(...e)=>{Ns().hydrate(...e)},Is=(...e)=>{const n=Ts().createApp(...e);const{mount:t}=n;return n.mount=e=>{const r=Fs(e);if(!r)return;const i=n._component;Object(o.q)(i)||i.render||i.template||(i.template=r.innerHTML),r.innerHTML="";const s=t(r,!1,r instanceof SVGElement);return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),s},n},Rs=(...e)=>{const n=Ns().createApp(...e);const{mount:t}=n;return n.mount=e=>{const n=Fs(e);if(n)return t(n,!0,n instanceof SVGElement)},n};function Fs(e){if(Object(o.F)(e)){return document.querySelector(e)}return e}let Ds=!1;const Us=()=>{Ds||(Ds=!0,ds.getSSRProps=({value:e})=>({value:e}),hs.getSSRProps=({value:e},n)=>{if(n.props&&Object(o.H)(n.props.value,e))return{checked:!0}},fs.getSSRProps=({value:e},n)=>{if(Object(o.o)(e)){if(n.props&&Object(o.I)(e,n.props.value)>-1)return{checked:!0}}else if(Object(o.D)(e)){if(n.props&&e.has(n.props.value))return{checked:!0}}else if(e)return{checked:!0}},As.getSSRProps=(e,n)=>{if("string"!=typeof n.type)return;const t=_s(n.type.toUpperCase(),n.props&&n.props.type);return t.getSSRProps?t.getSSRProps(e,n):void 0},ws.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})};const Ls=()=>{0}},function(e,n,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),s=[];function a(e){for(var n=-1,t=0;t<s.length;t++)if(s[t].identifier===e){n=t;break}return n}function l(e,n){for(var t={},o=[],r=0;r<e.length;r++){var i=e[r],l=n.base?i[0]+n.base:i[0],c=t[l]||0,u="".concat(l," ").concat(c);t[l]=c+1;var d=a(u),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(s[d].references++,s[d].updater(f)):s.push({identifier:u,updater:v(f,n),references:1}),o.push(u)}return o}function c(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var s=i(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var u,d=(u=[],function(e,n){return u[e]=n,u.filter(Boolean).join("\n")});function f(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(n,r);else{var i=document.createTextNode(r),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(i,s[n]):e.appendChild(i)}}function p(e,n,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var h=null,m=0;function v(e,n){var t,o,r;if(n.singleton){var i=m++;t=h||(h=c(n)),o=f.bind(null,t,i,!1),r=f.bind(null,t,i,!0)}else t=c(n),o=p.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var t=l(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=a(t[o]);s[r].references--}for(var i=l(e,n),c=0;c<t.length;c++){var u=a(t[c]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}t=i}}}},function(e,n,t){"use strict";function o(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null==t)return;var o,r,i=[],s=!0,a=!1;try{for(t=t.call(e);!(s=(o=t.next()).done)&&(i.push(o.value),!n||i.length!==n);s=!0);}catch(e){a=!0,r=e}finally{try{s||null==t.return||t.return()}finally{if(a)throw r}}return i}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return r(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return r(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}e.exports=function(e){var n=o(e,4),t=n[1],r=n[3];if(!r)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(s," */"),l=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(l).concat([a]).join("\n")}return[t].join("\n")}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);o&&r[l[0]]||(t&&(l[2]?l[2]="".concat(t," and ").concat(l[2]):l[2]=t),n.push(l))}},n}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=(e,n)=>{const t=e.__vccOpts||e;for(const[e,o]of n)t[e]=o;return t}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i={class:"root"},s=(0,r.createElementVNode)("h1",{style:{margin:"24px 0"}},"vuejs-blurhash demo",-1),a=(0,r.createElementVNode)("hr",null,null,-1),l={class:"mode-select"},c={for:"option-1",class:"radio-input"},u=["checked"],d={for:"option-2",class:"radio-input"},f=["checked"],p=(0,r.createElementVNode)("div",{class:"hint"},"Note: encoding is done in the browser only (no server involved)!",-1),h={key:2,class:"blurhashError"},m=(0,r.createElementVNode)("strong",null,"Invalid blurhash",-1),v=(0,r.createElementVNode)("hr",null,null,-1),g=(0,r.createElementVNode)("h2",null,[(0,r.createElementVNode)("pre",{class:"code"},(0,r.toDisplayString)("<Blurhash />"))],-1),b=(0,r.createElementVNode)("hr",null,null,-1),A=(0,r.createElementVNode)("h2",null,[(0,r.createElementVNode)("pre",{class:"code"},(0,r.toDisplayString)("<BlurhashCanvas />"))],-1),_=(0,r.createElementVNode)("footer",null,[(0,r.createElementVNode)("ul",null,[(0,r.createElementVNode)("li",null,[(0,r.createElementVNode)("a",{href:"https://github.com/woltapp/react-blurhash",target:"_blank"},"vuejs-blurhash")]),(0,r.createElementVNode)("li",null,[(0,r.createElementVNode)("a",{href:"https://github.com/woltapp/blurhash/tree/master/TypeScript",target:"_blank"},"Blurhash TypeScript")]),(0,r.createElementVNode)("li",null,[(0,r.createElementVNode)("a",{href:"https://blurha.sh",target:"_blank"},"Blurhash website")])])],-1),y=t(1),C=t(22),O=t(35),E=t(37),x=t(39);n.default=(0,o.defineComponent)({__name:"App",setup(e){const n=(0,y.ref)("hash"),t=(0,y.ref)("LEHV6nWB2yk8pyo0adR*.7kCMdnj"),o=(0,y.ref)(""),j=(0,y.computed)(()=>("hash"===n.value?t:o).value),w=(0,y.computed)(()=>(0,C.isBlurhashValid)(j.value));return(e,y)=>((0,r.openBlock)(),(0,r.createElementBlock)("div",i,[s,a,(0,r.createElementVNode)("div",l,[(0,r.createElementVNode)("label",c,[(0,r.withDirectives)((0,r.createElementVNode)("input",{type:"radio",id:"option-1",onChange:y[0]||(y[0]=e=>n.value=e.target.value),"onUpdate:modelValue":y[1]||(y[1]=e=>n.value=e),value:"hash",checked:"hash"===n.value},null,40,u),[[r.vModelRadio,n.value]]),(0,r.createTextVNode)(" Blurhash string ")]),(0,r.createElementVNode)("label",d,[(0,r.withDirectives)((0,r.createElementVNode)("input",{type:"radio",id:"option-2",onChange:y[2]||(y[2]=e=>n.value=e.target.value),"onUpdate:modelValue":y[3]||(y[3]=e=>n.value=e),value:"image",checked:"image"===n.value},null,40,f),[[r.vModelRadio,n.value]]),(0,r.createTextVNode)(" Encode image ")])]),"hash"===n.value?(0,r.withDirectives)(((0,r.openBlock)(),(0,r.createElementBlock)("input",{key:0,class:"text-input","onUpdate:modelValue":y[4]||(y[4]=e=>t.value=e)},null,512)),[[r.vModelText,t.value]]):(0,r.createCommentVNode)("v-if",!0),"image"===n.value?((0,r.openBlock)(),(0,r.createElementBlock)(r.Fragment,{key:1},[p,(0,r.createVNode)(E.default,{modelValue:o.value,"onUpdate:modelValue":y[5]||(y[5]=e=>o.value=e)},null,8,["modelValue"])],64)):(0,r.createCommentVNode)("v-if",!0),(0,r.unref)(j)&&!(0,r.unref)(w).result?((0,r.openBlock)(),(0,r.createElementBlock)("div",h,[m,(0,r.createTextVNode)(" - "+(0,r.toDisplayString)((0,r.unref)(w).errorReason),1)])):(0,r.createCommentVNode)("v-if",!0),(0,r.unref)(w).result?((0,r.openBlock)(),(0,r.createElementBlock)(r.Fragment,{key:3},[v,g,(0,r.createVNode)(x.default,{hash:(0,r.unref)(j)},null,8,["hash"]),b,A,(0,r.createVNode)(O.default,{hash:(0,r.unref)(j)},null,8,["hash"])],64)):(0,r.createCommentVNode)("v-if",!0),_]))}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i={class:"settings-container"},s=["value"],a=["value"],l={class:"blurhash-container"},c=t(1),u=t(30),d=t(23);n.default=(0,o.defineComponent)({__name:"BlurhashCanvasDemo",props:{hash:null},setup(e){const n=e,t=(0,c.ref)(256),o=(0,c.ref)(1);return(e,c)=>((0,r.openBlock)(),(0,r.createElementBlock)("div",null,[(0,r.createElementVNode)("div",i,[(0,r.createVNode)(d.default,{label:"size",value:t.value+" (px)"},{default:(0,r.withCtx)(()=>[(0,r.createElementVNode)("input",{type:"range",min:1,max:1024,step:8,value:t.value,onInput:c[0]||(c[0]=e=>t.value=parseInt(e.target.value))},null,40,s)]),_:1},8,["value"]),(0,r.createVNode)(d.default,{label:"punch",value:o.value},{default:(0,r.withCtx)(()=>[(0,r.createElementVNode)("input",{type:"range",min:0,max:20,step:1,value:o.value,onInput:c[1]||(c[1]=e=>o.value=parseInt(e.target.value))},null,40,a)]),_:1},8,["value"])]),(0,r.createElementVNode)("div",l,[(0,r.createVNode)((0,r.unref)(u.BlurhashCanvas),{hash:n.hash,height:t.value,width:t.value,punch:o.value},null,8,["hash","height","width","punch"])])]))}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i=t(1),s=t(31);n.default=(0,o.defineComponent)({__name:"Blurhash",props:{hash:null,height:{default:128},width:{default:128},punch:null,resolutionX:{default:32},resolutionY:{default:32},style:null},setup(e){const n=e,t=(0,i.ref)({position:"absolute",top:0,bottom:0,left:0,right:0,width:"100%",height:"100%"}),o=(0,i.computed)(()=>({display:"inline-block",position:"relative",height:"number"==typeof n.height?n.height+"px":n.height,width:"number"==typeof n.width?n.width+"px":n.width,...n.style}));return(0,i.onUpdated)(()=>{if(n.resolutionX<0)throw new Error("resolutionX Property must be greater than 0");if(n.resolutionY<0)throw new Error("resolutionY Property must be greater than 0")}),(n,i)=>((0,r.openBlock)(),(0,r.createElementBlock)("div",{style:(0,r.normalizeStyle)((0,r.unref)(o))},[(0,r.createVNode)(s.default,{hash:e.hash,height:e.resolutionY,width:e.resolutionX,punch:e.punch,style:(0,r.normalizeStyle)(t.value)},null,8,["hash","height","width","punch","style"])],4))}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i=["punch","height","width"],s=t(22),a=t(1);n.default=(0,o.defineComponent)({__name:"BlurhashCanvas",props:{hash:null,height:{default:128},punch:null,width:{default:128}},setup(e){const n=e,t=(0,a.ref)(),o=e=>{t.value=e,l()},l=()=>{if(t.value){const e=(0,s.decode)(n.hash,n.width,n.height,n.punch),o=t.value.getContext("2d"),r=o.createImageData(n.width,n.height);r.data.set(e),o.putImageData(r,0,0)}};return(e,t)=>((0,r.openBlock)(),(0,r.createElementBlock)("canvas",{id:"blurhash-canvas",punch:n.punch,height:n.height,width:n.width,ref:o},null,8,i))}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i={class:"root"},s={class:"label"},a={class:"value"};n.default=(0,o.defineComponent)({__name:"Setting",props:{label:null,children:null,value:null},setup:e=>(n,t)=>((0,r.openBlock)(),(0,r.createElementBlock)("div",i,[(0,r.createElementVNode)("label",s,(0,r.toDisplayString)(e.label),1),(0,r.renderSlot)(n.$slots,"default"),(0,r.createElementVNode)("div",a,(0,r.toDisplayString)(e.value),1)]))})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i=e=>((0,r.pushScopeId)("data-v-afa51fda"),e=e(),(0,r.popScopeId)(),e),s={class:"root-encoder"},a={class:"img-preview-container"},l=["src"],c={class:"img-file-name"},u={class:"settings"},d=i(()=>(0,r.createElementVNode)("h3",null,"Encoding settings",-1)),f={key:0,class:"blurhash-result-container"},p=i(()=>(0,r.createElementVNode)("h3",null,"Blurhash result",-1)),h={class:"result-blurhash"},m=t(22),v=t(1),g=t(23),b=t(38);n.default=(0,o.defineComponent)({__name:"BlurhashImageEncoder",props:{value:null},emits:["update:modelValue"],setup(e,{emit:n}){const t=(0,v.ref)(),o=(0,v.ref)(4),i=(0,v.ref)(4),A=(0,v.computed)(()=>t.value?_(t.value.imageData.data,t.value.imageData.width,t.value.imageData.height,i.value,o.value):void 0),_=(e,t,o,r,i)=>{const s=(0,m.encode)(e,t,o,r,i);return n("update:modelValue",s),s},y=async e=>{const n=URL.createObjectURL(e),o=await(async e=>new Promise((n,t)=>{const o=new Image;o.onload=()=>n(o),o.onerror=(...e)=>t(e),o.src=e}))(n),r=(i=o.width,s=o.height,a=64,i>=s&&i>a?{width:a,height:Math.round(s/i*a)}:s>i&&s>a?{width:Math.round(i/s*a),height:a}:{width:i,height:s});var i,s,a;const l=((e,n,t)=>{const o=document.createElement("canvas");o.width=n,o.height=t;const r=o.getContext("2d");return r.drawImage(e,0,0,n,t),r.getImageData(0,0,n,t)})(o,r.width,r.height);t.value={file:e,imageUrl:n,imageData:l}};return(e,n)=>((0,r.openBlock)(),(0,r.createElementBlock)("div",s,[(0,r.createVNode)(b.default,{"onUpdate:modelValue":y,showText:!t.value},{default:(0,r.withCtx)(()=>[(0,r.createElementVNode)("div",a,[t.value?((0,r.openBlock)(),(0,r.createElementBlock)(r.Fragment,{key:0},[(0,r.createElementVNode)("img",{class:"img-preview",src:t.value.imageUrl},null,8,l),(0,r.createElementVNode)("span",c,(0,r.toDisplayString)(t.value.file.name),1)],64)):(0,r.createCommentVNode)("v-if",!0)])]),_:1},8,["showText"]),(0,r.createElementVNode)("div",u,[d,(0,r.createVNode)(g.default,{label:"X components",value:i.value},{default:(0,r.withCtx)(()=>[(0,r.withDirectives)((0,r.createElementVNode)("input",{type:"range",min:"1",max:"9","onUpdate:modelValue":n[0]||(n[0]=e=>i.value=e)},null,512),[[r.vModelText,i.value]])]),_:1},8,["value"]),(0,r.createVNode)(g.default,{label:"Y components",value:o.value},{default:(0,r.withCtx)(()=>[(0,r.withDirectives)((0,r.createElementVNode)("input",{type:"range",min:"1",max:"9","onUpdate:modelValue":n[1]||(n[1]=e=>o.value=e)},null,512),[[r.vModelText,o.value]])]),_:1},8,["value"])]),(0,r.unref)(A)?((0,r.openBlock)(),(0,r.createElementBlock)("div",f,[p,(0,r.createElementVNode)("div",h,(0,r.toDisplayString)((0,r.unref)(A)),1)])):(0,r.createCommentVNode)("v-if",!0)]))}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i=["classes","for"],s=["id"],a={key:0,class:"text"},l=t(1);n.default=(0,o.defineComponent)({__name:"FileInput",props:{children:null,innerClass:null,id:{default:"file-input"},showText:{type:Boolean}},emits:["update:modelValue"],setup(e,{emit:n}){const t=(0,l.ref)();function o(){if(t.value){const e=t.value.files[0];n("update:modelValue",e)}}return(n,l)=>((0,r.openBlock)(),(0,r.createElementBlock)("label",{class:"root",classes:e.innerClass,for:e.id},[(0,r.createElementVNode)("input",{id:e.id,ref_key:"file",ref:t,onChange:o,type:"file",multiple:!1,accept:"image/*"},null,40,s),e.showText?((0,r.openBlock)(),(0,r.createElementBlock)("span",a,"Choose image")):(0,r.createCommentVNode)("v-if",!0),(0,r.renderSlot)(n.$slots,"default")],8,i))}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(1),i={class:"settings-container"},s=["value"],a=["value"],l=["value"],c={class:"blurhash-container"},u=t(1),d=t(23),f=t(30);n.default=(0,o.defineComponent)({__name:"BlurhashDemo",props:{hash:null},setup(e){const n=(0,u.ref)(256),t=(0,u.ref)(32),o=(0,u.ref)(1);return(u,p)=>((0,r.openBlock)(),(0,r.createElementBlock)("div",null,[(0,r.createElementVNode)("div",i,[(0,r.createVNode)(d.default,{label:"size",value:n.value+" (px)"},{default:(0,r.withCtx)(()=>[(0,r.createElementVNode)("input",{type:"range",min:1,max:1024,step:8,value:n.value,onInput:p[0]||(p[0]=e=>n.value=parseInt(e.target.value))},null,40,s)]),_:1},8,["value"]),(0,r.createVNode)(d.default,{label:"resolution",value:t.value+" (px)"},{default:(0,r.withCtx)(()=>[(0,r.createElementVNode)("input",{type:"range",min:4,max:128,step:1,value:t.value,onInput:p[1]||(p[1]=e=>t.value=parseInt(e.target.value))},null,40,a)]),_:1},8,["value"]),(0,r.createVNode)(d.default,{label:"punch",value:o.value},{default:(0,r.withCtx)(()=>[(0,r.createElementVNode)("input",{type:"range",min:0,max:20,step:1,value:o.value,onInput:p[2]||(p[2]=e=>o.value=parseInt(e.target.value))},null,40,l)]),_:1},8,["value"])]),(0,r.createElementVNode)("div",c,[(0,r.createVNode)((0,r.unref)(f.Blurhash),{hash:e.hash,height:n.value,width:n.value,punch:o.value,resolutionX:t.value,resolutionY:t.value},null,8,["hash","height","width","punch","resolutionX","resolutionY"])])]))}})},function(e,n,t){"use strict";var o=t(6),r=t.n(o);t.d(n,"default",(function(){return r.a}))},function(e,n,t){"use strict";t.r(n);var o=t(7),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n);var o=t(8),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n);var o=t(9),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n);var o=t(10),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n);var o=t(11),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n);var o=t(12),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n);var o=t(13),r=t.n(o);for(var i in t.d(n,"default",(function(){return r.a})),o)["default"].indexOf(i)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(i)},function(e,n,t){"use strict";t.r(n),t.d(n,"ValidationError",(function(){return c})),t.d(n,"decode",(function(){return h})),t.d(n,"encode",(function(){return v})),t.d(n,"isBlurhashValid",(function(){return d}));var o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","#","$","%","*","+",",","-",".",":",";","=","?","@","[","]","^","_","{","|","}","~"],r=e=>{let n=0;for(let t=0;t<e.length;t++){let r=e[t];n=83*n+o.indexOf(r)}return n},i=(e,n)=>{var t="";for(let r=1;r<=n;r++){let i=Math.floor(e)/Math.pow(83,n-r)%83;t+=o[Math.floor(i)]}return t},s=e=>{let n=e/255;return n<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)},a=e=>{let n=Math.max(0,Math.min(1,e));return n<=.0031308?Math.trunc(12.92*n*255+.5):Math.trunc(255*(1.055*Math.pow(n,.4166666666666667)-.055)+.5)},l=(e,n)=>(e=>e<0?-1:1)(e)*Math.pow(Math.abs(e),n),c=class extends Error{constructor(e){super(e),this.name="ValidationError",this.message=e}},u=e=>{if(!e||e.length<6)throw new c("The blurhash string must be at least 6 characters");let n=r(e[0]),t=Math.floor(n/9)+1,o=n%9+1;if(e.length!==4+2*o*t)throw new c(`blurhash length mismatch: length is ${e.length} but it should be ${4+2*o*t}`)},d=e=>{try{u(e)}catch(e){return{result:!1,errorReason:e.message}}return{result:!0}},f=e=>{let n=e>>8&255,t=255&e;return[s(e>>16),s(n),s(t)]},p=(e,n)=>{let t=Math.floor(e/361),o=Math.floor(e/19)%19,r=e%19;return[l((t-9)/9,2)*n,l((o-9)/9,2)*n,l((r-9)/9,2)*n]},h=(e,n,t,o)=>{u(e),o|=1;let i=r(e[0]),s=Math.floor(i/9)+1,l=i%9+1,c=(r(e[1])+1)/166,d=new Array(l*s);for(let n=0;n<d.length;n++)if(0===n){let t=r(e.substring(2,6));d[n]=f(t)}else{let t=r(e.substring(4+2*n,6+2*n));d[n]=p(t,c*o)}let h=4*n,m=new Uint8ClampedArray(h*t);for(let e=0;e<t;e++)for(let o=0;o<n;o++){let r=0,i=0,c=0;for(let a=0;a<s;a++)for(let s=0;s<l;s++){let u=Math.cos(Math.PI*o*s/n)*Math.cos(Math.PI*e*a/t),f=d[s+a*l];r+=f[0]*u,i+=f[1]*u,c+=f[2]*u}let u=a(r),f=a(i),p=a(c);m[4*o+0+e*h]=u,m[4*o+1+e*h]=f,m[4*o+2+e*h]=p,m[4*o+3+e*h]=255}return m},m=(e,n,t,o)=>{let r=0,i=0,a=0,l=4*n;for(let c=0;c<n;c++){let n=4*c;for(let u=0;u<t;u++){let t=n+u*l,d=o(c,u);r+=d*s(e[t]),i+=d*s(e[t+1]),a+=d*s(e[t+2])}}let c=1/(n*t);return[r*c,i*c,a*c]},v=(e,n,t,o,r)=>{if(o<1||o>9||r<1||r>9)throw new c("BlurHash must have between 1 and 9 components");if(n*t*4!==e.length)throw new c("Width and height must match the pixels array");let s=[];for(let i=0;i<r;i++)for(let r=0;r<o;r++){let o=0==r&&0==i?1:2,a=m(e,n,t,(e,s)=>o*Math.cos(Math.PI*r*e/n)*Math.cos(Math.PI*i*s/t));s.push(a)}let u,d=s[0],f=s.slice(1),p="";if(p+=i(o-1+9*(r-1),1),f.length>0){let e=Math.max(...f.map(e=>Math.max(...e))),n=Math.floor(Math.max(0,Math.min(82,Math.floor(166*e-.5))));u=(n+1)/166,p+=i(n,1)}else u=1,p+=i(0,1);return p+=i((e=>(a(e[0])<<16)+(a(e[1])<<8)+a(e[2]))(d),4),f.forEach(e=>{p+=i(((e,n)=>19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*l(e[0]/n,.5)+9.5))))*19+19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*l(e[1]/n,.5)+9.5))))+Math.floor(Math.max(0,Math.min(18,Math.floor(9*l(e[2]/n,.5)+9.5)))))(e,u),2)}),p}},function(e,n,t){"use strict";t.r(n);var o=t(18);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);t(44);var i=t(5);const s=t.n(i)()(o.default,[["__scopeId","data-v-87643736"]]);n.default=s},function(e,n,t){"use strict";var o=t(3),r=t.n(o),i=t(4),s=t.n(i)()(r.a);s.push([e.i,"\n.root[data-v-87643736] {\n  display: flex;\n}\n.label[data-v-87643736] {\n  width: 120px;\n  white-space: pre;\n  font-size: 0.9em;\n  font-family: monospace, monospace;\n}\n.value[data-v-87643736] {\n  margin-left: 8px;\n  white-space: pre;\n  font-size: 0.9em;\n  font-family: monospace, monospace;\n}\n.root + .root[data-v-87643736] {\n  margin-top: 10px;\n}\n","",{version:3,sources:["webpack://./demo/Setting.vue"],names:[],mappings:";AAgBA;EACE,aAAa;AACf;AACA;EACE,YAAY;EACZ,gBAAgB;EAChB,gBAAgB;EAChB,iCAAiC;AACnC;AACA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,iCAAiC;AACnC;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['<template>\n  <div class="root">\n    <label class="label">{{ label }}</label>\n    <slot />\n    <div class="value">{{ value }}</div>\n  </div>\n</template>\n<script setup lang="ts">\nimport { defineProps, VueElement } from \'vue\';\nconst props = defineProps<{\n  label: string;\n  children?: VueElement;\n  value: any;\n}>();\n<\/script>\n<style scoped>\n.root {\n  display: flex;\n}\n.label {\n  width: 120px;\n  white-space: pre;\n  font-size: 0.9em;\n  font-family: monospace, monospace;\n}\n.value {\n  margin-left: 8px;\n  white-space: pre;\n  font-size: 0.9em;\n  font-family: monospace, monospace;\n}\n\n.root + .root {\n  margin-top: 10px;\n}\n</style>\n'],sourceRoot:""}]),n.a=s},function(e,n,t){"use strict";var o=t(3),r=t.n(o),i=t(4),s=t.n(i)()(r.a);s.push([e.i,"\ninput[data-v-8ca12004] {\n  width: 300px;\n}\n.settings-container[data-v-8ca12004] {\n  padding: 15px;\n  display: inline-block;\n  background-color: #f5f5f5;\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n}\n.blurhash-container[data-v-8ca12004] {\n  margin-top: 18px;\n}\n","",{version:3,sources:["webpack://./demo/BlurhashCanvasDemo.vue"],names:[],mappings:";AA6CA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,qBAAqB;EACrB,yBAAyB;EACzB,yBAAyB;EACzB,kBAAkB;AACpB;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['<template>\n  <div>\n    <div class="settings-container">\n      <Setting label="size" :value="`${size} (px)`">\n        <input\n          type="range"\n          :min="1"\n          :max="1024"\n          :step="8"\n          :value="size"\n          @input="(ev: any) => size = parseInt(ev.target.value)"\n        />\n      </Setting>\n\n      <Setting label="punch" :value="punch">\n        <input\n          type="range"\n          :min="0"\n          :max="20"\n          :step="1"\n          :value="punch"\n          @input="(ev: any) => punch = parseInt(ev.target.value)"\n        />\n      </Setting>\n    </div>\n\n    <div class="blurhash-container">\n      <BlurhashCanvas :hash="props.hash" :height="size" :width="size" :punch="punch" />\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\';\nimport { BlurhashCanvas } from \'../src\';\nimport Setting from \'./Setting.vue\';\n\nconst size = ref(256);\nconst punch = ref(1);\n\nconst props = defineProps<{\n  hash: string;\n}>();\n<\/script>\n<style scoped>\ninput {\n  width: 300px;\n}\n.settings-container {\n  padding: 15px;\n  display: inline-block;\n  background-color: #f5f5f5;\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n}\n\n.blurhash-container {\n  margin-top: 18px;\n}\n</style>\n'],sourceRoot:""}]),n.a=s},function(e,n,t){"use strict";var o=t(3),r=t.n(o),i=t(4),s=t.n(i)()(r.a);s.push([e.i,"\ninput[data-v-394c18e6] {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n.root[data-v-394c18e6] {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n.text[data-v-394c18e6] {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #777;\n}\n","",{version:3,sources:["webpack://./demo/FileInput.vue"],names:[],mappings:";AA4CA;EACE,YAAY;EACZ,aAAa;EACb,UAAU;EACV,gBAAgB;EAChB,kBAAkB;EAClB,WAAW;AACb;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,OAAO;EACP,QAAQ;EACR,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;AACb",sourcesContent:['<template>\n  <label class="root" :classes="innerClass" :for="id">\n    <input\n      :id="id"\n      ref="file"\n      @change="onChangeInputFile"\n      type="file"\n      :multiple="false"\n      accept="image/*"\n    />\n    <template v-if="showText">\n      <span class="text">Choose image</span>\n    </template>\n    <slot />\n  </label>\n</template>\n<script setup lang="ts">\nimport { defineProps, VueElement, ref } from \'vue\';\nconst props = withDefaults(\n  defineProps<{\n    children?: VueElement;\n    innerClass?: string;\n    id?: string;\n    showText: boolean;\n  }>(),\n  {\n    id: \'file-input\',\n  },\n);\nconst emits = defineEmits<{\n  (e: \'update:modelValue\', file: File): void;\n}>();\n\nconst file = ref<HTMLInputElement>();\n\nfunction onChangeInputFile() {\n  if (file.value) {\n    const files = file.value.files as FileList;\n    const single = files[0] as File;\n    emits(\'update:modelValue\', single);\n  }\n}\n<\/script>\n<style scoped>\ninput {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n.root {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n.text {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #777;\n}\n</style>\n'],sourceRoot:""}]),n.a=s},function(e,n,t){"use strict";var o=t(3),r=t.n(o),i=t(4),s=t.n(i)()(r.a);s.push([e.i,"\n.root-encoder[data-v-afa51fda] {\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n}\n.settings[data-v-afa51fda] {\n  border-top: 1px solid #e4e4e4;\n  padding: 15px;\n}\n.result-blurhash[data-v-afa51fda] {\n  overflow-wrap: break-word;\n  font-size: 1.05em;\n  font-family: monospace;\n  width: 100%;\n  box-sizing: border-box;\n}\ninput[data-v-afa51fda] {\n  width: 300px;\n}\nh3[data-v-afa51fda] {\n  font-weight: 600;\n  font-size: 1em;\n  color: #777;\n  margin: 0 0 10px 0;\n}\n.blurhash-result-container[data-v-afa51fda] {\n  padding: 15px;\n  border-top: 1px solid #e4e4e4;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.img-preview-container[data-v-afa51fda] {\n  position: relative;\n  display: flex;\n  width: 100%;\n  max-width: 1024px;\n  height: 400px;\n  overflow: hidden;\n}\n.img-preview[data-v-afa51fda] {\n  width: 100%;\n  background: #f4f4f4;\n  object-fit: contain;\n  object-position: 50% 50%;\n}\n.img-file-name[data-v-afa51fda] {\n  position: absolute;\n  right: 10px;\n  bottom: 10px;\n  font-size: 0.75em;\n  color: white;\n  padding: 1px 3px;\n  border-radius: 2px;\n  background-color: rgba(30, 30, 30, 0.6);\n}\n","",{version:3,sources:["webpack://./demo/BlurhashImageEncoder.vue"],names:[],mappings:";AAgHA;EACE,yBAAyB;EACzB,kBAAkB;AACpB;AACA;EACE,6BAA6B;EAC7B,aAAa;AACf;AACA;EACE,yBAAyB;EACzB,iBAAiB;EACjB,sBAAsB;EACtB,WAAW;EACX,sBAAsB;AACxB;AACA;EACE,YAAY;AACd;AACA;EACE,gBAAgB;EAChB,cAAc;EACd,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,8BAA8B;EAC9B,+BAA+B;AACjC;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,WAAW;EACX,iBAAiB;EACjB,aAAa;EACb,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,mBAAmB;EACnB,mBAAmB;EACnB,wBAAwB;AAC1B;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,YAAY;EACZ,gBAAgB;EAChB,kBAAkB;EAClB,uCAAuC;AACzC",sourcesContent:['<template>\n  <div class="root-encoder">\n    <FileInput @update:modelValue="handleFileChange" :showText="!data">\n      <div class="img-preview-container">\n        <template v-if="data">\n          <img class="img-preview" :src="data.imageUrl" />\n          <span class="img-file-name">{{ data.file.name }}</span>\n        </template>\n      </div>\n    </FileInput>\n\n    <div class="settings">\n      <h3>Encoding settings</h3>\n\n      <Setting label="X components" :value="componentX">\n        <input type="range" min="1" max="9" v-model="componentX" />\n      </Setting>\n\n      <Setting label="Y components" :value="componentY">\n        <input type="range" min="1" max="9" v-model="componentY" />\n      </Setting>\n    </div>\n    <div class="blurhash-result-container" v-if="blurhash">\n      <h3>Blurhash result</h3>\n\n      <div class="result-blurhash">{{ blurhash }}</div>\n    </div>\n  </div>\n</template>\n<script setup lang="ts">\nimport { encode } from \'blurhash\';\nimport { computed, ref } from \'vue\';\nimport Setting from \'./Setting.vue\';\nimport FileInput from \'./FileInput.vue\';\n\nconst props = defineProps<{\n  value?: string;\n}>();\nconst emits = defineEmits<{\n  (e: \'update:modelValue\', hash: string): void;\n}>();\n\nconst data = ref<{ file: File; imageUrl: string; imageData: ImageData } | undefined>();\nconst componentY = ref(4);\nconst componentX = ref(4);\nconst blurhash = computed(() =>\n  data.value\n    ? returnEncodeValue(\n        data.value.imageData.data,\n        data.value.imageData.width,\n        data.value.imageData.height,\n        componentX.value,\n        componentY.value,\n      )\n    : undefined,\n);\nconst returnEncodeValue = (\n  data: Uint8ClampedArray,\n  width: number,\n  height: number,\n  componentX: number,\n  componentY: number,\n): string => {\n  const hash = encode(data, width, height, componentX, componentY);\n  emits(\'update:modelValue\', hash);\n  return hash;\n};\n\nconst getClampedSize = (\n  width: number,\n  height: number,\n  max: number,\n): { width: number; height: number } => {\n  if (width >= height && width > max) {\n    return { width: max, height: Math.round((height / width) * max) };\n  }\n\n  if (height > width && height > max) {\n    return { width: Math.round((width / height) * max), height: max };\n  }\n\n  return { width, height };\n};\n\nconst loadImage = async (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = (...args) => reject(args);\n    img.src = src;\n  });\n\nconst getImageData = (image: HTMLImageElement, resolutionX: number, resolutionY: number) => {\n  const canvas = document.createElement(\'canvas\');\n  canvas.width = resolutionX;\n  canvas.height = resolutionY;\n  const context = canvas.getContext(\'2d\') as CanvasRenderingContext2D;\n  context.drawImage(image, 0, 0, resolutionX, resolutionY);\n  return context.getImageData(0, 0, resolutionX, resolutionY);\n};\n\nconst handleFileChange = async (file: File) => {\n  const imageUrl = URL.createObjectURL(file);\n\n  const img = await loadImage(imageUrl);\n  const clampSize = getClampedSize(img.width, img.height, 64);\n  const imageData = getImageData(img, clampSize.width, clampSize.height);\n\n  data.value = { file, imageUrl, imageData };\n};\n<\/script>\n<style scoped>\n.root-encoder {\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n}\n.settings {\n  border-top: 1px solid #e4e4e4;\n  padding: 15px;\n}\n.result-blurhash {\n  overflow-wrap: break-word;\n  font-size: 1.05em;\n  font-family: monospace;\n  width: 100%;\n  box-sizing: border-box;\n}\ninput {\n  width: 300px;\n}\nh3 {\n  font-weight: 600;\n  font-size: 1em;\n  color: #777;\n  margin: 0 0 10px 0;\n}\n.blurhash-result-container {\n  padding: 15px;\n  border-top: 1px solid #e4e4e4;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.img-preview-container {\n  position: relative;\n  display: flex;\n  width: 100%;\n  max-width: 1024px;\n  height: 400px;\n  overflow: hidden;\n}\n.img-preview {\n  width: 100%;\n  background: #f4f4f4;\n  object-fit: contain;\n  object-position: 50% 50%;\n}\n.img-file-name {\n  position: absolute;\n  right: 10px;\n  bottom: 10px;\n  font-size: 0.75em;\n  color: white;\n  padding: 1px 3px;\n  border-radius: 2px;\n  background-color: rgba(30, 30, 30, 0.6);\n}\n</style>\n'],sourceRoot:""}]),n.a=s},function(e,n,t){"use strict";var o=t(3),r=t.n(o),i=t(4),s=t.n(i)()(r.a);s.push([e.i,"\ninput[data-v-e9afe26a] {\n  width: 300px;\n}\n.settings-container[data-v-e9afe26a] {\n  padding: 15px;\n  display: inline-block;\n  background-color: #f5f5f5;\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n}\n.blurhash-container[data-v-e9afe26a] {\n  margin-top: 18px;\n}\n","",{version:3,sources:["webpack://./demo/BlurhashDemo.vue"],names:[],mappings:";AAgEA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,qBAAqB;EACrB,yBAAyB;EACzB,yBAAyB;EACzB,kBAAkB;AACpB;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['<template>\n  <div>\n    <div class="settings-container">\n      <Setting label="size" :value="`${size} (px)`">\n        <input\n          type="range"\n          :min="1"\n          :max="1024"\n          :step="8"\n          :value="size"\n          @input="(ev: any) => size = parseInt(ev.target.value)"\n        />\n      </Setting>\n\n      <Setting label="resolution" :value="`${resolution} (px)`">\n        <input\n          type="range"\n          :min="4"\n          :max="128"\n          :step="1"\n          :value="resolution"\n          @input="(ev: any) => resolution = parseInt(ev.target.value)"\n        />\n      </Setting>\n\n      <Setting label="punch" :value="punch">\n        <input\n          type="range"\n          :min="0"\n          :max="20"\n          :step="1"\n          :value="punch"\n          @input="(ev: any) => punch = parseInt(ev.target.value)"\n        />\n      </Setting>\n    </div>\n\n    <div class="blurhash-container">\n      <Blurhash\n        :hash="hash"\n        :height="size"\n        :width="size"\n        :punch="punch"\n        :resolutionX="resolution"\n        :resolutionY="resolution"\n      />\n    </div>\n  </div>\n</template>\n<script setup lang="ts">\nimport { ref } from \'vue\';\nimport Setting from \'./Setting.vue\';\nimport { Blurhash } from \'../src\';\n\nconst size = ref(256);\nconst resolution = ref(32);\nconst punch = ref(1);\n\nconst props = defineProps<{\n  hash: string;\n}>();\n<\/script>\n\n<style scoped>\ninput {\n  width: 300px;\n}\n.settings-container {\n  padding: 15px;\n  display: inline-block;\n  background-color: #f5f5f5;\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n}\n\n.blurhash-container {\n  margin-top: 18px;\n}\n</style>\n'],sourceRoot:""}]),n.a=s},function(e,n,t){"use strict";var o=t(3),r=t.n(o),i=t(4),s=t.n(i)()(r.a);s.push([e.i,"\nh1 {\n  margin: 24px 0;\n}\nh2 {\n  font-size: 1.4em;\n}\n.root {\n  margin: 0 auto;\n  max-width: 1024px;\n  font-family: sans-serif;\n}\n.blurhashError {\n  margin-top: 10px;\n  color: #cc4260;\n  font-weight: 500;\n  font-size: 0.9em;\n}\n.code {\n  margin: 0;\n  padding: 0;\n  display: inline-block;\n  font-family: monospace, monospace;\n}\n.hint {\n  font-size: 0.8em;\n  color: #999;\n  margin: 8px 0;\n}\nhr {\n  height: 1px;\n  background-color: #e0e0e0;\n  border: none;\n  margin: 24px 0;\n}\n.mode-select {\n  margin: 15px 0;\n}\n.radio-input {\n  display: inline-flex;\n  align-items: center;\n}\n.radio-input input {\n  margin-right: 5px;\n}\n.radio-input + .radio-input {\n  margin-left: 14px;\n}\n.text-input {\n  white-space: pre;\n  font-size: 1em;\n  font-family: monospace;\n  padding: 8px;\n  border-radius: 4px;\n  border: 2px solid #d8d8d8;\n  width: 100%;\n  box-sizing: border-box;\n  outline: none;\n}\n.text-input:focus {\n  border-color: #8ab7ea;\n}\nfooter {\n  border-top: 1px solid rgb(242, 242, 242);\n  margin-top: 40px;\n  padding: 15px 10px;\n  text-align: center;\n  font-size: 0.9em;\n}\nfooter ul {\n  list-style: none;\n  white-space: nowrap;\n}\nfooter li {\n  position: relative;\n  display: inline;\n}\nfooter li + li {\n  margin-left: 24px;\n}\nfooter li + li::after {\n  position: absolute;\n  top: 0px;\n  left: -15px;\n  content: '·';\n  color: #c8c8c8;\n}\nfooter a {\n  color: #c8c8c8;\n  text-decoration: none;\n}\nfooter a:hover {\n  color: #3d50ff;\n}\nfooter a:active {\n  color: #041ae5;\n}\n","",{version:3,sources:["webpack://./demo/App.vue"],names:[],mappings:";AAwFA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,iBAAiB;EACjB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,cAAc;EACd,gBAAgB;EAChB,gBAAgB;AAClB;AACA;EACE,SAAS;EACT,UAAU;EACV,qBAAqB;EACrB,iCAAiC;AACnC;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,aAAa;AACf;AACA;EACE,WAAW;EACX,yBAAyB;EACzB,YAAY;EACZ,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,oBAAoB;EACpB,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;EAChB,cAAc;EACd,sBAAsB;EACtB,YAAY;EACZ,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,sBAAsB;EACtB,aAAa;AACf;AACA;EACE,qBAAqB;AACvB;AACA;EACE,wCAAwC;EACxC,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,WAAW;EACX,YAAY;EACZ,cAAc;AAChB;AACA;EACE,cAAc;EACd,qBAAqB;AACvB;AACA;EACE,cAAc;AAChB;AACA;EACE,cAAc;AAChB",sourcesContent:['<template>\n  <div class="root">\n    <h1 style="margin: 24px 0">vuejs-blurhash demo</h1>\n    <hr />\n\n    <div class="mode-select">\n      <label for="option-1" class="radio-input">\n        <input\n          type="radio"\n          id="option-1"\n          @change="(e: any) => (mode = e.target.value)"\n          v-model="mode"\n          value="hash"\n          :checked="mode === \'hash\'"\n        />\n        Blurhash string\n      </label>\n\n      <label for="option-2" class="radio-input">\n        <input\n          type="radio"\n          id="option-2"\n          @change="(e: any) => (mode = e.target.value)"\n          v-model="mode"\n          value="image"\n          :checked="mode === \'image\'"\n        />\n        Encode image\n      </label>\n    </div>\n    <template v-if="mode === \'hash\'">\n      <input class="text-input" v-model="hashInput" />\n    </template>\n    <template v-if="mode === \'image\'">\n      <div class="hint">Note: encoding is done in the browser only (no server involved)!</div>\n      <BlurhashImageEncoder v-model="encodedHash" />\n    </template>\n\n    <template v-if="hash && !blurhashValid.result">\n      <div class="blurhashError">\n        <strong>Invalid blurhash</strong> - {{ blurhashValid.errorReason }}\n      </div>\n    </template>\n    <template v-if="blurhashValid.result">\n      <hr />\n      <h2>\n        <pre class="code">{{\'<Blurhash />\'}}</pre>\n      </h2>\n      <BlurhashDemo :hash="hash" />\n      <hr />\n      <h2>\n        <pre class="code">{{\'<BlurhashCanvas />\'}}</pre>\n      </h2>\n      <BlurhashCanvasDemo :hash="hash" />\n    </template>\n\n    <footer>\n      <ul>\n        <li>\n          <a href="https://github.com/woltapp/react-blurhash" target="_blank">vuejs-blurhash</a>\n        </li>\n        <li>\n          <a href="https://github.com/woltapp/blurhash/tree/master/TypeScript" target="_blank"\n            >Blurhash TypeScript</a\n          >\n        </li>\n        <li>\n          <a href="https://blurha.sh" target="_blank">Blurhash website</a>\n        </li>\n      </ul>\n    </footer>\n  </div>\n</template>\n<script setup lang="ts">\nimport { ref, computed } from \'vue\';\nimport { isBlurhashValid } from \'blurhash\';\nimport BlurhashCanvasDemo from \'./BlurhashCanvasDemo.vue\';\nimport BlurhashImageEncoder from \'./BlurhashImageEncoder.vue\';\nimport BlurhashDemo from \'./BlurhashDemo.vue\';\n\nconst mode = ref(\'hash\');\nconst hashInput = ref(\'LEHV6nWB2yk8pyo0adR*.7kCMdnj\');\nconst encodedHash = ref(\'\');\nconst hash = computed(() => (mode.value === \'hash\' ? hashInput : encodedHash).value);\nconst blurhashValid = computed(() => isBlurhashValid(hash.value));\n<\/script>\n\n<style>\nh1 {\n  margin: 24px 0;\n}\nh2 {\n  font-size: 1.4em;\n}\n.root {\n  margin: 0 auto;\n  max-width: 1024px;\n  font-family: sans-serif;\n}\n.blurhashError {\n  margin-top: 10px;\n  color: #cc4260;\n  font-weight: 500;\n  font-size: 0.9em;\n}\n.code {\n  margin: 0;\n  padding: 0;\n  display: inline-block;\n  font-family: monospace, monospace;\n}\n.hint {\n  font-size: 0.8em;\n  color: #999;\n  margin: 8px 0;\n}\nhr {\n  height: 1px;\n  background-color: #e0e0e0;\n  border: none;\n  margin: 24px 0;\n}\n.mode-select {\n  margin: 15px 0;\n}\n.radio-input {\n  display: inline-flex;\n  align-items: center;\n}\n.radio-input input {\n  margin-right: 5px;\n}\n.radio-input + .radio-input {\n  margin-left: 14px;\n}\n.text-input {\n  white-space: pre;\n  font-size: 1em;\n  font-family: monospace;\n  padding: 8px;\n  border-radius: 4px;\n  border: 2px solid #d8d8d8;\n  width: 100%;\n  box-sizing: border-box;\n  outline: none;\n}\n.text-input:focus {\n  border-color: #8ab7ea;\n}\nfooter {\n  border-top: 1px solid rgb(242, 242, 242);\n  margin-top: 40px;\n  padding: 15px 10px;\n  text-align: center;\n  font-size: 0.9em;\n}\nfooter ul {\n  list-style: none;\n  white-space: nowrap;\n}\n\nfooter li {\n  position: relative;\n  display: inline;\n}\nfooter li + li {\n  margin-left: 24px;\n}\nfooter li + li::after {\n  position: absolute;\n  top: 0px;\n  left: -15px;\n  content: \'·\';\n  color: #c8c8c8;\n}\nfooter a {\n  color: #c8c8c8;\n  text-decoration: none;\n}\nfooter a:hover {\n  color: #3d50ff;\n}\nfooter a:active {\n  color: #041ae5;\n}\n</style>\n'],sourceRoot:""}]),n.a=s},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BlurhashCanvas=n.Blurhash=void 0;var o=t(36);Object.defineProperty(n,"Blurhash",{enumerable:!0,get:function(){return o.default}});var r=t(31);Object.defineProperty(n,"BlurhashCanvas",{enumerable:!0,get:function(){return r.default}})},function(e,n,t){"use strict";t.r(n);var o=t(17);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);const i=o.default;n.default=i},function(e,n,t){"use strict";var o=t(14);t(40);const r=o.default;n.default=r},function(e,n,t){"use strict";t.r(n);var o=t(1),r=t(32);Object(o.createApp)(r.default).mount(document.body)},function(e,n){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(e,n,t){"use strict";t.r(n);var o=t(15);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);t(41);var i=t(5);const s=t.n(i)()(o.default,[["__scopeId","data-v-8ca12004"]]);n.default=s},function(e,n,t){"use strict";t.r(n);var o=t(16);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);const i=o.default;n.default=i},function(e,n,t){"use strict";t.r(n);var o=t(19);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);t(42);var i=t(5);const s=t.n(i)()(o.default,[["__scopeId","data-v-afa51fda"]]);n.default=s},function(e,n,t){"use strict";t.r(n);var o=t(20);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);t(45);var i=t(5);const s=t.n(i)()(o.default,[["__scopeId","data-v-394c18e6"]]);n.default=s},function(e,n,t){"use strict";t.r(n);var o=t(21);for(var r in o)["default"].indexOf(r)<0&&function(e){t.d(n,e,(function(){return o[e]}))}(r);t(43);var i=t(5);const s=t.n(i)()(o.default,[["__scopeId","data-v-e9afe26a"]]);n.default=s},function(e,n,t){"use strict";var o=t(2),r=t.n(o),i=t(29),s={insert:"head",singleton:!1};r()(i.a,s),i.a.locals},function(e,n,t){"use strict";var o=t(2),r=t.n(o),i=t(25),s={insert:"head",singleton:!1};r()(i.a,s),i.a.locals},function(e,n,t){"use strict";var o=t(2),r=t.n(o),i=t(27),s={insert:"head",singleton:!1};r()(i.a,s),i.a.locals},function(e,n,t){"use strict";var o=t(2),r=t.n(o),i=t(28),s={insert:"head",singleton:!1};r()(i.a,s),i.a.locals},function(e,n,t){"use strict";var o=t(2),r=t.n(o),i=t(24),s={insert:"head",singleton:!1};r()(i.a,s),i.a.locals},function(e,n,t){"use strict";var o=t(2),r=t.n(o),i=t(26),s={insert:"head",singleton:!1};r()(i.a,s),i.a.locals}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtY29yZS9kaXN0L3J1bnRpbWUtY29yZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWRvbS9kaXN0L3J1bnRpbWUtZG9tLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9kZW1vL0FwcC52dWU/ZDg1ZCIsIndlYnBhY2s6Ly8vLi9kZW1vL0JsdXJoYXNoQ2FudmFzRGVtby52dWU/NDE3NSIsIndlYnBhY2s6Ly8vLi9zcmMvQmx1cmhhc2gudnVlPzk3OWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JsdXJoYXNoQ2FudmFzLnZ1ZT8zY2NkIiwid2VicGFjazovLy8uL2RlbW8vU2V0dGluZy52dWU/N2ZkNSIsIndlYnBhY2s6Ly8vLi9kZW1vL0JsdXJoYXNoSW1hZ2VFbmNvZGVyLnZ1ZT8zZWY4Iiwid2VicGFjazovLy8uL2RlbW8vRmlsZUlucHV0LnZ1ZT9iY2QyIiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hEZW1vLnZ1ZT9mYjY2Iiwid2VicGFjazovLy8uL2RlbW8vQXBwLnZ1ZT83YjQ3Iiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT84ZTA1Iiwid2VicGFjazovLy8uL3NyYy9CbHVyaGFzaC52dWU/MWNhZSIsIndlYnBhY2s6Ly8vLi9zcmMvQmx1cmhhc2hDYW52YXMudnVlPzkxYTUiLCJ3ZWJwYWNrOi8vLy4vZGVtby9TZXR0aW5nLnZ1ZT9iZDQzIiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hJbWFnZUVuY29kZXIudnVlPzAyMTEiLCJ3ZWJwYWNrOi8vLy4vZGVtby9GaWxlSW5wdXQudnVlP2U1MzUiLCJ3ZWJwYWNrOi8vLy4vZGVtby9CbHVyaGFzaERlbW8udnVlPzM2YTEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JsdXJoYXNoL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL2RlbW8vU2V0dGluZy52dWUiLCJ3ZWJwYWNrOi8vLy4vZGVtby9TZXR0aW5nLnZ1ZT9jOWZhIiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT9hZTM0Iiwid2VicGFjazovLy8uL2RlbW8vRmlsZUlucHV0LnZ1ZT8zNDYyIiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hJbWFnZUVuY29kZXIudnVlP2VlYTkiLCJ3ZWJwYWNrOi8vLy4vZGVtby9CbHVyaGFzaERlbW8udnVlPzE4OGMiLCJ3ZWJwYWNrOi8vLy4vZGVtby9BcHAudnVlP2I3NTciLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9CbHVyaGFzaENhbnZhcy52dWUiLCJ3ZWJwYWNrOi8vLy4vZGVtby9BcHAudnVlIiwid2VicGFjazovLy8uL2RlbW8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9kZW1vL0JsdXJoYXNoQ2FudmFzRGVtby52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JsdXJoYXNoLnZ1ZSIsIndlYnBhY2s6Ly8vLi9kZW1vL0JsdXJoYXNoSW1hZ2VFbmNvZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9kZW1vL0ZpbGVJbnB1dC52dWUiLCJ3ZWJwYWNrOi8vLy4vZGVtby9CbHVyaGFzaERlbW8udnVlIiwid2VicGFjazovLy8uL2RlbW8vQXBwLnZ1ZT83OWYzIiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT8wYzdkIiwid2VicGFjazovLy8uL2RlbW8vQmx1cmhhc2hJbWFnZUVuY29kZXIudnVlP2Q4NWUiLCJ3ZWJwYWNrOi8vLy4vZGVtby9CbHVyaGFzaERlbW8udnVlP2EzNGEiLCJ3ZWJwYWNrOi8vLy4vZGVtby9TZXR0aW5nLnZ1ZT9mZDQ1Iiwid2VicGFjazovLy8uL2RlbW8vRmlsZUlucHV0LnZ1ZT9kMDgwIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJtYXAiLCJsaXN0Iiwic3BsaXQiLCJsZW5ndGgiLCJ2YWwiLCJ0b0xvd2VyQ2FzZSIsImlzR2xvYmFsbHlXaGl0ZWxpc3RlZCIsIm5vcm1hbGl6ZVN0eWxlIiwiaXNBcnJheSIsInJlcyIsIml0ZW0iLCJub3JtYWxpemVkIiwiaXNTdHJpbmciLCJwYXJzZVN0cmluZ1N0eWxlIiwiaXNPYmplY3QiLCJsaXN0RGVsaW1pdGVyUkUiLCJwcm9wZXJ0eURlbGltaXRlclJFIiwic3R5bGVDb21tZW50UkUiLCJjc3NUZXh0IiwicmV0IiwicmVwbGFjZSIsImZvckVhY2giLCJ0bXAiLCJ0cmltIiwibm9ybWFsaXplQ2xhc3MiLCJub3JtYWxpemVQcm9wcyIsInByb3BzIiwiY2xhc3MiLCJrbGFzcyIsInN0eWxlIiwiaXNIVE1MVGFnIiwiaXNTVkdUYWciLCJzcGVjaWFsQm9vbGVhbkF0dHJzIiwiaXNTcGVjaWFsQm9vbGVhbkF0dHIiLCJpbmNsdWRlQm9vbGVhbkF0dHIiLCJsb29zZUVxdWFsIiwiYSIsImIiLCJhVmFsaWRUeXBlIiwiaXNEYXRlIiwiYlZhbGlkVHlwZSIsImdldFRpbWUiLCJpc1N5bWJvbCIsImVxdWFsIiwibG9vc2VDb21wYXJlQXJyYXlzIiwia2V5cyIsImFIYXNLZXkiLCJiSGFzS2V5IiwiU3RyaW5nIiwibG9vc2VJbmRleE9mIiwiYXJyIiwiZmluZEluZGV4IiwidG9EaXNwbGF5U3RyaW5nIiwidG9TdHJpbmciLCJvYmplY3RUb1N0cmluZyIsImlzRnVuY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJfa2V5IiwiX192X2lzUmVmIiwiaXNNYXAiLCJzaXplIiwiZW50cmllcyIsInJlZHVjZSIsImlzU2V0IiwidmFsdWVzIiwiaXNQbGFpbk9iamVjdCIsIkVNUFRZX09CSiIsIkVNUFRZX0FSUiIsIk5PT1AiLCJOTyIsIm9uUkUiLCJpc09uIiwidGVzdCIsImlzTW9kZWxMaXN0ZW5lciIsInN0YXJ0c1dpdGgiLCJleHRlbmQiLCJhc3NpZ24iLCJyZW1vdmUiLCJlbCIsImluZGV4T2YiLCJzcGxpY2UiLCJoYXNPd24iLCJBcnJheSIsInRvVHlwZVN0cmluZyIsImlzUmVnRXhwIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwidG9SYXdUeXBlIiwic2xpY2UiLCJpc0ludGVnZXJLZXkiLCJwYXJzZUludCIsImlzUmVzZXJ2ZWRQcm9wIiwiaXNCdWlsdEluRGlyZWN0aXZlIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImZuIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJfIiwidG9VcHBlckNhc2UiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b0hhbmRsZXJLZXkiLCJoYXNDaGFuZ2VkIiwib2xkVmFsdWUiLCJpcyIsImludm9rZUFycmF5Rm5zIiwiZm5zIiwiYXJnIiwiZGVmIiwib2JqIiwiY29uZmlndXJhYmxlIiwibG9vc2VUb051bWJlciIsInBhcnNlRmxvYXQiLCJpc05hTiIsInRvTnVtYmVyIiwiTnVtYmVyIiwiTmFOIiwiX2dsb2JhbFRoaXMiLCJnZXRHbG9iYWxUaGlzIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJ3aW5kb3ciLCJnbG9iYWwiLCJhY3RpdmVFZmZlY3RTY29wZSIsIkVmZmVjdFNjb3BlIiwiZGV0YWNoZWQiLCJ0aGlzIiwiX2FjdGl2ZSIsImVmZmVjdHMiLCJjbGVhbnVwcyIsInBhcmVudCIsImluZGV4Iiwic2NvcGVzIiwicHVzaCIsImN1cnJlbnRFZmZlY3RTY29wZSIsImZyb21QYXJlbnQiLCJzdG9wIiwibGFzdCIsInBvcCIsInVuZGVmaW5lZCIsImVmZmVjdFNjb3BlIiwicmVjb3JkRWZmZWN0U2NvcGUiLCJlZmZlY3QiLCJzY29wZSIsImFjdGl2ZSIsImdldEN1cnJlbnRTY29wZSIsIm9uU2NvcGVEaXNwb3NlIiwiY3JlYXRlRGVwIiwiZGVwIiwiU2V0IiwidyIsIndhc1RyYWNrZWQiLCJ0cmFja09wQml0IiwibmV3VHJhY2tlZCIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJlZmZlY3RUcmFja0RlcHRoIiwiYWN0aXZlRWZmZWN0IiwiSVRFUkFURV9LRVkiLCJNQVBfS0VZX0lURVJBVEVfS0VZIiwiUmVhY3RpdmVFZmZlY3QiLCJzY2hlZHVsZXIiLCJkZXBzIiwibGFzdFNob3VsZFRyYWNrIiwic2hvdWxkVHJhY2siLCJpbml0RGVwTWFya2VycyIsImNsZWFudXBFZmZlY3QiLCJwdHIiLCJkZWxldGUiLCJmaW5hbGl6ZURlcE1hcmtlcnMiLCJkZWZlclN0b3AiLCJvblN0b3AiLCJvcHRpb25zIiwiX2VmZmVjdCIsImxhenkiLCJydW4iLCJydW5uZXIiLCJ0cmFja1N0YWNrIiwicGF1c2VUcmFja2luZyIsInJlc2V0VHJhY2tpbmciLCJ0cmFjayIsInRhcmdldCIsInR5cGUiLCJkZXBzTWFwIiwic2V0IiwiTWFwIiwidHJhY2tFZmZlY3RzIiwiZGVidWdnZXJFdmVudEV4dHJhSW5mbyIsImhhcyIsImFkZCIsInRyaWdnZXIiLCJuZXdWYWx1ZSIsIm9sZFRhcmdldCIsIm5ld0xlbmd0aCIsInRyaWdnZXJFZmZlY3RzIiwiY29tcHV0ZWQiLCJ0cmlnZ2VyRWZmZWN0IiwiYWxsb3dSZWN1cnNlIiwiaXNOb25UcmFja2FibGVLZXlzIiwiYnVpbHRJblN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmlsdGVyIiwiZ2V0JDEiLCJjcmVhdGVHZXR0ZXIiLCJzaGFsbG93R2V0IiwicmVhZG9ubHlHZXQiLCJzaGFsbG93UmVhZG9ubHlHZXQiLCJhcnJheUluc3RydW1lbnRhdGlvbnMiLCJjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMiLCJpbnN0cnVtZW50YXRpb25zIiwiYXJncyIsInRvUmF3IiwiYXBwbHkiLCJpc1JlYWRvbmx5Iiwic2hhbGxvdyIsInJlY2VpdmVyIiwic2hhbGxvd1JlYWRvbmx5TWFwIiwicmVhZG9ubHlNYXAiLCJzaGFsbG93UmVhY3RpdmVNYXAiLCJyZWFjdGl2ZU1hcCIsInRhcmdldElzQXJyYXkiLCJSZWZsZWN0IiwiaXNSZWYiLCJyZWFkb25seSIsInJlYWN0aXZlIiwic2V0JDEiLCJjcmVhdGVTZXR0ZXIiLCJzaGFsbG93U2V0IiwiaGFkS2V5IiwicmVzdWx0IiwibXV0YWJsZUhhbmRsZXJzIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwicmVhZG9ubHlIYW5kbGVycyIsInNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzIiwic2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMiLCJ0b1NoYWxsb3ciLCJnZXRQcm90byIsInYiLCJnZXRQcm90b3R5cGVPZiIsImlzU2hhbGxvdyIsInJhd1RhcmdldCIsInJhd0tleSIsIndyYXAiLCJ0b1JlYWRvbmx5IiwidG9SZWFjdGl2ZSIsImRlbGV0ZUVudHJ5IiwiY2xlYXIiLCJoYWRJdGVtcyIsImNyZWF0ZUZvckVhY2giLCJjYWxsYmFjayIsInRoaXNBcmciLCJvYnNlcnZlZCIsImNyZWF0ZUl0ZXJhYmxlTWV0aG9kIiwibWV0aG9kIiwidGFyZ2V0SXNNYXAiLCJpc1BhaXIiLCJpdGVyYXRvciIsImlzS2V5T25seSIsImlubmVySXRlcmF0b3IiLCJkb25lIiwibmV4dCIsImNyZWF0ZVJlYWRvbmx5TWV0aG9kIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9ucyIsIm11dGFibGVJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd0luc3RydW1lbnRhdGlvbnMiLCJyZWFkb25seUluc3RydW1lbnRhdGlvbnMiLCJzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyIiwibXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyIsInNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMiLCJyZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyIsInNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyIsImNyZWF0ZVJlYWN0aXZlT2JqZWN0Iiwic2hhbGxvd1JlYWN0aXZlIiwic2hhbGxvd1JlYWRvbmx5IiwiYmFzZUhhbmRsZXJzIiwiY29sbGVjdGlvbkhhbmRsZXJzIiwicHJveHlNYXAiLCJleGlzdGluZ1Byb3h5IiwidGFyZ2V0VHlwZSIsImlzRXh0ZW5zaWJsZSIsInJhd1R5cGUiLCJ0YXJnZXRUeXBlTWFwIiwicHJveHkiLCJQcm94eSIsImlzUmVhY3RpdmUiLCJpc1Byb3h5IiwicmF3IiwibWFya1JhdyIsInRyYWNrUmVmVmFsdWUiLCJyZWYiLCJ0cmlnZ2VyUmVmVmFsdWUiLCJuZXdWYWwiLCJjcmVhdGVSZWYiLCJzaGFsbG93UmVmIiwicmF3VmFsdWUiLCJfX3ZfaXNTaGFsbG93IiwiX3Jhd1ZhbHVlIiwiX3ZhbHVlIiwidXNlRGlyZWN0VmFsdWUiLCJ0cmlnZ2VyUmVmIiwidW5yZWYiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsIkN1c3RvbVJlZkltcGwiLCJmYWN0b3J5IiwiX2dldCIsIl9zZXQiLCJjdXN0b21SZWYiLCJ0b1JlZnMiLCJ0b1JlZiIsIk9iamVjdFJlZkltcGwiLCJfb2JqZWN0IiwiX2RlZmF1bHRWYWx1ZSIsIl9hIiwiZGVmYXVsdFZhbHVlIiwiX2EkMSIsIkNvbXB1dGVkUmVmSW1wbCIsIl9zZXR0ZXIiLCJpc1NTUiIsIl9kaXJ0eSIsIl9jYWNoZWFibGUiLCJtc2ciLCJhc3NlcnROdW1iZXIiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJpbnN0YW5jZSIsImVyciIsImhhbmRsZUVycm9yIiwiY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmciLCJ0aHJvd0luRGV2Iiwidm5vZGUiLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImFwcEVycm9ySGFuZGxlciIsImFwcENvbnRleHQiLCJjb25maWciLCJlcnJvckhhbmRsZXIiLCJjb250ZXh0Vk5vZGUiLCJjb25zb2xlIiwiZXJyb3IiLCJsb2dFcnJvciIsImlzRmx1c2hpbmciLCJpc0ZsdXNoUGVuZGluZyIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImN1cnJlbnRGbHVzaFByb21pc2UiLCJuZXh0VGljayIsInF1ZXVlSm9iIiwiam9iIiwiaW5jbHVkZXMiLCJpZCIsInN0YXJ0IiwiZW5kIiwibWlkZGxlIiwiZ2V0SWQiLCJmaW5kSW5zZXJ0aW9uSW5kZXgiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwicXVldWVQb3N0Rmx1c2hDYiIsImNiIiwiZmx1c2hQcmVGbHVzaENicyIsInNlZW4iLCJwcmUiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiSW5maW5pdHkiLCJjb21wYXJhdG9yIiwiZGlmZiIsImRldnRvb2xzIiwiYnVmZmVyIiwiZGV2dG9vbHNOb3RJbnN0YWxsZWQiLCJlbWl0JDEiLCJldmVudCIsImVtaXQiLCJzZXREZXZ0b29sc0hvb2siLCJob29rIiwiX2IiLCJlbmFibGVkIiwiSFRNTEVsZW1lbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIiwibmV3SG9vayIsInNldFRpbWVvdXQiLCJkZXZ0b29sc0NvbXBvbmVudEFkZGVkIiwiY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rIiwiZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkIiwiX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCIsImNvbXBvbmVudCIsImFwcCIsInVpZCIsInJhd0FyZ3MiLCJpc1VubW91bnRlZCIsIm1vZGVsQXJnIiwibW9kaWZpZXJzS2V5IiwibnVtYmVyIiwiaGFuZGxlck5hbWUiLCJfX1ZVRV9QUk9EX0RFVlRPT0xTX18iLCJwYXJhbXMiLCJkZXZ0b29sc0NvbXBvbmVudEVtaXQiLCJoYW5kbGVyIiwib25jZUhhbmRsZXIiLCJlbWl0dGVkIiwibm9ybWFsaXplRW1pdHNPcHRpb25zIiwiY29tcCIsImFzTWl4aW4iLCJlbWl0c0NhY2hlIiwiY2FjaGVkIiwiZW1pdHMiLCJoYXNFeHRlbmRzIiwiX19WVUVfT1BUSU9OU19BUElfXyIsImV4dGVuZEVtaXRzIiwibm9ybWFsaXplZEZyb21FeHRlbmQiLCJtaXhpbnMiLCJleHRlbmRzIiwiaXNFbWl0TGlzdGVuZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJjdXJyZW50U2NvcGVJZCIsInNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInByZXYiLCJfX3Njb3BlSWQiLCJwdXNoU2NvcGVJZCIsInBvcFNjb3BlSWQiLCJ3aXRoU2NvcGVJZCIsIl9pZCIsIndpdGhDdHgiLCJjdHgiLCJpc05vblNjb3BlZFNsb3QiLCJfbiIsInJlbmRlckZuV2l0aENvbnRleHQiLCJfZCIsInNldEJsb2NrVHJhY2tpbmciLCJwcmV2SW5zdGFuY2UiLCJfYyIsInJlbmRlckNvbXBvbmVudFJvb3QiLCJDb21wb25lbnQiLCJ3aXRoUHJveHkiLCJwcm9wc09wdGlvbnMiLCJzbG90cyIsImF0dHJzIiwicmVuZGVyIiwicmVuZGVyQ2FjaGUiLCJkYXRhIiwic2V0dXBTdGF0ZSIsImluaGVyaXRBdHRycyIsImZhbGx0aHJvdWdoQXR0cnMiLCJzaGFwZUZsYWciLCJwcm94eVRvVXNlIiwibm9ybWFsaXplVk5vZGUiLCJnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2giLCJibG9ja1N0YWNrIiwiY3JlYXRlVk5vZGUiLCJDb21tZW50Iiwicm9vdCIsInNvbWUiLCJmaWx0ZXJNb2RlbExpc3RlbmVycyIsImNsb25lVk5vZGUiLCJkaXJzIiwiY29uY2F0IiwidHJhbnNpdGlvbiIsImZpbHRlclNpbmdsZVJvb3QiLCJjaGlsZHJlbiIsInNpbmdsZVJvb3QiLCJjaGlsZCIsImlzVk5vZGUiLCJoYXNQcm9wc0NoYW5nZWQiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJlbWl0c09wdGlvbnMiLCJuZXh0S2V5cyIsInVwZGF0ZUhPQ0hvc3RFbCIsInN1YlRyZWUiLCJpc1N1c3BlbnNlIiwiX19pc1N1c3BlbnNlIiwiU3VzcGVuc2UiLCJuMSIsIm4yIiwiY29udGFpbmVyIiwiYW5jaG9yIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJpc1NWRyIsInNsb3RTY29wZUlkcyIsIm9wdGltaXplZCIsInJlbmRlcmVySW50ZXJuYWxzIiwicGF0Y2giLCJjcmVhdGVFbGVtZW50IiwiaGlkZGVuQ29udGFpbmVyIiwic3VzcGVuc2UiLCJjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5IiwicGVuZGluZ0JyYW5jaCIsInNzQ29udGVudCIsInRyaWdnZXJFdmVudCIsInNzRmFsbGJhY2siLCJzZXRBY3RpdmVCcmFuY2giLCJtb3VudFN1c3BlbnNlIiwidW0iLCJ1bm1vdW50IiwibmV3QnJhbmNoIiwibmV3RmFsbGJhY2siLCJhY3RpdmVCcmFuY2giLCJpc0luRmFsbGJhY2siLCJpc0h5ZHJhdGluZyIsImlzU2FtZVZOb2RlVHlwZSIsInBlbmRpbmdJZCIsInRpbWVvdXQiLCJmYWxsYmFjayIsInBhdGNoU3VzcGVuc2UiLCJoeWRyYXRlIiwibm9kZSIsImh5ZHJhdGVOb2RlIiwicGFyZW50Tm9kZSIsImRvY3VtZW50Iiwibm9ybWFsaXplIiwiaXNTbG90Q2hpbGRyZW4iLCJub3JtYWxpemVTdXNwZW5zZVNsb3QiLCJkZWZhdWx0IiwiZXZlbnRMaXN0ZW5lciIsIm1vdmUiLCJyZXN1bWUiLCJkZWxheUVudGVyIiwiYWZ0ZXJMZWF2ZSIsImhhc1VucmVzb2x2ZWRBbmNlc3RvciIsImZhbGxiYWNrVk5vZGUiLCJtb3VudEZhbGxiYWNrIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJpc0luUGVuZGluZ1N1c3BlbnNlIiwiaHlkcmF0ZWRFbCIsImFzeW5jRGVwIiwiYXN5bmNTZXR1cFJlc3VsdCIsInN1c3BlbnNlSWQiLCJhc3luY1Jlc29sdmVkIiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJwbGFjZWhvbGRlciIsImRvUmVtb3ZlIiwiYmxvY2siLCJ0cmFja0Jsb2NrIiwiaXNCbG9ja1RyZWVFbmFibGVkIiwib3BlbkJsb2NrIiwiY3VycmVudEJsb2NrIiwiY2xvc2VCbG9jayIsInNpbmdsZUNoaWxkIiwiZHluYW1pY0NoaWxkcmVuIiwicXVldWVFZmZlY3RXaXRoU3VzcGVuc2UiLCJicmFuY2giLCJwcm92aWRlIiwiY3VycmVudEluc3RhbmNlIiwicHJvdmlkZXMiLCJwYXJlbnRQcm92aWRlcyIsImluamVjdCIsInRyZWF0RGVmYXVsdEFzRmFjdG9yeSIsImFyZ3VtZW50cyIsIndhdGNoRWZmZWN0IiwiZG9XYXRjaCIsIndhdGNoUG9zdEVmZmVjdCIsImZsdXNoIiwid2F0Y2hTeW5jRWZmZWN0IiwiSU5JVElBTF9XQVRDSEVSX1ZBTFVFIiwid2F0Y2giLCJzb3VyY2UiLCJpbW1lZGlhdGUiLCJkZWVwIiwib25UcmFjayIsIm9uVHJpZ2dlciIsImNsZWFudXAiLCJmb3JjZVRyaWdnZXIiLCJpc011bHRpU291cmNlIiwidHJhdmVyc2UiLCJvbkNsZWFudXAiLCJiYXNlR2V0dGVyIiwic3NyQ2xlYW51cCIsImlzSW5TU1JDb21wb25lbnRTZXR1cCIsInVzZVNTUkNvbnRleHQiLCJfX3dhdGNoZXJIYW5kbGVzIiwiZmlsbCIsInF1ZXVlUG9zdFJlbmRlckVmZmVjdCIsInVud2F0Y2giLCJpbnN0YW5jZVdhdGNoIiwicHVibGljVGhpcyIsImNyZWF0ZVBhdGhHZXR0ZXIiLCJzZXRDdXJyZW50SW5zdGFuY2UiLCJ1bnNldEN1cnJlbnRJbnN0YW5jZSIsInBhdGgiLCJzZWdtZW50cyIsInVzZVRyYW5zaXRpb25TdGF0ZSIsInN0YXRlIiwiaXNNb3VudGVkIiwiaXNMZWF2aW5nIiwiaXNVbm1vdW50aW5nIiwibGVhdmluZ1ZOb2RlcyIsIm9uTW91bnRlZCIsIm9uQmVmb3JlVW5tb3VudCIsIlRyYW5zaXRpb25Ib29rVmFsaWRhdG9yIiwiRnVuY3Rpb24iLCJCYXNlVHJhbnNpdGlvbiIsImFwcGVhciIsIkJvb2xlYW4iLCJwZXJzaXN0ZWQiLCJvbkJlZm9yZUVudGVyIiwib25FbnRlciIsIm9uQWZ0ZXJFbnRlciIsIm9uRW50ZXJDYW5jZWxsZWQiLCJvbkJlZm9yZUxlYXZlIiwib25MZWF2ZSIsIm9uQWZ0ZXJMZWF2ZSIsIm9uTGVhdmVDYW5jZWxsZWQiLCJvbkJlZm9yZUFwcGVhciIsIm9uQXBwZWFyIiwib25BZnRlckFwcGVhciIsIm9uQXBwZWFyQ2FuY2VsbGVkIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwicHJldlRyYW5zaXRpb25LZXkiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJoYXNGb3VuZCIsInJhd1Byb3BzIiwiZW1wdHlQbGFjZWhvbGRlciIsImlubmVyQ2hpbGQiLCJnZXRLZWVwQWxpdmVDaGlsZCIsImVudGVySG9va3MiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwib2xkQ2hpbGQiLCJvbGRJbm5lckNoaWxkIiwidHJhbnNpdGlvbktleUNoYW5nZWQiLCJnZXRUcmFuc2l0aW9uS2V5IiwibGVhdmluZ0hvb2tzIiwidXBkYXRlIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsIl9sZWF2ZUNiIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiY2FsbEhvb2siLCJjYWxsQXN5bmNIb29rIiwiZXZlcnkiLCJob29rcyIsImxlYXZpbmdWTm9kZSIsImFmdGVySG9vayIsImNhbmNlbEhvb2siLCJjYWxsZWQiLCJfZW50ZXJDYiIsImNhbmNlbGxlZCIsImNsb25lIiwiaXNLZWVwQWxpdmUiLCJrZWVwQ29tbWVudCIsInBhcmVudEtleSIsImtleWVkRnJhZ21lbnRDb3VudCIsIkZyYWdtZW50IiwicGF0Y2hGbGFnIiwiZGVmaW5lQ29tcG9uZW50Iiwic2V0dXAiLCJpc0FzeW5jV3JhcHBlciIsIl9fYXN5bmNMb2FkZXIiLCJkZWZpbmVBc3luY0NvbXBvbmVudCIsImxvYWRlciIsImxvYWRpbmdDb21wb25lbnQiLCJlcnJvckNvbXBvbmVudCIsImRlbGF5Iiwic3VzcGVuc2libGUiLCJvbkVycm9yIiwidXNlck9uRXJyb3IiLCJyZXNvbHZlZENvbXAiLCJwZW5kaW5nUmVxdWVzdCIsInJldHJpZXMiLCJsb2FkIiwidGhpc1JlcXVlc3QiLCJFcnJvciIsInJlamVjdCIsImNyZWF0ZUlubmVyQ29tcCIsImxvYWRlZCIsImRlbGF5ZWQiLCJjZSIsIl9faXNLZWVwQWxpdmUiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiUmVnRXhwIiwiZXhjbHVkZSIsIm1heCIsInNoYXJlZENvbnRleHQiLCJyZW5kZXJlciIsImN1cnJlbnQiLCJfX3ZfY2FjaGUiLCJfdW5tb3VudCIsInN0b3JhZ2VDb250YWluZXIiLCJyZXNldFNoYXBlRmxhZyIsInBydW5lQ2FjaGUiLCJnZXRDb21wb25lbnROYW1lIiwicHJ1bmVDYWNoZUVudHJ5IiwiYWN0aXZhdGUiLCJpc0RlYWN0aXZhdGVkIiwidm5vZGVIb29rIiwib25Wbm9kZU1vdW50ZWQiLCJpbnZva2VWTm9kZUhvb2siLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwibWF0Y2hlcyIsInBlbmRpbmdDYWNoZUtleSIsImNhY2hlU3VidHJlZSIsImdldElubmVyQ2hpbGQiLCJvblVwZGF0ZWQiLCJyYXdWTm9kZSIsIl9fYXN5bmNSZXNvbHZlZCIsImNhY2hlZFZOb2RlIiwicGF0dGVybiIsIm9uQWN0aXZhdGVkIiwicmVnaXN0ZXJLZWVwQWxpdmVIb29rIiwib25EZWFjdGl2YXRlZCIsIndyYXBwZWRIb29rIiwiX193ZGMiLCJpbmplY3RIb29rIiwiaW5qZWN0VG9LZWVwQWxpdmVSb290Iiwia2VlcEFsaXZlUm9vdCIsImluamVjdGVkIiwib25Vbm1vdW50ZWQiLCJwcmVwZW5kIiwiX193ZWgiLCJ1bnNoaWZ0IiwiY3JlYXRlSG9vayIsImxpZmVjeWNsZSIsIm9uQmVmb3JlTW91bnQiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uU2VydmVyUHJlZmV0Y2giLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uRXJyb3JDYXB0dXJlZCIsIndpdGhEaXJlY3RpdmVzIiwiZGlyZWN0aXZlcyIsImludGVybmFsSW5zdGFuY2UiLCJnZXRFeHBvc2VQcm94eSIsImJpbmRpbmdzIiwiZGlyIiwibW9kaWZpZXJzIiwibW91bnRlZCIsInVwZGF0ZWQiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwib2xkQmluZGluZ3MiLCJiaW5kaW5nIiwicmVzb2x2ZUNvbXBvbmVudCIsIm1heWJlU2VsZlJlZmVyZW5jZSIsInJlc29sdmVBc3NldCIsIk5VTExfRFlOQU1JQ19DT01QT05FTlQiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsInJlc29sdmVEaXJlY3RpdmUiLCJ3YXJuTWlzc2luZyIsInNlbGZOYW1lIiwicmVnaXN0cnkiLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsImZyb20iLCJjcmVhdGVTbG90cyIsImR5bmFtaWNTbG90cyIsInNsb3QiLCJqIiwicmVuZGVyU2xvdCIsIm5vU2xvdHRlZCIsImlzQ0UiLCJ2YWxpZFNsb3RDb250ZW50IiwiZW5zdXJlVmFsaWRWTm9kZSIsInZub2RlcyIsInJlbmRlcmVkIiwiY3JlYXRlQmxvY2siLCJzY29wZUlkIiwidG9IYW5kbGVycyIsInByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5IiwiZ2V0UHVibGljSW5zdGFuY2UiLCJpc1N0YXRlZnVsQ29tcG9uZW50IiwicHVibGljUHJvcGVydGllc01hcCIsIiQiLCIkZWwiLCIkZGF0YSIsIiRwcm9wcyIsIiRhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwicmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsIiRlbWl0IiwiJG9wdGlvbnMiLCJyZXNvbHZlTWVyZ2VkT3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsImYiLCIkbmV4dFRpY2siLCIkd2F0Y2giLCJoYXNTZXR1cEJpbmRpbmciLCJfX2lzU2NyaXB0U2V0dXAiLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJhY2Nlc3NDYWNoZSIsIm5vcm1hbGl6ZWRQcm9wcyIsInNob3VsZENhY2hlQWNjZXNzIiwicHVibGljR2V0dGVyIiwiY3NzTW9kdWxlIiwiZ2xvYmFsUHJvcGVydGllcyIsIl9fY3NzTW9kdWxlcyIsImRlc2NyaXB0b3IiLCJSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJ1bnNjb3BhYmxlcyIsImFwcGx5T3B0aW9ucyIsImJlZm9yZUNyZWF0ZSIsImRhdGFPcHRpb25zIiwiY29tcHV0ZWRPcHRpb25zIiwibWV0aG9kcyIsIndhdGNoT3B0aW9ucyIsInByb3ZpZGVPcHRpb25zIiwiaW5qZWN0T3B0aW9ucyIsImNyZWF0ZWQiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiYmVmb3JlRGVzdHJveSIsImJlZm9yZVVubW91bnQiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXJyb3JDYXB0dXJlZCIsInNlcnZlclByZWZldGNoIiwiZXhwb3NlIiwiY29tcG9uZW50cyIsImZpbHRlcnMiLCJjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMiLCJ1bndyYXBSZWYiLCJub3JtYWxpemVJbmplY3QiLCJvcHQiLCJyZXNvbHZlSW5qZWN0aW9ucyIsInVud3JhcEluamVjdGVkUmVmIiwibWV0aG9kSGFuZGxlciIsImNyZWF0ZVdhdGNoZXIiLCJyZWdpc3RlckxpZmVjeWNsZUhvb2siLCJyZWdpc3RlciIsIl9ob29rIiwiZXhwb3NlZCIsImgiLCJiYXNlIiwiZXh0ZW5kc09wdGlvbnMiLCJnbG9iYWxNaXhpbnMiLCJvcHRpb25zQ2FjaGUiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJyZXNvbHZlZCIsIm1lcmdlT3B0aW9ucyIsInRvIiwic3RyYXRzIiwic3RyYXQiLCJpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzIiwibWVyZ2VEYXRhRm4iLCJtZXJnZU9iamVjdE9wdGlvbnMiLCJtZXJnZUFzQXJyYXkiLCJtZXJnZWQiLCJzZXRGdWxsUHJvcHMiLCJuZWVkQ2FzdEtleXMiLCJyYXdDYXN0VmFsdWVzIiwiaGFzQXR0cnNDaGFuZ2VkIiwiY2FtZWxLZXkiLCJyYXdDdXJyZW50UHJvcHMiLCJjYXN0VmFsdWVzIiwicmVzb2x2ZVByb3BWYWx1ZSIsImlzQWJzZW50IiwiaGFzRGVmYXVsdCIsInByb3BzRGVmYXVsdHMiLCJub3JtYWxpemVQcm9wc09wdGlvbnMiLCJwcm9wc0NhY2hlIiwiZXh0ZW5kUHJvcHMiLCJub3JtYWxpemVkS2V5IiwidmFsaWRhdGVQcm9wTmFtZSIsInByb3AiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFR5cGUiLCJjdG9yIiwibWF0Y2giLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImlzSW50ZXJuYWxLZXkiLCJub3JtYWxpemVTbG90VmFsdWUiLCJub3JtYWxpemVTbG90IiwicmF3U2xvdCIsIm5vcm1hbGl6ZU9iamVjdFNsb3RzIiwicmF3U2xvdHMiLCJfY3R4Iiwibm9ybWFsaXplVk5vZGVTbG90cyIsImNyZWF0ZUFwcENvbnRleHQiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwid2FybkhhbmRsZXIiLCJjb21waWxlck9wdGlvbnMiLCJ1aWQkMSIsImNyZWF0ZUFwcEFQSSIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJjb250ZXh0IiwiaW5zdGFsbGVkUGx1Z2lucyIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwidmVyc2lvbiIsInVzZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsImRpcmVjdGl2ZSIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfX3Z1ZV9hcHBfXyIsIlRleHQiLCJTdGF0aWMiLCJkZXZ0b29sc0luaXRBcHAiLCJkZXZ0b29sc1VubW91bnRBcHAiLCJzZXRSZWYiLCJyYXdSZWYiLCJvbGRSYXdSZWYiLCJpc1VubW91bnQiLCJyZWZWYWx1ZSIsIm93bmVyIiwib2xkUmVmIiwiX2lzU3RyaW5nIiwiX2lzUmVmIiwiZG9TZXQiLCJleGlzdGluZyIsImsiLCJoYXNNaXNtYXRjaCIsImlzU1ZHQ29udGFpbmVyIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImlzQ29tbWVudCIsIm5vZGVUeXBlIiwiY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zIiwibXQiLCJtb3VudENvbXBvbmVudCIsInBhdGNoUHJvcCIsImNyZWF0ZVRleHQiLCJuZXh0U2libGluZyIsImluc2VydCIsImNyZWF0ZUNvbW1lbnQiLCJpc0ZyYWdtZW50U3RhcnQiLCJvbk1pc21hdGNoIiwiaGFuZGxlTWlzbWF0Y2giLCJkb21UeXBlIiwibmV4dE5vZGUiLCJuZWVkVG9BZG9wdENvbnRlbnQiLCJzdGF0aWNDb3VudCIsIm91dGVySFRNTCIsImh5ZHJhdGVGcmFnbWVudCIsImh5ZHJhdGVFbGVtZW50IiwibG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiY3JlYXRlVGV4dFZOb2RlIiwiaHlkcmF0ZUNoaWxkcmVuIiwiZm9yY2VQYXRjaFZhbHVlIiwiZW5kc1dpdGgiLCJvbkNsaWNrIiwidm5vZGVIb29rcyIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsInBhcmVudFZOb2RlIiwiZnJhZ21lbnRTbG90U2NvcGVJZHMiLCJpc0ZyYWdtZW50IiwiaGFzQ2hpbGROb2RlcyIsIl92bm9kZSIsImNyZWF0ZVJlbmRlcmVyIiwiYmFzZUNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25GbnMiLCJfX1ZVRV9fIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImhvc3RJbnNlcnQiLCJob3N0UmVtb3ZlIiwiaG9zdFBhdGNoUHJvcCIsImhvc3RDcmVhdGVFbGVtZW50IiwiaG9zdENyZWF0ZVRleHQiLCJob3N0Q3JlYXRlQ29tbWVudCIsInNldFRleHQiLCJob3N0U2V0VGV4dCIsInNldEVsZW1lbnRUZXh0IiwiaG9zdFNldEVsZW1lbnRUZXh0IiwiaG9zdFBhcmVudE5vZGUiLCJob3N0TmV4dFNpYmxpbmciLCJzZXRTY29wZUlkIiwiaG9zdFNldFNjb3BlSWQiLCJpbnNlcnRTdGF0aWNDb250ZW50IiwiaG9zdEluc2VydFN0YXRpY0NvbnRlbnQiLCJnZXROZXh0SG9zdE5vZGUiLCJwcm9jZXNzVGV4dCIsInByb2Nlc3NDb21tZW50Tm9kZSIsIm1vdW50U3RhdGljTm9kZSIsInByb2Nlc3NGcmFnbWVudCIsInByb2Nlc3NFbGVtZW50IiwicHJvY2Vzc0NvbXBvbmVudCIsInByb2Nlc3MiLCJpbnRlcm5hbHMiLCJyZW1vdmVTdGF0aWNOb2RlIiwibW91bnRFbGVtZW50IiwicGF0Y2hFbGVtZW50IiwibW91bnRDaGlsZHJlbiIsInVubW91bnRDaGlsZHJlbiIsIm5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIiwiYmVmb3JlRW50ZXIiLCJlbnRlciIsImNsb25lSWZNb3VudGVkIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsInRvZ2dsZVJlY3Vyc2UiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJwYXRjaENoaWxkcmVuIiwicGF0Y2hQcm9wcyIsInByb3BzVG9VcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJvblZub2RlVXBkYXRlZCIsIm9sZENoaWxkcmVuIiwibmV3Q2hpbGRyZW4iLCJmYWxsYmFja0NvbnRhaW5lciIsIm9sZFZOb2RlIiwibmV3Vk5vZGUiLCJmcmFnbWVudFN0YXJ0QW5jaG9yIiwiZnJhZ21lbnRFbmRBbmNob3IiLCJ0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuIiwidXBkYXRlQ29tcG9uZW50IiwiaW5pdGlhbFZOb2RlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UiLCJzZXR1cENvbXBvbmVudCIsInJlZ2lzdGVyRGVwIiwibmV4dFZOb2RlIiwicHJldkNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwiJHN0YWJsZSIsInNob3VsZFVwZGF0ZUNvbXBvbmVudCIsInVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciIsImludmFsaWRhdGVKb2IiLCJidSIsInUiLCJvcmlnaW5OZXh0IiwibmV4dFRyZWUiLCJwcmV2VHJlZSIsImJtIiwiaXNBc3luY1dyYXBwZXJWTm9kZSIsImh5ZHJhdGVTdWJUcmVlIiwic2NvcGVkSW5pdGlhbFZOb2RlIiwicmF3UHJldlByb3BzIiwia2ViYWJLZXkiLCJjYW1lbGl6ZWRLZXkiLCJ1cGRhdGVQcm9wcyIsIm5lZWREZWxldGlvbkNoZWNrIiwiZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0IiwidXBkYXRlU2xvdHMiLCJjMSIsInByZXZTaGFwZUZsYWciLCJjMiIsInBhdGNoS2V5ZWRDaGlsZHJlbiIsInBhdGNoVW5rZXllZENoaWxkcmVuIiwib2xkTGVuZ3RoIiwiY29tbW9uTGVuZ3RoIiwiTWF0aCIsIm1pbiIsIm5leHRDaGlsZCIsInBhcmVudEFuY2hvciIsImwyIiwiZTEiLCJlMiIsIm5leHRQb3MiLCJzMSIsInMyIiwia2V5VG9OZXdJbmRleE1hcCIsInBhdGNoZWQiLCJ0b0JlUGF0Y2hlZCIsIm1vdmVkIiwibWF4TmV3SW5kZXhTb0ZhciIsIm5ld0luZGV4VG9PbGRJbmRleE1hcCIsInByZXZDaGlsZCIsIm5ld0luZGV4IiwiaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UiLCJsZW4iLCJhcnJJIiwiZ2V0U2VxdWVuY2UiLCJuZXh0SW5kZXgiLCJtb3ZlVHlwZSIsIm1vdmVTdGF0aWNOb2RlIiwibGVhdmUiLCJwZXJmb3JtTGVhdmUiLCJzaG91bGRJbnZva2VEaXJzIiwic2hvdWxkSW52b2tlVm5vZGVIb29rIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJ1bm1vdW50Q29tcG9uZW50IiwicmVtb3ZlRnJhZ21lbnQiLCJwZXJmb3JtUmVtb3ZlIiwiYnVtIiwiY2xlYW51cEJ1ZmZlciIsIm1jIiwicGMiLCJwYmMiLCJjcmVhdGVBcHAiLCJhbGxvd2VkIiwiY2gxIiwiY2gyIiwiaXNUZWxlcG9ydERpc2FibGVkIiwiZGlzYWJsZWQiLCJpc1RhcmdldFNWRyIsIlNWR0VsZW1lbnQiLCJyZXNvbHZlVGFyZ2V0Iiwic2VsZWN0IiwidGFyZ2V0U2VsZWN0b3IiLCJtb3ZlVGVsZXBvcnQiLCJ0YXJnZXRBbmNob3IiLCJpc1Jlb3JkZXIiLCJUZWxlcG9ydCIsIl9faXNUZWxlcG9ydCIsInF1ZXJ5U2VsZWN0b3IiLCJtYWluQW5jaG9yIiwibW91bnQiLCJ3YXNEaXNhYmxlZCIsImN1cnJlbnRDb250YWluZXIiLCJjdXJyZW50QW5jaG9yIiwibmV4dFRhcmdldCIsInVwZGF0ZUNzc1ZhcnMiLCJ0YXJnZXROb2RlIiwiX2xwYSIsInV0Iiwic2V0QXR0cmlidXRlIiwiZGlzYWJsZVRyYWNraW5nIiwidm5vZGVBcmdzVHJhbnNmb3JtZXIiLCJzZXR1cEJsb2NrIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwiY3JlYXRlQmFzZVZOb2RlIiwiX192X2lzVk5vZGUiLCJ0cmFuc2Zvcm1WTm9kZUFyZ3MiLCJ0cmFuc2Zvcm1lciIsIkludGVybmFsT2JqZWN0S2V5Iiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplUmVmIiwicmVmX2tleSIsInJlZl9mb3IiLCJpc0Jsb2NrTm9kZSIsIm5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uIiwiX192X3NraXAiLCJub3JtYWxpemVDaGlsZHJlbiIsIl9jcmVhdGVWTm9kZSIsImNsb25lZCIsImlzQ2xhc3NDb21wb25lbnQiLCJfX3ZjY09wdHMiLCJndWFyZFJlYWN0aXZlUHJvcHMiLCJpc1RlbGVwb3J0IiwiZXh0cmFQcm9wcyIsIm1lcmdlUmVmIiwibWVyZ2VkUHJvcHMiLCJtZXJnZVByb3BzIiwidGV4dCIsImZsYWciLCJjcmVhdGVTdGF0aWNWTm9kZSIsImNvbnRlbnQiLCJudW1iZXJPZk5vZGVzIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiYXNCbG9jayIsIm1lbW8iLCJzbG90RmxhZyIsInRvTWVyZ2UiLCJpbmNvbWluZyIsImVtcHR5QXBwQ29udGV4dCIsImV4cG9zZVByb3h5Iiwic2V0dXBDb250ZXh0IiwiYmMiLCJydGciLCJydGMiLCJzcCIsIm9uIiwib2ZmIiwiY29tcGlsZSIsImluc3RhbGxXaXRoUHJveHkiLCJpc1N0YXRlZnVsIiwiaW5pdFByb3BzIiwiaW5pdFNsb3RzIiwic2V0dXBSZXN1bHQiLCJjcmVhdGVTZXR1cENvbnRleHQiLCJyZXNvbHZlZFJlc3VsdCIsImUiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsInNldHVwU3RhdGVmdWxDb21wb25lbnQiLCJfX3NzcklubGluZVJlbmRlciIsInNzclJlbmRlciIsImRldnRvb2xzUmF3U2V0dXBTdGF0ZSIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiX2NvbXBpbGUiLCJfcmMiLCJpc1J1bnRpbWVPbmx5Iiwic2tpcE9wdGlvbnMiLCJ0ZW1wbGF0ZSIsImlzQ3VzdG9tRWxlbWVudCIsImRlbGltaXRlcnMiLCJjb21wb25lbnRDb21waWxlck9wdGlvbnMiLCJmaW5hbENvbXBpbGVyT3B0aW9ucyIsImNyZWF0ZUF0dHJzUHJveHkiLCJpbmNsdWRlSW5mZXJyZWQiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsImdldHRlck9yT3B0aW9ucyIsImRlYnVnT3B0aW9ucyIsInNldHRlciIsIm9ubHlHZXR0ZXIiLCJkZWZpbmVQcm9wcyIsImRlZmluZUVtaXRzIiwiZGVmaW5lRXhwb3NlIiwid2l0aERlZmF1bHRzIiwiZGVmYXVsdHMiLCJ1c2VTbG90cyIsImdldENvbnRleHQiLCJ1c2VBdHRycyIsIm1lcmdlRGVmYXVsdHMiLCJjcmVhdGVQcm9wc1Jlc3RQcm94eSIsImV4Y2x1ZGVkS2V5cyIsIndpdGhBc3luY0NvbnRleHQiLCJnZXRBd2FpdGFibGUiLCJhd2FpdGFibGUiLCJwcm9wc09yQ2hpbGRyZW4iLCJzc3JDb250ZXh0S2V5IiwiaW5pdEN1c3RvbUZvcm1hdHRlciIsIndpdGhNZW1vIiwiaXNNZW1vU2FtZSIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiZG9jIiwidGVtcGxhdGVDb250YWluZXIiLCJub2RlT3BzIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJ0YWciLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwic2VsZWN0b3IiLCJiZWZvcmUiLCJjbG9uZU5vZGUiLCJ3cmFwcGVyIiwiYXBwZW5kQ2hpbGQiLCJpbXBvcnRhbnRSRSIsInNldFN0eWxlIiwic2V0UHJvcGVydHkiLCJwcmVmaXhlZCIsInJhd05hbWUiLCJwcmVmaXhDYWNoZSIsInByZWZpeGVzIiwiYXV0b1ByZWZpeCIsInhsaW5rTlMiLCJhZGRFdmVudExpc3RlbmVyIiwicGF0Y2hFdmVudCIsInByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsImludm9rZXJzIiwiX3ZlaSIsImV4aXN0aW5nSW52b2tlciIsIm9wdGlvbnNNb2RpZmllclJFIiwicGFyc2VOYW1lIiwiaW5pdGlhbFZhbHVlIiwiaW52b2tlciIsIl92dHMiLCJhdHRhY2hlZCIsIkRhdGUiLCJub3ciLCJvcmlnaW5hbFN0b3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsInBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiY2FjaGVkTm93IiwiZ2V0Tm93IiwiY3JlYXRlSW52b2tlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuYXRpdmVPblJFIiwiZGVmaW5lQ3VzdG9tRWxlbWVudCIsIkNvbXAiLCJWdWVDdXN0b21FbGVtZW50IiwiaW5pdGlhbFByb3BzIiwic3VwZXIiLCJkZWZpbmVTU1JDdXN0b21FbGVtZW50IiwiQmFzZUNsYXNzIiwiX2RlZiIsIl9jb25uZWN0ZWQiLCJfcmVzb2x2ZWQiLCJfbnVtYmVyUHJvcHMiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiX3Jlc29sdmVQcm9wcyIsIl91cGRhdGUiLCJfcmVzb2x2ZURlZiIsImF0dHJpYnV0ZXMiLCJfc2V0QXR0ciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJhdHRyaWJ1dGVOYW1lIiwib2JzZXJ2ZSIsImlzQXN5bmMiLCJzdHlsZXMiLCJudW1iZXJQcm9wcyIsIl9hcHBseVN0eWxlcyIsImFzeW5jRGVmIiwiZGVjbGFyZWRQcm9wS2V5cyIsIl9zZXRQcm9wIiwiX2dldFByb3AiLCJnZXRBdHRyaWJ1dGUiLCJzaG91bGRSZWZsZWN0Iiwic2hvdWxkVXBkYXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZGlzcGF0Y2giLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJob3N0IiwiY3NzIiwidXNlQ3NzTW9kdWxlIiwibW9kIiwidXNlQ3NzVmFycyIsInVwZGF0ZVRlbGVwb3J0cyIsInZhcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0VmFyc09uTm9kZSIsInNldFZhcnMiLCJzZXRWYXJzT25WTm9kZSIsIm9iIiwiY2hpbGRMaXN0IiwiZGlzY29ubmVjdCIsIlRyYW5zaXRpb24iLCJyZXNvbHZlVHJhbnNpdGlvblByb3BzIiwiRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsImR1cmF0aW9uIiwiZW50ZXJGcm9tQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYXBwZWFyRnJvbUNsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwibGVhdmVGcm9tQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsImhhc0V4cGxpY2l0Q2FsbGJhY2siLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwiZmluaXNoTGVhdmUiLCJfaXNMZWF2aW5nIiwibWFrZUVudGVySG9vayIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImZvcmNlUmVmbG93IiwiY2xzIiwiY2xhc3NMaXN0IiwiX3Z0YyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImVuZElkIiwiZXhwZWN0ZWRUeXBlIiwiZXhwbGljaXRUaW1lb3V0IiwiX2VuZElkIiwicmVzb2x2ZUlmTm90U3RhbGUiLCJwcm9wQ291bnQiLCJnZXRUcmFuc2l0aW9uSW5mbyIsImVuZEV2ZW50IiwiZW5kZWQiLCJvbkVuZCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRTdHlsZVByb3BlcnRpZXMiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJ0b01zIiwiYm9keSIsIm9mZnNldEhlaWdodCIsInBvc2l0aW9uTWFwIiwibmV3UG9zaXRpb25NYXAiLCJUcmFuc2l0aW9uR3JvdXBJbXBsIiwibW92ZUNsYXNzIiwiZGlzcGxheSIsImhhc0NTU1RyYW5zZm9ybSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJtb3ZlZENoaWxkcmVuIiwiYXBwbHlUcmFuc2xhdGlvbiIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJjc3NUcmFuc2l0aW9uUHJvcHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJUcmFuc2l0aW9uR3JvdXAiLCJvbGRQb3MiLCJuZXdQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsImdldE1vZGVsQXNzaWduZXIiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpbmciLCJvbkNvbXBvc2l0aW9uRW5kIiwiRXZlbnQiLCJ2TW9kZWxUZXh0IiwiX2Fzc2lnbiIsImNhc3RUb051bWJlciIsImRvbVZhbHVlIiwiYWN0aXZlRWxlbWVudCIsInZNb2RlbENoZWNrYm94IiwibW9kZWxWYWx1ZSIsIl9tb2RlbFZhbHVlIiwiZWxlbWVudFZhbHVlIiwiZ2V0VmFsdWUiLCJjaGVja2VkIiwiZm91bmQiLCJmaWx0ZXJlZCIsImdldENoZWNrYm94VmFsdWUiLCJzZXRDaGVja2VkIiwidk1vZGVsUmFkaW8iLCJ2TW9kZWxTZWxlY3QiLCJpc1NldE1vZGVsIiwic2VsZWN0ZWRWYWwiLCJzZWxlY3RlZCIsInNldFNlbGVjdGVkIiwiX2JpbmRpbmciLCJpc011bHRpcGxlIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJzZWxlY3RlZEluZGV4Iiwidk1vZGVsRHluYW1pYyIsImNhbGxNb2RlbEhvb2siLCJyZXNvbHZlRHluYW1pY01vZGVsIiwic3lzdGVtTW9kaWZpZXJzIiwibW9kaWZpZXJHdWFyZHMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50VGFyZ2V0IiwiY3RybCIsImN0cmxLZXkiLCJzaGlmdCIsInNoaWZ0S2V5IiwiYWx0IiwiYWx0S2V5IiwibWV0YSIsIm1ldGFLZXkiLCJidXR0b24iLCJyaWdodCIsImV4YWN0Iiwid2l0aE1vZGlmaWVycyIsImd1YXJkIiwia2V5TmFtZXMiLCJlc2MiLCJzcGFjZSIsInVwIiwiZG93biIsIndpdGhLZXlzIiwiZXZlbnRLZXkiLCJ2U2hvdyIsIl92b2QiLCJzZXREaXNwbGF5IiwicmVuZGVyZXJPcHRpb25zIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJqb2luIiwiY2xhc3NOYW1lIiwicGF0Y2hDbGFzcyIsImlzQ3NzU3RyaW5nIiwiY3VycmVudERpc3BsYXkiLCJwYXRjaFN0eWxlIiwic2hvdWxkU2V0QXNQcm9wIiwibmVlZFJlbW92ZSIsInBhdGNoRE9NUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJpc0Jvb2xlYW4iLCJwYXRjaEF0dHIiLCJlbmFibGVkSHlkcmF0aW9uIiwiZW5zdXJlUmVuZGVyZXIiLCJlbnN1cmVIeWRyYXRpb25SZW5kZXJlciIsImNvbnRhaW5lck9yU2VsZWN0b3IiLCJub3JtYWxpemVDb250YWluZXIiLCJFbGVtZW50IiwiY3JlYXRlU1NSQXBwIiwic3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQiLCJpbml0RGlyZWN0aXZlc0ZvclNTUiIsImdldFNTUlByb3BzIiwibW9kZWxUb1VzZSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImNvdW50IiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwibm9uY2UiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInN0eWxlU2hlZXQiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImFwcGx5VG9UYWciLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX3MiLCJfZSIsIl9hcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsImNvbnN0cnVjdG9yIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImFycjIiLCJfaXRlbSIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwic2ZjIiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl9ob2lzdGVkXzUiLCJmb3IiLCJfaG9pc3RlZF82IiwiX2hvaXN0ZWRfNyIsIl9ob2lzdGVkXzgiLCJfaG9pc3RlZF85IiwiX2hvaXN0ZWRfMTAiLCJfaG9pc3RlZF8xMSIsIl9ob2lzdGVkXzEyIiwiX2hvaXN0ZWRfMTMiLCJfaG9pc3RlZF8xNCIsIl9ob2lzdGVkXzE1IiwiX2hvaXN0ZWRfMTYiLCJocmVmIiwiX19wcm9wcyIsImhhc2hJbnB1dCIsImVuY29kZWRIYXNoIiwiaGFzaCIsImJsdXJoYXNoVmFsaWQiLCJpc0JsdXJoYXNoVmFsaWQiLCJfY2FjaGUiLCJvbkNoYW5nZSIsIiRldmVudCIsImVycm9yUmVhc29uIiwicHVuY2giLCJsYWJlbCIsInN0ZXAiLCJvbklucHV0IiwiZXYiLCJCbHVyaGFzaENhbnZhcyIsImhlaWdodCIsIndpZHRoIiwicmVzb2x1dGlvblgiLCJyZXNvbHV0aW9uWSIsImNhbnZhc1N0eWxlIiwicG9zaXRpb24iLCJib3R0b20iLCJjb21wdXRlZFN0eWxlIiwiYmx1cmhhc2giLCJoYW5kbGVSZWYiLCJjYW52YXMiLCJkcmF3IiwicGl4ZWxzIiwiZGVjb2RlIiwiaW1hZ2VEYXRhIiwiY3JlYXRlSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiX3dpdGhTY29wZUlkIiwiY29tcG9uZW50WSIsImNvbXBvbmVudFgiLCJyZXR1cm5FbmNvZGVWYWx1ZSIsImVuY29kZSIsImhhbmRsZUZpbGVDaGFuZ2UiLCJhc3luYyIsImZpbGUiLCJpbWFnZVVybCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImltZyIsInNyYyIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsImxvYWRJbWFnZSIsImNsYW1wU2l6ZSIsInJvdW5kIiwiaW1hZ2UiLCJkcmF3SW1hZ2UiLCJnZXRJbWFnZURhdGEiLCJzaG93VGV4dCIsImlubmVyQ2xhc3MiLCJvbkNoYW5nZUlucHV0RmlsZSIsInNpbmdsZSIsImZpbGVzIiwiY2xhc3NlcyIsImFjY2VwdCIsInJlc29sdXRpb24iLCJCbHVyaGFzaCIsInEiLCJ4IiwiZmxvb3IiLCJwb3ciLCJ0cnVuYyIsIk0iLCJGIiwiYWJzIiwibWVzc2FnZSIsIkMiLCJOIiwieiIsIkwiLCJzdWJzdHJpbmciLCJVaW50OENsYW1wZWRBcnJheSIsInkiLCJCIiwiUiIsIlAiLCJHIiwiY29zIiwiUEkiLCJUIiwiViIsIkkiLCJFIiwiRCIsImciLCJTIiwiSCIsIl9fZXhwb3J0c19fIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJsb2NhbHMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENB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ZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzMyk7XG4iLCIvKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKiBJTVBPUlRBTlQ6IGFsbCBjYWxscyBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgcHJlZml4ZWQgd2l0aFxuICogXFwvXFwqI1xcX1xcX1BVUkVcXF9cXF9cXCpcXC9cbiAqIFNvIHRoYXQgcm9sbHVwIGNhbiB0cmVlLXNoYWtlIHRoZW0gaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBtYWtlTWFwKHN0ciwgZXhwZWN0c0xvd2VyQ2FzZSkge1xuICAgIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3QgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZSA/IHZhbCA9PiAhIW1hcFt2YWwudG9Mb3dlckNhc2UoKV0gOiB2YWwgPT4gISFtYXBbdmFsXTtcbn1cblxuLyoqXG4gKiBkZXYgb25seSBmbGFnIC0+IG5hbWUgbWFwcGluZ1xuICovXG5jb25zdCBQYXRjaEZsYWdOYW1lcyA9IHtcbiAgICBbMSAvKiBQYXRjaEZsYWdzLlRFWFQgKi9dOiBgVEVYVGAsXG4gICAgWzIgLyogUGF0Y2hGbGFncy5DTEFTUyAqL106IGBDTEFTU2AsXG4gICAgWzQgLyogUGF0Y2hGbGFncy5TVFlMRSAqL106IGBTVFlMRWAsXG4gICAgWzggLyogUGF0Y2hGbGFncy5QUk9QUyAqL106IGBQUk9QU2AsXG4gICAgWzE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqL106IGBGVUxMX1BST1BTYCxcbiAgICBbMzIgLyogUGF0Y2hGbGFncy5IWURSQVRFX0VWRU5UUyAqL106IGBIWURSQVRFX0VWRU5UU2AsXG4gICAgWzY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovXTogYFNUQUJMRV9GUkFHTUVOVGAsXG4gICAgWzEyOCAvKiBQYXRjaEZsYWdzLktFWUVEX0ZSQUdNRU5UICovXTogYEtFWUVEX0ZSQUdNRU5UYCxcbiAgICBbMjU2IC8qIFBhdGNoRmxhZ3MuVU5LRVlFRF9GUkFHTUVOVCAqL106IGBVTktFWUVEX0ZSQUdNRU5UYCxcbiAgICBbNTEyIC8qIFBhdGNoRmxhZ3MuTkVFRF9QQVRDSCAqL106IGBORUVEX1BBVENIYCxcbiAgICBbMTAyNCAvKiBQYXRjaEZsYWdzLkRZTkFNSUNfU0xPVFMgKi9dOiBgRFlOQU1JQ19TTE9UU2AsXG4gICAgWzIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqL106IGBERVZfUk9PVF9GUkFHTUVOVGAsXG4gICAgWy0xIC8qIFBhdGNoRmxhZ3MuSE9JU1RFRCAqL106IGBIT0lTVEVEYCxcbiAgICBbLTIgLyogUGF0Y2hGbGFncy5CQUlMICovXTogYEJBSUxgXG59O1xuXG4vKipcbiAqIERldiBvbmx5XG4gKi9cbmNvbnN0IHNsb3RGbGFnc1RleHQgPSB7XG4gICAgWzEgLyogU2xvdEZsYWdzLlNUQUJMRSAqL106ICdTVEFCTEUnLFxuICAgIFsyIC8qIFNsb3RGbGFncy5EWU5BTUlDICovXTogJ0RZTkFNSUMnLFxuICAgIFszIC8qIFNsb3RGbGFncy5GT1JXQVJERUQgKi9dOiAnRk9SV0FSREVEJ1xufTtcblxuY29uc3QgR0xPQkFMU19XSElURV9MSVNURUQgPSAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTixwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSwnICtcbiAgICAnZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSwnICtcbiAgICAnT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnQnO1xuY29uc3QgaXNHbG9iYWxseVdoaXRlbGlzdGVkID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEdMT0JBTFNfV0hJVEVfTElTVEVEKTtcblxuY29uc3QgcmFuZ2UgPSAyO1xuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUoc291cmNlLCBzdGFydCA9IDAsIGVuZCA9IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAvLyBTcGxpdCB0aGUgY29udGVudCBpbnRvIGluZGl2aWR1YWwgbGluZXMgYnV0IGNhcHR1cmUgdGhlIG5ld2xpbmUgc2VxdWVuY2VcbiAgICAvLyB0aGF0IHNlcGFyYXRlZCBlYWNoIGxpbmUuIFRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2UgdGhlIGFjdHVhbCBzZXF1ZW5jZSBpc1xuICAgIC8vIG5lZWRlZCB0byBwcm9wZXJseSB0YWtlIGludG8gYWNjb3VudCB0aGUgZnVsbCBsaW5lIGxlbmd0aCBmb3Igb2Zmc2V0XG4gICAgLy8gY29tcGFyaXNvblxuICAgIGxldCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvKFxccj9cXG4pLyk7XG4gICAgLy8gU2VwYXJhdGUgdGhlIGxpbmVzIGFuZCBuZXdsaW5lIHNlcXVlbmNlcyBpbnRvIHNlcGFyYXRlIGFycmF5cyBmb3IgZWFzaWVyIHJlZmVyZW5jaW5nXG4gICAgY29uc3QgbmV3bGluZVNlcXVlbmNlcyA9IGxpbmVzLmZpbHRlcigoXywgaWR4KSA9PiBpZHggJSAyID09PSAxKTtcbiAgICBsaW5lcyA9IGxpbmVzLmZpbHRlcigoXywgaWR4KSA9PiBpZHggJSAyID09PSAwKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY291bnQgKz1cbiAgICAgICAgICAgIGxpbmVzW2ldLmxlbmd0aCArXG4gICAgICAgICAgICAgICAgKChuZXdsaW5lU2VxdWVuY2VzW2ldICYmIG5ld2xpbmVTZXF1ZW5jZXNbaV0ubGVuZ3RoKSB8fCAwKTtcbiAgICAgICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gaiArIDE7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goYCR7bGluZX0keycgJy5yZXBlYXQoTWF0aC5tYXgoMyAtIFN0cmluZyhsaW5lKS5sZW5ndGgsIDApKX18ICAke2xpbmVzW2pdfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZVNlcUxlbmd0aCA9IChuZXdsaW5lU2VxdWVuY2VzW2pdICYmIG5ld2xpbmVTZXF1ZW5jZXNbal0ubGVuZ3RoKSB8fCAwO1xuICAgICAgICAgICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gKGxpbmVMZW5ndGggKyBuZXdMaW5lU2VxTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KDEsIGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnICcucmVwZWF0KHBhZCkgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICdeJy5yZXBlYXQobGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcy5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUodmFsdWUpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgcmVzID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBpc1N0cmluZyhpdGVtKVxuICAgICAgICAgICAgICAgID8gcGFyc2VTdHJpbmdTdHlsZShpdGVtKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplU3R5bGUoaXRlbSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVkW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuY29uc3QgbGlzdERlbGltaXRlclJFID0gLzsoPyFbXihdKlxcKSkvZztcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOihbXl0rKS87XG5jb25zdCBzdHlsZUNvbW1lbnRSRSA9IC9cXC9cXCouKj9cXCpcXC8vZ3M7XG5mdW5jdGlvbiBwYXJzZVN0cmluZ1N0eWxlKGNzc1RleHQpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBjc3NUZXh0XG4gICAgICAgIC5yZXBsYWNlKHN0eWxlQ29tbWVudFJFLCAnJylcbiAgICAgICAgLnNwbGl0KGxpc3REZWxpbWl0ZXJSRSlcbiAgICAgICAgLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBjb25zdCB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyUkUpO1xuICAgICAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0eWxlKHN0eWxlcykge1xuICAgIGxldCByZXQgPSAnJztcbiAgICBpZiAoIXN0eWxlcyB8fCBpc1N0cmluZyhzdHlsZXMpKSB7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0ga2V5LnN0YXJ0c1dpdGgoYC0tYCkgPyBrZXkgOiBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHJlbmRlciB2YWxpZCB2YWx1ZXNcbiAgICAgICAgICAgIHJldCArPSBgJHtub3JtYWxpemVkS2V5fToke3ZhbHVlfTtgO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzcyh2YWx1ZSkge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJlcyA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplQ2xhc3ModmFsdWVbaV0pO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICByZXMgKz0gbm9ybWFsaXplZCArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICByZXMgKz0gbmFtZSArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzLnRyaW0oKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzKHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcylcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XG4gICAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcbiAgICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgfVxuICAgIGlmIChzdHlsZSkge1xuICAgICAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzO1xufVxuXG4vLyBUaGVzZSB0YWcgY29uZmlncyBhcmUgc2hhcmVkIGJldHdlZW4gY29tcGlsZXItZG9tIGFuZCBydW50aW1lLWRvbSwgc28gdGhleVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50XG5jb25zdCBIVE1MX1RBR1MgPSAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlciwnICtcbiAgICAnaGVhZGVyLGhncm91cCxoMSxoMixoMyxoNCxoNSxoNixuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbiwnICtcbiAgICAnZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsJyArXG4gICAgJ2RhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLCcgK1xuICAgICd0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLCcgK1xuICAgICdjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsJyArXG4gICAgJ3RoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCwnICtcbiAgICAnb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSwnICtcbiAgICAnc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCc7XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvRWxlbWVudFxuY29uc3QgU1ZHX1RBR1MgPSAnc3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLCcgK1xuICAgICdkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLCcgK1xuICAgICdmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLCcgK1xuICAgICdmZURpc3RhbnRMaWdodCxmZURyb3BTaGFkb3csZmVGbG9vZCxmZUZ1bmNBLGZlRnVuY0IsZmVGdW5jRyxmZUZ1bmNSLCcgK1xuICAgICdmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LCcgK1xuICAgICdmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLCcgK1xuICAgICdmb3JlaWduT2JqZWN0LGcsaGF0Y2gsaGF0Y2hwYXRoLGltYWdlLGxpbmUsbGluZWFyR3JhZGllbnQsbWFya2VyLG1hc2ssJyArXG4gICAgJ21lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybiwnICtcbiAgICAncG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCwnICtcbiAgICAndGV4dCx0ZXh0UGF0aCx0aXRsZSx0c3Bhbix1bmtub3duLHVzZSx2aWV3JztcbmNvbnN0IFZPSURfVEFHUyA9ICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicic7XG4vKipcbiAqIENvbXBpbGVyIG9ubHkuXG4gKiBEbyBOT1QgdXNlIGluIHJ1bnRpbWUgY29kZSBwYXRocyB1bmxlc3MgYmVoaW5kIGAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylgIGZsYWcuXG4gKi9cbmNvbnN0IGlzSFRNTFRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChIVE1MX1RBR1MpO1xuLyoqXG4gKiBDb21waWxlciBvbmx5LlxuICogRG8gTk9UIHVzZSBpbiBydW50aW1lIGNvZGUgcGF0aHMgdW5sZXNzIGJlaGluZCBgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpYCBmbGFnLlxuICovXG5jb25zdCBpc1NWR1RhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChTVkdfVEFHUyk7XG4vKipcbiAqIENvbXBpbGVyIG9ubHkuXG4gKiBEbyBOT1QgdXNlIGluIHJ1bnRpbWUgY29kZSBwYXRocyB1bmxlc3MgYmVoaW5kIGAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylgIGZsYWcuXG4gKi9cbmNvbnN0IGlzVm9pZFRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChWT0lEX1RBR1MpO1xuXG4vKipcbiAqIE9uIHRoZSBjbGllbnQgd2Ugb25seSBuZWVkIHRvIG9mZmVyIHNwZWNpYWwgY2FzZXMgZm9yIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0XG4gKiBoYXZlIGRpZmZlcmVudCBuYW1lcyBmcm9tIHRoZWlyIGNvcnJlc3BvbmRpbmcgZG9tIHByb3BlcnRpZXM6XG4gKiAtIGl0ZW1zY29wZSAtPiBOL0FcbiAqIC0gYWxsb3dmdWxsc2NyZWVuIC0+IGFsbG93RnVsbHNjcmVlblxuICogLSBmb3Jtbm92YWxpZGF0ZSAtPiBmb3JtTm9WYWxpZGF0ZVxuICogLSBpc21hcCAtPiBpc01hcFxuICogLSBub21vZHVsZSAtPiBub01vZHVsZVxuICogLSBub3ZhbGlkYXRlIC0+IG5vVmFsaWRhdGVcbiAqIC0gcmVhZG9ubHkgLT4gcmVhZE9ubHlcbiAqL1xuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xuY29uc3QgaXNTcGVjaWFsQm9vbGVhbkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyk7XG4vKipcbiAqIFRoZSBmdWxsIGxpc3QgaXMgbmVlZGVkIGR1cmluZyBTU1IgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBpbml0aWFsIG1hcmt1cC5cbiAqL1xuY29uc3QgaXNCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzICtcbiAgICBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixgICtcbiAgICBgbG9vcCxvcGVuLHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxgICtcbiAgICBgY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGApO1xuLyoqXG4gKiBCb29sZWFuIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgb3IgJycuXG4gKiBlLmcuIGA8c2VsZWN0IG11bHRpcGxlPmAgY29tcGlsZXMgdG8gYHsgbXVsdGlwbGU6ICcnIH1gXG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlIHx8IHZhbHVlID09PSAnJztcbn1cbmNvbnN0IHVuc2FmZUF0dHJDaGFyUkUgPSAvWz4vPVwiJ1xcdTAwMDlcXHUwMDBhXFx1MDAwY1xcdTAwMjBdLztcbmNvbnN0IGF0dHJWYWxpZGF0aW9uQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGlzU1NSU2FmZUF0dHJOYW1lKG5hbWUpIHtcbiAgICBpZiAoYXR0clZhbGlkYXRpb25DYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXTtcbiAgICB9XG4gICAgY29uc3QgaXNVbnNhZmUgPSB1bnNhZmVBdHRyQ2hhclJFLnRlc3QobmFtZSk7XG4gICAgaWYgKGlzVW5zYWZlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYHVuc2FmZSBhdHRyaWJ1dGUgbmFtZTogJHtuYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gKGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV0gPSAhaXNVbnNhZmUpO1xufVxuY29uc3QgcHJvcHNUb0F0dHJNYXAgPSB7XG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcbn07XG4vKipcbiAqIEtub3duIGF0dHJpYnV0ZXMsIHRoaXMgaXMgdXNlZCBmb3Igc3RyaW5naWZpY2F0aW9uIG9mIHJ1bnRpbWUgc3RhdGljIG5vZGVzXG4gKiBzbyB0aGF0IHdlIGRvbid0IHN0cmluZ2lmeSBiaW5kaW5ncyB0aGF0IGNhbm5vdCBiZSBzZXQgZnJvbSBIVE1MLlxuICogRG9uJ3QgYWxzbyBmb3JnZXQgdG8gYWxsb3cgYGRhdGEtKmAgYW5kIGBhcmlhLSpgIVxuICogR2VuZXJhdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9BdHRyaWJ1dGVzXG4gKi9cbmNvbnN0IGlzS25vd25IdG1sQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgYWNjZXB0LGFjY2VwdC1jaGFyc2V0LGFjY2Vzc2tleSxhY3Rpb24sYWxpZ24sYWxsb3csYWx0LGFzeW5jLGAgK1xuICAgIGBhdXRvY2FwaXRhbGl6ZSxhdXRvY29tcGxldGUsYXV0b2ZvY3VzLGF1dG9wbGF5LGJhY2tncm91bmQsYmdjb2xvcixgICtcbiAgICBgYm9yZGVyLGJ1ZmZlcmVkLGNhcHR1cmUsY2hhbGxlbmdlLGNoYXJzZXQsY2hlY2tlZCxjaXRlLGNsYXNzLGNvZGUsYCArXG4gICAgYGNvZGViYXNlLGNvbG9yLGNvbHMsY29sc3Bhbixjb250ZW50LGNvbnRlbnRlZGl0YWJsZSxjb250ZXh0bWVudSxjb250cm9scyxgICtcbiAgICBgY29vcmRzLGNyb3Nzb3JpZ2luLGNzcCxkYXRhLGRhdGV0aW1lLGRlY29kaW5nLGRlZmF1bHQsZGVmZXIsZGlyLGRpcm5hbWUsYCArXG4gICAgYGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLGVudGVya2V5aGludCxmb3IsZm9ybSxgICtcbiAgICBgZm9ybWFjdGlvbixmb3JtZW5jdHlwZSxmb3JtbWV0aG9kLGZvcm1ub3ZhbGlkYXRlLGZvcm10YXJnZXQsaGVhZGVycyxgICtcbiAgICBgaGVpZ2h0LGhpZGRlbixoaWdoLGhyZWYsaHJlZmxhbmcsaHR0cC1lcXVpdixpY29uLGlkLGltcG9ydGFuY2UsaW50ZWdyaXR5LGAgK1xuICAgIGBpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsb2FkaW5nLGxpc3QsbG9vcCxsb3csYCArXG4gICAgYG1hbmlmZXN0LG1heCxtYXhsZW5ndGgsbWlubGVuZ3RoLG1lZGlhLG1pbixtdWx0aXBsZSxtdXRlZCxuYW1lLG5vdmFsaWRhdGUsYCArXG4gICAgYG9wZW4sb3B0aW11bSxwYXR0ZXJuLHBpbmcscGxhY2Vob2xkZXIscG9zdGVyLHByZWxvYWQscmFkaW9ncm91cCxyZWFkb25seSxgICtcbiAgICBgcmVmZXJyZXJwb2xpY3kscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LHNjb3BlLHNjb3BlZCxgICtcbiAgICBgc2VsZWN0ZWQsc2hhcGUsc2l6ZSxzaXplcyxzbG90LHNwYW4sc3BlbGxjaGVjayxzcmMsc3JjZG9jLHNyY2xhbmcsc3Jjc2V0LGAgK1xuICAgIGBzdGFydCxzdGVwLHN0eWxlLHN1bW1hcnksdGFiaW5kZXgsdGFyZ2V0LHRpdGxlLHRyYW5zbGF0ZSx0eXBlLHVzZW1hcCxgICtcbiAgICBgdmFsdWUsd2lkdGgsd3JhcGApO1xuLyoqXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlXG4gKi9cbmNvbnN0IGlzS25vd25TdmdBdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGB4bWxucyxhY2NlbnQtaGVpZ2h0LGFjY3VtdWxhdGUsYWRkaXRpdmUsYWxpZ25tZW50LWJhc2VsaW5lLGFscGhhYmV0aWMsYW1wbGl0dWRlLGAgK1xuICAgIGBhcmFiaWMtZm9ybSxhc2NlbnQsYXR0cmlidXRlTmFtZSxhdHRyaWJ1dGVUeXBlLGF6aW11dGgsYmFzZUZyZXF1ZW5jeSxgICtcbiAgICBgYmFzZWxpbmUtc2hpZnQsYmFzZVByb2ZpbGUsYmJveCxiZWdpbixiaWFzLGJ5LGNhbGNNb2RlLGNhcC1oZWlnaHQsY2xhc3MsYCArXG4gICAgYGNsaXAsY2xpcFBhdGhVbml0cyxjbGlwLXBhdGgsY2xpcC1ydWxlLGNvbG9yLGNvbG9yLWludGVycG9sYXRpb24sYCArXG4gICAgYGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyxjb2xvci1wcm9maWxlLGNvbG9yLXJlbmRlcmluZyxgICtcbiAgICBgY29udGVudFNjcmlwdFR5cGUsY29udGVudFN0eWxlVHlwZSxjcm9zc29yaWdpbixjdXJzb3IsY3gsY3ksZCxkZWNlbGVyYXRlLGAgK1xuICAgIGBkZXNjZW50LGRpZmZ1c2VDb25zdGFudCxkaXJlY3Rpb24sZGlzcGxheSxkaXZpc29yLGRvbWluYW50LWJhc2VsaW5lLGR1cixkeCxgICtcbiAgICBgZHksZWRnZU1vZGUsZWxldmF0aW9uLGVuYWJsZS1iYWNrZ3JvdW5kLGVuZCxleHBvbmVudCxmaWxsLGZpbGwtb3BhY2l0eSxgICtcbiAgICBgZmlsbC1ydWxlLGZpbHRlcixmaWx0ZXJSZXMsZmlsdGVyVW5pdHMsZmxvb2QtY29sb3IsZmxvb2Qtb3BhY2l0eSxgICtcbiAgICBgZm9udC1mYW1pbHksZm9udC1zaXplLGZvbnQtc2l6ZS1hZGp1c3QsZm9udC1zdHJldGNoLGZvbnQtc3R5bGUsYCArXG4gICAgYGZvbnQtdmFyaWFudCxmb250LXdlaWdodCxmb3JtYXQsZnJvbSxmcixmeCxmeSxnMSxnMixnbHlwaC1uYW1lLGAgK1xuICAgIGBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsLGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsLGdseXBoUmVmLGAgK1xuICAgIGBncmFkaWVudFRyYW5zZm9ybSxncmFkaWVudFVuaXRzLGhhbmdpbmcsaGVpZ2h0LGhyZWYsaHJlZmxhbmcsaG9yaXotYWR2LXgsYCArXG4gICAgYGhvcml6LW9yaWdpbi14LGlkLGlkZW9ncmFwaGljLGltYWdlLXJlbmRlcmluZyxpbixpbjIsaW50ZXJjZXB0LGssazEsazIsazMsYCArXG4gICAgYGs0LGtlcm5lbE1hdHJpeCxrZXJuZWxVbml0TGVuZ3RoLGtlcm5pbmcsa2V5UG9pbnRzLGtleVNwbGluZXMsa2V5VGltZXMsYCArXG4gICAgYGxhbmcsbGVuZ3RoQWRqdXN0LGxldHRlci1zcGFjaW5nLGxpZ2h0aW5nLWNvbG9yLGxpbWl0aW5nQ29uZUFuZ2xlLGxvY2FsLGAgK1xuICAgIGBtYXJrZXItZW5kLG1hcmtlci1taWQsbWFya2VyLXN0YXJ0LG1hcmtlckhlaWdodCxtYXJrZXJVbml0cyxtYXJrZXJXaWR0aCxgICtcbiAgICBgbWFzayxtYXNrQ29udGVudFVuaXRzLG1hc2tVbml0cyxtYXRoZW1hdGljYWwsbWF4LG1lZGlhLG1ldGhvZCxtaW4sbW9kZSxgICtcbiAgICBgbmFtZSxudW1PY3RhdmVzLG9mZnNldCxvcGFjaXR5LG9wZXJhdG9yLG9yZGVyLG9yaWVudCxvcmllbnRhdGlvbixvcmlnaW4sYCArXG4gICAgYG92ZXJmbG93LG92ZXJsaW5lLXBvc2l0aW9uLG92ZXJsaW5lLXRoaWNrbmVzcyxwYW5vc2UtMSxwYWludC1vcmRlcixwYXRoLGAgK1xuICAgIGBwYXRoTGVuZ3RoLHBhdHRlcm5Db250ZW50VW5pdHMscGF0dGVyblRyYW5zZm9ybSxwYXR0ZXJuVW5pdHMscGluZyxgICtcbiAgICBgcG9pbnRlci1ldmVudHMscG9pbnRzLHBvaW50c0F0WCxwb2ludHNBdFkscG9pbnRzQXRaLHByZXNlcnZlQWxwaGEsYCArXG4gICAgYHByZXNlcnZlQXNwZWN0UmF0aW8scHJpbWl0aXZlVW5pdHMscixyYWRpdXMscmVmZXJyZXJQb2xpY3kscmVmWCxyZWZZLHJlbCxgICtcbiAgICBgcmVuZGVyaW5nLWludGVudCxyZXBlYXRDb3VudCxyZXBlYXREdXIscmVxdWlyZWRFeHRlbnNpb25zLHJlcXVpcmVkRmVhdHVyZXMsYCArXG4gICAgYHJlc3RhcnQscmVzdWx0LHJvdGF0ZSxyeCxyeSxzY2FsZSxzZWVkLHNoYXBlLXJlbmRlcmluZyxzbG9wZSxzcGFjaW5nLGAgK1xuICAgIGBzcGVjdWxhckNvbnN0YW50LHNwZWN1bGFyRXhwb25lbnQsc3BlZWQsc3ByZWFkTWV0aG9kLHN0YXJ0T2Zmc2V0LGAgK1xuICAgIGBzdGREZXZpYXRpb24sc3RlbWgsc3RlbXYsc3RpdGNoVGlsZXMsc3RvcC1jb2xvcixzdG9wLW9wYWNpdHksYCArXG4gICAgYHN0cmlrZXRocm91Z2gtcG9zaXRpb24sc3RyaWtldGhyb3VnaC10aGlja25lc3Msc3RyaW5nLHN0cm9rZSxgICtcbiAgICBgc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxzdHJva2UtbGluZWNhcCxzdHJva2UtbGluZWpvaW4sYCArXG4gICAgYHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aCxzdHlsZSxzdXJmYWNlU2NhbGUsYCArXG4gICAgYHN5c3RlbUxhbmd1YWdlLHRhYmluZGV4LHRhYmxlVmFsdWVzLHRhcmdldCx0YXJnZXRYLHRhcmdldFksdGV4dC1hbmNob3IsYCArXG4gICAgYHRleHQtZGVjb3JhdGlvbix0ZXh0LXJlbmRlcmluZyx0ZXh0TGVuZ3RoLHRvLHRyYW5zZm9ybSx0cmFuc2Zvcm0tb3JpZ2luLGAgK1xuICAgIGB0eXBlLHUxLHUyLHVuZGVybGluZS1wb3NpdGlvbix1bmRlcmxpbmUtdGhpY2tuZXNzLHVuaWNvZGUsdW5pY29kZS1iaWRpLGAgK1xuICAgIGB1bmljb2RlLXJhbmdlLHVuaXRzLXBlci1lbSx2LWFscGhhYmV0aWMsdi1oYW5naW5nLHYtaWRlb2dyYXBoaWMsYCArXG4gICAgYHYtbWF0aGVtYXRpY2FsLHZhbHVlcyx2ZWN0b3ItZWZmZWN0LHZlcnNpb24sdmVydC1hZHYteSx2ZXJ0LW9yaWdpbi14LGAgK1xuICAgIGB2ZXJ0LW9yaWdpbi15LHZpZXdCb3gsdmlld1RhcmdldCx2aXNpYmlsaXR5LHdpZHRoLHdpZHRocyx3b3JkLXNwYWNpbmcsYCArXG4gICAgYHdyaXRpbmctbW9kZSx4LHgtaGVpZ2h0LHgxLHgyLHhDaGFubmVsU2VsZWN0b3IseGxpbms6YWN0dWF0ZSx4bGluazphcmNyb2xlLGAgK1xuICAgIGB4bGluazpocmVmLHhsaW5rOnJvbGUseGxpbms6c2hvdyx4bGluazp0aXRsZSx4bGluazp0eXBlLHhtbDpiYXNlLHhtbDpsYW5nLGAgK1xuICAgIGB4bWw6c3BhY2UseSx5MSx5Mix5Q2hhbm5lbFNlbGVjdG9yLHosem9vbUFuZFBhbmApO1xuXG5jb25zdCBlc2NhcGVSRSA9IC9bXCInJjw+XS87XG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xuICAgIGNvbnN0IHN0ciA9ICcnICsgc3RyaW5nO1xuICAgIGNvbnN0IG1hdGNoID0gZXNjYXBlUkUuZXhlYyhzdHIpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBsZXQgZXNjYXBlZDtcbiAgICBsZXQgaW5kZXg7XG4gICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgZm9yIChpbmRleCA9IG1hdGNoLmluZGV4OyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcbiAgICAgICAgICAgIGNhc2UgMzQ6IC8vIFwiXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmcXVvdDsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzODogLy8gJlxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmFtcDsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOTogLy8gJ1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJiMzOTsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2MDogLy8gPFxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmx0Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDYyOiAvLyA+XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmZ3Q7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGh0bWwgKz0gc3RyLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgaHRtbCArPSBlc2NhcGVkO1xuICAgIH1cbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSBpbmRleCA/IGh0bWwgKyBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCkgOiBodG1sO1xufVxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1Mi9zeW50YXguaHRtbCNjb21tZW50c1xuY29uc3QgY29tbWVudFN0cmlwUkUgPSAvXi0/Pnw8IS0tfC0tPnwtLSE+fDwhLSQvZztcbmZ1bmN0aW9uIGVzY2FwZUh0bWxDb21tZW50KHNyYykge1xuICAgIHJldHVybiBzcmMucmVwbGFjZShjb21tZW50U3RyaXBSRSwgJycpO1xufVxuXG5mdW5jdGlvbiBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgZXF1YWwgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSAwOyBlcXVhbCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBlcXVhbCA9IGxvb3NlRXF1YWwoYVtpXSwgYltpXSk7XG4gICAgfVxuICAgIHJldHVybiBlcXVhbDtcbn1cbmZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgYVZhbGlkVHlwZSA9IGlzRGF0ZShhKTtcbiAgICBsZXQgYlZhbGlkVHlwZSA9IGlzRGF0ZShiKTtcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcbiAgICB9XG4gICAgYVZhbGlkVHlwZSA9IGlzU3ltYm9sKGEpO1xuICAgIGJWYWxpZFR5cGUgPSBpc1N5bWJvbChiKTtcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiO1xuICAgIH1cbiAgICBhVmFsaWRUeXBlID0gaXNBcnJheShhKTtcbiAgICBiVmFsaWRUeXBlID0gaXNBcnJheShiKTtcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikgOiBmYWxzZTtcbiAgICB9XG4gICAgYVZhbGlkVHlwZSA9IGlzT2JqZWN0KGEpO1xuICAgIGJWYWxpZFR5cGUgPSBpc09iamVjdChiKTtcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGhpcyBpZiB3aWxsIHByb2JhYmx5IG5ldmVyIGJlIGNhbGxlZCAqL1xuICAgICAgICBpZiAoIWFWYWxpZFR5cGUgfHwgIWJWYWxpZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBiS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYikubGVuZ3RoO1xuICAgICAgICBpZiAoYUtleXNDb3VudCAhPT0gYktleXNDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGFIYXNLZXkgPSBhLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICAgICAgICBjb25zdCBiSGFzS2V5ID0gYi5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgICAgICAgaWYgKChhSGFzS2V5ICYmICFiSGFzS2V5KSB8fFxuICAgICAgICAgICAgICAgICghYUhhc0tleSAmJiBiSGFzS2V5KSB8fFxuICAgICAgICAgICAgICAgICFsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5mdW5jdGlvbiBsb29zZUluZGV4T2YoYXJyLCB2YWwpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChpdGVtID0+IGxvb3NlRXF1YWwoaXRlbSwgdmFsKSk7XG59XG5cbi8qKlxuICogRm9yIGNvbnZlcnRpbmcge3sgaW50ZXJwb2xhdGlvbiB9fSB2YWx1ZXMgdG8gZGlzcGxheWVkIHN0cmluZ3MuXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB0b0Rpc3BsYXlTdHJpbmcgPSAodmFsKSA9PiB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB2YWwgPT0gbnVsbFxuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiBpc0FycmF5KHZhbCkgfHxcbiAgICAgICAgICAgICAgICAoaXNPYmplY3QodmFsKSAmJlxuICAgICAgICAgICAgICAgICAgICAodmFsLnRvU3RyaW5nID09PSBvYmplY3RUb1N0cmluZyB8fCAhaXNGdW5jdGlvbih2YWwudG9TdHJpbmcpKSlcbiAgICAgICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIDIpXG4gICAgICAgICAgICAgICAgOiBTdHJpbmcodmFsKTtcbn07XG5jb25zdCByZXBsYWNlciA9IChfa2V5LCB2YWwpID0+IHtcbiAgICAvLyBjYW4ndCB1c2UgaXNSZWYgaGVyZSBzaW5jZSBAdnVlL3NoYXJlZCBoYXMgbm8gZGVwc1xuICAgIGlmICh2YWwgJiYgdmFsLl9fdl9pc1JlZikge1xuICAgICAgICByZXR1cm4gcmVwbGFjZXIoX2tleSwgdmFsLnZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNNYXAodmFsKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW2BNYXAoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwuZW50cmllcygpXS5yZWR1Y2UoKGVudHJpZXMsIFtrZXksIHZhbF0pID0+IHtcbiAgICAgICAgICAgICAgICBlbnRyaWVzW2Ake2tleX0gPT5gXSA9IHZhbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cmllcztcbiAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1NldCh2YWwpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbYFNldCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC52YWx1ZXMoKV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsKSAmJiAhaXNBcnJheSh2YWwpICYmICFpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufTtcblxuY29uc3QgRU1QVFlfT0JKID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgPyBPYmplY3QuZnJlZXplKHt9KVxuICAgIDoge307XG5jb25zdCBFTVBUWV9BUlIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBPYmplY3QuZnJlZXplKFtdKSA6IFtdO1xuY29uc3QgTk9PUCA9ICgpID0+IHsgfTtcbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xuY29uc3QgTk8gPSAoKSA9PiBmYWxzZTtcbmNvbnN0IG9uUkUgPSAvXm9uW15hLXpdLztcbmNvbnN0IGlzT24gPSAoa2V5KSA9PiBvblJFLnRlc3Qoa2V5KTtcbmNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKCdvblVwZGF0ZTonKTtcbmNvbnN0IGV4dGVuZCA9IE9iamVjdC5hc3NpZ247XG5jb25zdCByZW1vdmUgPSAoYXJyLCBlbCkgPT4ge1xuICAgIGNvbnN0IGkgPSBhcnIuaW5kZXhPZihlbCk7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xuICAgIH1cbn07XG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5jb25zdCBoYXNPd24gPSAodmFsLCBrZXkpID0+IGhhc093blByb3BlcnR5LmNhbGwodmFsLCBrZXkpO1xuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5jb25zdCBpc01hcCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBNYXBdJztcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IFNldF0nO1xuY29uc3QgaXNEYXRlID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbmNvbnN0IGlzUmVnRXhwID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xuY29uc3QgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJztcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuY29uc3QgaXNQcm9taXNlID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gICAgLy8gZXh0cmFjdCBcIlJhd1R5cGVcIiBmcm9tIHN0cmluZ3MgbGlrZSBcIltvYmplY3QgUmF3VHlwZV1cIlxuICAgIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuY29uc3QgaXNJbnRlZ2VyS2V5ID0gKGtleSkgPT4gaXNTdHJpbmcoa2V5KSAmJlxuICAgIGtleSAhPT0gJ05hTicgJiZcbiAgICBrZXlbMF0gIT09ICctJyAmJlxuICAgICcnICsgcGFyc2VJbnQoa2V5LCAxMCkgPT09IGtleTtcbmNvbnN0IGlzUmVzZXJ2ZWRQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFxuLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuJyxrZXkscmVmLHJlZl9mb3IscmVmX2tleSwnICtcbiAgICAnb25Wbm9kZUJlZm9yZU1vdW50LG9uVm5vZGVNb3VudGVkLCcgK1xuICAgICdvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLCcgK1xuICAgICdvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkJyk7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ2JpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0LG1lbW8nKTtcbmNvbnN0IGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcbiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XG4gICAgICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XG4gICAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgICB9KTtcbn07XG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJykpO1xufSk7XG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGApO1xuLy8gY29tcGFyZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQsIGFjY291bnRpbmcgZm9yIE5hTi5cbmNvbnN0IGhhc0NoYW5nZWQgPSAodmFsdWUsIG9sZFZhbHVlKSA9PiAhT2JqZWN0LmlzKHZhbHVlLCBvbGRWYWx1ZSk7XG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIGFyZykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuc1tpXShhcmcpO1xuICAgIH1cbn07XG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlXG4gICAgfSk7XG59O1xuLyoqXG4gKiBcIjEyMy1mb29cIiB3aWxsIGJlIHBhcnNlZCB0byAxMjNcbiAqIFRoaXMgaXMgdXNlZCBmb3IgdGhlIC5udW1iZXIgbW9kaWZpZXIgaW4gdi1tb2RlbFxuICovXG5jb25zdCBsb29zZVRvTnVtYmVyID0gKHZhbCkgPT4ge1xuICAgIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogbjtcbn07XG4vKipcbiAqIE9ubHkgY29uZXJjZXMgbnVtYmVyLWxpa2Ugc3RyaW5nc1xuICogXCIxMjMtZm9vXCIgd2lsbCBiZSByZXR1cm5lZCBhcy1pc1xuICovXG5jb25zdCB0b051bWJlciA9ICh2YWwpID0+IHtcbiAgICBjb25zdCBuID0gaXNTdHJpbmcodmFsKSA/IE51bWJlcih2YWwpIDogTmFOO1xuICAgIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XG59O1xubGV0IF9nbG9iYWxUaGlzO1xuY29uc3QgZ2V0R2xvYmFsVGhpcyA9ICgpID0+IHtcbiAgICByZXR1cm4gKF9nbG9iYWxUaGlzIHx8XG4gICAgICAgIChfZ2xvYmFsVGhpcyA9XG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICA/IHNlbGZcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pKTtcbn07XG5jb25zdCBpZGVudFJFID0gL15bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVtfJGEtekEtWjAtOVxceEEwLVxcdUZGRkZdKiQvO1xuZnVuY3Rpb24gZ2VuUHJvcHNBY2Nlc3NFeHAobmFtZSkge1xuICAgIHJldHVybiBpZGVudFJFLnRlc3QobmFtZSlcbiAgICAgICAgPyBgX19wcm9wcy4ke25hbWV9YFxuICAgICAgICA6IGBfX3Byb3BzWyR7SlNPTi5zdHJpbmdpZnkobmFtZSl9XWA7XG59XG5cbmV4cG9ydCB7IEVNUFRZX0FSUiwgRU1QVFlfT0JKLCBOTywgTk9PUCwgUGF0Y2hGbGFnTmFtZXMsIGNhbWVsaXplLCBjYXBpdGFsaXplLCBkZWYsIGVzY2FwZUh0bWwsIGVzY2FwZUh0bWxDb21tZW50LCBleHRlbmQsIGdlblByb3BzQWNjZXNzRXhwLCBnZW5lcmF0ZUNvZGVGcmFtZSwgZ2V0R2xvYmFsVGhpcywgaGFzQ2hhbmdlZCwgaGFzT3duLCBoeXBoZW5hdGUsIGluY2x1ZGVCb29sZWFuQXR0ciwgaW52b2tlQXJyYXlGbnMsIGlzQXJyYXksIGlzQm9vbGVhbkF0dHIsIGlzQnVpbHRJbkRpcmVjdGl2ZSwgaXNEYXRlLCBpc0Z1bmN0aW9uLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGlzSFRNTFRhZywgaXNJbnRlZ2VyS2V5LCBpc0tub3duSHRtbEF0dHIsIGlzS25vd25TdmdBdHRyLCBpc01hcCwgaXNNb2RlbExpc3RlbmVyLCBpc09iamVjdCwgaXNPbiwgaXNQbGFpbk9iamVjdCwgaXNQcm9taXNlLCBpc1JlZ0V4cCwgaXNSZXNlcnZlZFByb3AsIGlzU1NSU2FmZUF0dHJOYW1lLCBpc1NWR1RhZywgaXNTZXQsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVm9pZFRhZywgbG9vc2VFcXVhbCwgbG9vc2VJbmRleE9mLCBsb29zZVRvTnVtYmVyLCBtYWtlTWFwLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplUHJvcHMsIG5vcm1hbGl6ZVN0eWxlLCBvYmplY3RUb1N0cmluZywgcGFyc2VTdHJpbmdTdHlsZSwgcHJvcHNUb0F0dHJNYXAsIHJlbW92ZSwgc2xvdEZsYWdzVGV4dCwgc3RyaW5naWZ5U3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgdG9SYXdUeXBlLCB0b1R5cGVTdHJpbmcgfTtcbiIsImltcG9ydCB7IGV4dGVuZCwgaXNBcnJheSwgaXNNYXAsIGlzSW50ZWdlcktleSwgaGFzT3duLCBpc1N5bWJvbCwgaXNPYmplY3QsIGhhc0NoYW5nZWQsIG1ha2VNYXAsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgZGVmLCBpc0Z1bmN0aW9uLCBOT09QIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xuICAgIGNvbnNvbGUud2FybihgW1Z1ZSB3YXJuXSAke21zZ31gLCAuLi5hcmdzKTtcbn1cblxubGV0IGFjdGl2ZUVmZmVjdFNjb3BlO1xuY2xhc3MgRWZmZWN0U2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKGRldGFjaGVkID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5kZXRhY2hlZCA9IGRldGFjaGVkO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGVhbnVwcyA9IFtdO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgICBpZiAoIWRldGFjaGVkICYmIGFjdGl2ZUVmZmVjdFNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID1cbiAgICAgICAgICAgICAgICAoYWN0aXZlRWZmZWN0U2NvcGUuc2NvcGVzIHx8IChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgPSBbXSkpLnB1c2godGhpcykgLSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHJ1bihmbikge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RWZmZWN0U2NvcGUgPSBhY3RpdmVFZmZlY3RTY29wZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSBjdXJyZW50RWZmZWN0U2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKGBjYW5ub3QgcnVuIGFuIGluYWN0aXZlIGVmZmVjdCBzY29wZS5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBub24tZGV0YWNoZWQgc2NvcGVzXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgb24oKSB7XG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG9mZigpIHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzLnBhcmVudDtcbiAgICB9XG4gICAgc3RvcChmcm9tUGFyZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGxldCBpLCBsO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdHNbaV0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuY2xlYW51cHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwc1tpXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjb3Blc1tpXS5zdG9wKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5lc3RlZCBzY29wZSwgZGVyZWZlcmVuY2UgZnJvbSBwYXJlbnQgdG8gYXZvaWQgbWVtb3J5IGxlYWtzXG4gICAgICAgICAgICBpZiAoIXRoaXMuZGV0YWNoZWQgJiYgdGhpcy5wYXJlbnQgJiYgIWZyb21QYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBvcHRpbWl6ZWQgTygxKSByZW1vdmFsXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAmJiBsYXN0ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnNjb3Blc1t0aGlzLmluZGV4XSA9IGxhc3Q7XG4gICAgICAgICAgICAgICAgICAgIGxhc3QuaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlZmZlY3RTY29wZShkZXRhY2hlZCkge1xuICAgIHJldHVybiBuZXcgRWZmZWN0U2NvcGUoZGV0YWNoZWQpO1xufVxuZnVuY3Rpb24gcmVjb3JkRWZmZWN0U2NvcGUoZWZmZWN0LCBzY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlKSB7XG4gICAgaWYgKHNjb3BlICYmIHNjb3BlLmFjdGl2ZSkge1xuICAgICAgICBzY29wZS5lZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVmZmVjdFNjb3BlO1xufVxuZnVuY3Rpb24gb25TY29wZURpc3Bvc2UoZm4pIHtcbiAgICBpZiAoYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUuY2xlYW51cHMucHVzaChmbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBvblNjb3BlRGlzcG9zZSgpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBlZmZlY3Qgc2NvcGVgICtcbiAgICAgICAgICAgIGAgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLmApO1xuICAgIH1cbn1cblxuY29uc3QgY3JlYXRlRGVwID0gKGVmZmVjdHMpID0+IHtcbiAgICBjb25zdCBkZXAgPSBuZXcgU2V0KGVmZmVjdHMpO1xuICAgIGRlcC53ID0gMDtcbiAgICBkZXAubiA9IDA7XG4gICAgcmV0dXJuIGRlcDtcbn07XG5jb25zdCB3YXNUcmFja2VkID0gKGRlcCkgPT4gKGRlcC53ICYgdHJhY2tPcEJpdCkgPiAwO1xuY29uc3QgbmV3VHJhY2tlZCA9IChkZXApID0+IChkZXAubiAmIHRyYWNrT3BCaXQpID4gMDtcbmNvbnN0IGluaXREZXBNYXJrZXJzID0gKHsgZGVwcyB9KSA9PiB7XG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwc1tpXS53IHw9IHRyYWNrT3BCaXQ7IC8vIHNldCB3YXMgdHJhY2tlZFxuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGZpbmFsaXplRGVwTWFya2VycyA9IChlZmZlY3QpID0+IHtcbiAgICBjb25zdCB7IGRlcHMgfSA9IGVmZmVjdDtcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICAgICAgbGV0IHB0ciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGVwID0gZGVwc1tpXTtcbiAgICAgICAgICAgIGlmICh3YXNUcmFja2VkKGRlcCkgJiYgIW5ld1RyYWNrZWQoZGVwKSkge1xuICAgICAgICAgICAgICAgIGRlcC5kZWxldGUoZWZmZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlcHNbcHRyKytdID0gZGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2xlYXIgYml0c1xuICAgICAgICAgICAgZGVwLncgJj0gfnRyYWNrT3BCaXQ7XG4gICAgICAgICAgICBkZXAubiAmPSB+dHJhY2tPcEJpdDtcbiAgICAgICAgfVxuICAgICAgICBkZXBzLmxlbmd0aCA9IHB0cjtcbiAgICB9XG59O1xuXG5jb25zdCB0YXJnZXRNYXAgPSBuZXcgV2Vha01hcCgpO1xuLy8gVGhlIG51bWJlciBvZiBlZmZlY3RzIGN1cnJlbnRseSBiZWluZyB0cmFja2VkIHJlY3Vyc2l2ZWx5LlxubGV0IGVmZmVjdFRyYWNrRGVwdGggPSAwO1xubGV0IHRyYWNrT3BCaXQgPSAxO1xuLyoqXG4gKiBUaGUgYml0d2lzZSB0cmFjayBtYXJrZXJzIHN1cHBvcnQgYXQgbW9zdCAzMCBsZXZlbHMgb2YgcmVjdXJzaW9uLlxuICogVGhpcyB2YWx1ZSBpcyBjaG9zZW4gdG8gZW5hYmxlIG1vZGVybiBKUyBlbmdpbmVzIHRvIHVzZSBhIFNNSSBvbiBhbGwgcGxhdGZvcm1zLlxuICogV2hlbiByZWN1cnNpb24gZGVwdGggaXMgZ3JlYXRlciwgZmFsbCBiYWNrIHRvIHVzaW5nIGEgZnVsbCBjbGVhbnVwLlxuICovXG5jb25zdCBtYXhNYXJrZXJCaXRzID0gMzA7XG5sZXQgYWN0aXZlRWZmZWN0O1xuY29uc3QgSVRFUkFURV9LRVkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ2l0ZXJhdGUnIDogJycpO1xuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnTWFwIGtleSBpdGVyYXRlJyA6ICcnKTtcbmNsYXNzIFJlYWN0aXZlRWZmZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcihmbiwgc2NoZWR1bGVyID0gbnVsbCwgc2NvcGUpIHtcbiAgICAgICAgdGhpcy5mbiA9IGZuO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlcHMgPSBbXTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJlY29yZEVmZmVjdFNjb3BlKHRoaXMsIHNjb3BlKTtcbiAgICB9XG4gICAgcnVuKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnQgPSBhY3RpdmVFZmZlY3Q7XG4gICAgICAgIGxldCBsYXN0U2hvdWxkVHJhY2sgPSBzaG91bGRUcmFjaztcbiAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0O1xuICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gdGhpcztcbiAgICAgICAgICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWNrT3BCaXQgPSAxIDw8ICsrZWZmZWN0VHJhY2tEZXB0aDtcbiAgICAgICAgICAgIGlmIChlZmZlY3RUcmFja0RlcHRoIDw9IG1heE1hcmtlckJpdHMpIHtcbiAgICAgICAgICAgICAgICBpbml0RGVwTWFya2Vycyh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVmZmVjdFRyYWNrRGVwdGggPD0gbWF4TWFya2VyQml0cykge1xuICAgICAgICAgICAgICAgIGZpbmFsaXplRGVwTWFya2Vycyh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNrT3BCaXQgPSAxIDw8IC0tZWZmZWN0VHJhY2tEZXB0aDtcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdCA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgc2hvdWxkVHJhY2sgPSBsYXN0U2hvdWxkVHJhY2s7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlZmVyU3RvcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIC8vIHN0b3BwZWQgd2hpbGUgcnVubmluZyBpdHNlbGYgLSBkZWZlciB0aGUgY2xlYW51cFxuICAgICAgICBpZiAoYWN0aXZlRWZmZWN0ID09PSB0aGlzKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmVyU3RvcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XG4gICAgICAgICAgICBpZiAodGhpcy5vblN0b3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uU3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFudXBFZmZlY3QoZWZmZWN0KSB7XG4gICAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBkZXBzLmxlbmd0aCA9IDA7XG4gICAgfVxufVxuZnVuY3Rpb24gZWZmZWN0KGZuLCBvcHRpb25zKSB7XG4gICAgaWYgKGZuLmVmZmVjdCkge1xuICAgICAgICBmbiA9IGZuLmVmZmVjdC5mbjtcbiAgICB9XG4gICAgY29uc3QgX2VmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChmbik7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKF9lZmZlY3QsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy5zY29wZSlcbiAgICAgICAgICAgIHJlY29yZEVmZmVjdFNjb3BlKF9lZmZlY3QsIG9wdGlvbnMuc2NvcGUpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMubGF6eSkge1xuICAgICAgICBfZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgICBjb25zdCBydW5uZXIgPSBfZWZmZWN0LnJ1bi5iaW5kKF9lZmZlY3QpO1xuICAgIHJ1bm5lci5lZmZlY3QgPSBfZWZmZWN0O1xuICAgIHJldHVybiBydW5uZXI7XG59XG5mdW5jdGlvbiBzdG9wKHJ1bm5lcikge1xuICAgIHJ1bm5lci5lZmZlY3Quc3RvcCgpO1xufVxubGV0IHNob3VsZFRyYWNrID0gdHJ1ZTtcbmNvbnN0IHRyYWNrU3RhY2sgPSBbXTtcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgICBzaG91bGRUcmFjayA9IGZhbHNlO1xufVxuZnVuY3Rpb24gZW5hYmxlVHJhY2tpbmcoKSB7XG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XG59XG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xuICAgIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xuICAgIHNob3VsZFRyYWNrID0gbGFzdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGxhc3Q7XG59XG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xuICAgIGlmIChzaG91bGRUcmFjayAmJiBhY3RpdmVFZmZlY3QpIHtcbiAgICAgICAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgIGlmICghZGVwc01hcCkge1xuICAgICAgICAgICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQsIChkZXBzTWFwID0gbmV3IE1hcCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRlcCA9IGRlcHNNYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghZGVwKSB7XG4gICAgICAgICAgICBkZXBzTWFwLnNldChrZXksIChkZXAgPSBjcmVhdGVEZXAoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50SW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgPyB7IGVmZmVjdDogYWN0aXZlRWZmZWN0LCB0YXJnZXQsIHR5cGUsIGtleSB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgdHJhY2tFZmZlY3RzKGRlcCwgZXZlbnRJbmZvKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFja0VmZmVjdHMoZGVwLCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSB7XG4gICAgbGV0IHNob3VsZFRyYWNrID0gZmFsc2U7XG4gICAgaWYgKGVmZmVjdFRyYWNrRGVwdGggPD0gbWF4TWFya2VyQml0cykge1xuICAgICAgICBpZiAoIW5ld1RyYWNrZWQoZGVwKSkge1xuICAgICAgICAgICAgZGVwLm4gfD0gdHJhY2tPcEJpdDsgLy8gc2V0IG5ld2x5IHRyYWNrZWRcbiAgICAgICAgICAgIHNob3VsZFRyYWNrID0gIXdhc1RyYWNrZWQoZGVwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRnVsbCBjbGVhbnVwIG1vZGUuXG4gICAgICAgIHNob3VsZFRyYWNrID0gIWRlcC5oYXMoYWN0aXZlRWZmZWN0KTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFRyYWNrKSB7XG4gICAgICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcbiAgICAgICAgYWN0aXZlRWZmZWN0LmRlcHMucHVzaChkZXApO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGFjdGl2ZUVmZmVjdC5vblRyYWNrKSB7XG4gICAgICAgICAgICBhY3RpdmVFZmZlY3Qub25UcmFjayhPYmplY3QuYXNzaWduKHsgZWZmZWN0OiBhY3RpdmVFZmZlY3QgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlcih0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQpIHtcbiAgICBjb25zdCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xuICAgIGlmICghZGVwc01hcCkge1xuICAgICAgICAvLyBuZXZlciBiZWVuIHRyYWNrZWRcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZGVwcyA9IFtdO1xuICAgIGlmICh0eXBlID09PSBcImNsZWFyXCIgLyogVHJpZ2dlck9wVHlwZXMuQ0xFQVIgKi8pIHtcbiAgICAgICAgLy8gY29sbGVjdGlvbiBiZWluZyBjbGVhcmVkXG4gICAgICAgIC8vIHRyaWdnZXIgYWxsIGVmZmVjdHMgZm9yIHRhcmdldFxuICAgICAgICBkZXBzID0gWy4uLmRlcHNNYXAudmFsdWVzKCldO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdsZW5ndGgnICYmIGlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBjb25zdCBuZXdMZW5ndGggPSBOdW1iZXIobmV3VmFsdWUpO1xuICAgICAgICBkZXBzTWFwLmZvckVhY2goKGRlcCwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnbGVuZ3RoJyB8fCBrZXkgPj0gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gc2NoZWR1bGUgcnVucyBmb3IgU0VUIHwgQUREIHwgREVMRVRFXG4gICAgICAgIGlmIChrZXkgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFsc28gcnVuIGZvciBpdGVyYXRpb24ga2V5IG9uIEFERCB8IERFTEVURSB8IE1hcC5TRVRcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovOlxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0ludGVnZXJLZXkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXcgaW5kZXggYWRkZWQgdG8gYXJyYXkgLT4gbGVuZ3RoIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KCdsZW5ndGgnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiIC8qIFRyaWdnZXJPcFR5cGVzLkRFTEVURSAqLzpcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2V0XCIgLyogVHJpZ2dlck9wVHlwZXMuU0VUICovOlxuICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBldmVudEluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyB7IHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCB9XG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlmIChkZXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoZGVwc1swXSkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGRlcHNbMF0sIGV2ZW50SW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhkZXBzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgZWZmZWN0cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGRlcCBvZiBkZXBzKSB7XG4gICAgICAgICAgICBpZiAoZGVwKSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0cy5wdXNoKC4uLmRlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMoY3JlYXRlRGVwKGVmZmVjdHMpLCBldmVudEluZm8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMoY3JlYXRlRGVwKGVmZmVjdHMpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJFZmZlY3RzKGRlcCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykge1xuICAgIC8vIHNwcmVhZCBpbnRvIGFycmF5IGZvciBzdGFiaWxpemF0aW9uXG4gICAgY29uc3QgZWZmZWN0cyA9IGlzQXJyYXkoZGVwKSA/IGRlcCA6IFsuLi5kZXBdO1xuICAgIGZvciAoY29uc3QgZWZmZWN0IG9mIGVmZmVjdHMpIHtcbiAgICAgICAgaWYgKGVmZmVjdC5jb21wdXRlZCkge1xuICAgICAgICAgICAgdHJpZ2dlckVmZmVjdChlZmZlY3QsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgZWZmZWN0IG9mIGVmZmVjdHMpIHtcbiAgICAgICAgaWYgKCFlZmZlY3QuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3QoZWZmZWN0LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJFZmZlY3QoZWZmZWN0LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSB7XG4gICAgaWYgKGVmZmVjdCAhPT0gYWN0aXZlRWZmZWN0IHx8IGVmZmVjdC5hbGxvd1JlY3Vyc2UpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBlZmZlY3Qub25UcmlnZ2VyKSB7XG4gICAgICAgICAgICBlZmZlY3Qub25UcmlnZ2VyKGV4dGVuZCh7IGVmZmVjdCB9LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVmZmVjdC5zY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIGVmZmVjdC5zY2hlZHVsZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVmZmVjdC5ydW4oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldERlcEZyb21SZWFjdGl2ZShvYmplY3QsIGtleSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gdGFyZ2V0TWFwLmdldChvYmplY3QpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0KGtleSk7XG59XG5cbmNvbnN0IGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgX19wcm90b19fLF9fdl9pc1JlZixfX2lzVnVlYCk7XG5jb25zdCBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoXG4vKiNfX1BVUkVfXyovXG5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpXG4gICAgLy8gaW9zMTAueCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpIGNhbiBlbnVtZXJhdGUgJ2FyZ3VtZW50cycgYW5kICdjYWxsZXInXG4gICAgLy8gYnV0IGFjY2Vzc2luZyB0aGVtIG9uIFN5bWJvbCBsZWFkcyB0byBUeXBlRXJyb3IgYmVjYXVzZSBTeW1ib2wgaXMgYSBzdHJpY3QgbW9kZVxuICAgIC8vIGZ1bmN0aW9uXG4gICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnYXJndW1lbnRzJyAmJiBrZXkgIT09ICdjYWxsZXInKVxuICAgIC5tYXAoa2V5ID0+IFN5bWJvbFtrZXldKVxuICAgIC5maWx0ZXIoaXNTeW1ib2wpKTtcbmNvbnN0IGdldCQxID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoKTtcbmNvbnN0IHNoYWxsb3dHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcihmYWxzZSwgdHJ1ZSk7XG5jb25zdCByZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSwgdHJ1ZSk7XG5jb25zdCBhcnJheUluc3RydW1lbnRhdGlvbnMgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpO1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zKCkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSB7fTtcbiAgICBbJ2luY2x1ZGVzJywgJ2luZGV4T2YnLCAnbGFzdEluZGV4T2YnXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0cmFjayhhcnIsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywgaSArICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHdlIHJ1biB0aGUgbWV0aG9kIHVzaW5nIHRoZSBvcmlnaW5hbCBhcmdzIGZpcnN0ICh3aGljaCBtYXkgYmUgcmVhY3RpdmUpXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhcnJba2V5XSguLi5hcmdzKTtcbiAgICAgICAgICAgIGlmIChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGF0IGRpZG4ndCB3b3JrLCBydW4gaXQgYWdhaW4gdXNpbmcgcmF3IHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyW2tleV0oLi4uYXJncy5tYXAodG9SYXcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NwbGljZSddLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uc1trZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRvUmF3KHRoaXMpW2tleV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBpbnN0cnVtZW50YXRpb25zO1xufVxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkoa2V5KSB7XG4gICAgY29uc3Qgb2JqID0gdG9SYXcodGhpcyk7XG4gICAgdHJhY2sob2JqLCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIGtleSk7XG4gICAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpO1xufVxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBQ1RJVkUgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNSZWFkb25seTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzU2hhbGxvd1wiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfU0hBTExPVyAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3c7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqLyAmJlxuICAgICAgICAgICAgcmVjZWl2ZXIgPT09XG4gICAgICAgICAgICAgICAgKGlzUmVhZG9ubHlcbiAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNoYWxsb3dSZWFkb25seU1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWFkb25seU1hcFxuICAgICAgICAgICAgICAgICAgICA6IHNoYWxsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2hhbGxvd1JlYWN0aXZlTWFwXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xuICAgICAgICBpZiAoIWlzUmVhZG9ubHkpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXRJc0FycmF5ICYmIGhhc093bihhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXksIHJlY2VpdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgICAgaWYgKGlzU3ltYm9sKGtleSkgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KSA6IGlzTm9uVHJhY2thYmxlS2V5cyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNSZWFkb25seSkge1xuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcbiAgICAgICAgICAgIC8vIHJlZiB1bndyYXBwaW5nIC0gc2tpcCB1bndyYXAgZm9yIEFycmF5ICsgaW50ZWdlciBrZXkuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0SXNBcnJheSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IHJlcyA6IHJlcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCByZXR1cm5lZCB2YWx1ZSBpbnRvIGEgcHJveHkgYXMgd2VsbC4gd2UgZG8gdGhlIGlzT2JqZWN0IGNoZWNrXG4gICAgICAgICAgICAvLyBoZXJlIHRvIGF2b2lkIGludmFsaWQgdmFsdWUgd2FybmluZy4gQWxzbyBuZWVkIHRvIGxhenkgYWNjZXNzIHJlYWRvbmx5XG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHkgPyByZWFkb25seShyZXMpIDogcmVhY3RpdmUocmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG59XG5jb25zdCBzZXQkMSA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2V0dGVyKCk7XG5jb25zdCBzaGFsbG93U2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVTZXR0ZXIodHJ1ZSk7XG5mdW5jdGlvbiBjcmVhdGVTZXR0ZXIoc2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgIGxldCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoaXNSZWFkb25seShvbGRWYWx1ZSkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWxsb3cpIHtcbiAgICAgICAgICAgIGlmICghaXNTaGFsbG93KHZhbHVlKSAmJiAhaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHRvUmF3KG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYWRLZXkgPSBpc0FycmF5KHRhcmdldCkgJiYgaXNJbnRlZ2VyS2V5KGtleSlcbiAgICAgICAgICAgID8gTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoXG4gICAgICAgICAgICA6IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuICAgICAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHRhcmdldCBpcyBzb21ldGhpbmcgdXAgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBvZiBvcmlnaW5hbFxuICAgICAgICBpZiAodGFyZ2V0ID09PSB0b1JhdyhyZWNlaXZlcikpIHtcbiAgICAgICAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgaGFkS2V5ID0gaGFzT3duKHRhcmdldCwga2V5KTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xuICAgIGlmIChyZXN1bHQgJiYgaGFkS2V5KSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiIC8qIFRyaWdnZXJPcFR5cGVzLkRFTEVURSAqLywga2V5LCB1bmRlZmluZWQsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGhhcyQxKHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xuICAgIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcbiAgICAgICAgdHJhY2sodGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIGtleSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xuICAgIHRyYWNrKHRhcmdldCwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIGlzQXJyYXkodGFyZ2V0KSA/ICdsZW5ndGgnIDogSVRFUkFURV9LRVkpO1xuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbn1cbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcbiAgICBnZXQ6IGdldCQxLFxuICAgIHNldDogc2V0JDEsXG4gICAgZGVsZXRlUHJvcGVydHksXG4gICAgaGFzOiBoYXMkMSxcbiAgICBvd25LZXlzXG59O1xuY29uc3QgcmVhZG9ubHlIYW5kbGVycyA9IHtcbiAgICBnZXQ6IHJlYWRvbmx5R2V0LFxuICAgIHNldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBtdXRhYmxlSGFuZGxlcnMsIHtcbiAgICBnZXQ6IHNoYWxsb3dHZXQsXG4gICAgc2V0OiBzaGFsbG93U2V0XG59KTtcbi8vIFByb3BzIGhhbmRsZXJzIGFyZSBzcGVjaWFsIGluIHRoZSBzZW5zZSB0aGF0IGl0IHNob3VsZCBub3QgdW53cmFwIHRvcC1sZXZlbFxuLy8gcmVmcyAoaW4gb3JkZXIgdG8gYWxsb3cgcmVmcyB0byBiZSBleHBsaWNpdGx5IHBhc3NlZCBkb3duKSwgYnV0IHNob3VsZFxuLy8gcmV0YWluIHRoZSByZWFjdGl2aXR5IG9mIHRoZSBub3JtYWwgcmVhZG9ubHkgb2JqZWN0LlxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgcmVhZG9ubHlIYW5kbGVycywge1xuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XG59KTtcblxuY29uc3QgdG9TaGFsbG93ID0gKHZhbHVlKSA9PiB2YWx1ZTtcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIGlzUmVhZG9ubHkgPSBmYWxzZSwgaXNTaGFsbG93ID0gZmFsc2UpIHtcbiAgICAvLyAjMTc3MjogcmVhZG9ubHkocmVhY3RpdmUoTWFwKSkgc2hvdWxkIHJldHVybiByZWFkb25seSArIHJlYWN0aXZlIHZlcnNpb25cbiAgICAvLyBvZiB0aGUgdmFsdWVcbiAgICB0YXJnZXQgPSB0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi9dO1xuICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgICBpZiAoIWlzUmVhZG9ubHkpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gcmF3S2V5KSB7XG4gICAgICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywga2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywgcmF3S2V5KTtcbiAgICB9XG4gICAgY29uc3QgeyBoYXMgfSA9IGdldFByb3RvKHJhd1RhcmdldCk7XG4gICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQoa2V5KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwgcmF3S2V5KSkge1xuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KHJhd0tleSkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YXJnZXQgIT09IHJhd1RhcmdldCkge1xuICAgICAgICAvLyAjMzYwMiByZWFkb25seShyZWFjdGl2ZShNYXApKVxuICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgbmVzdGVkIHJlYWN0aXZlIGBNYXBgIGNhbiBkbyB0cmFja2luZyBmb3IgaXRzZWxmXG4gICAgICAgIHRhcmdldC5nZXQoa2V5KTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYXMoa2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIHJhd0tleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXkgPT09IHJhd0tleVxuICAgICAgICA/IHRhcmdldC5oYXMoa2V5KVxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG59XG5mdW5jdGlvbiBzaXplKHRhcmdldCwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgSVRFUkFURV9LRVkpO1xuICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsICdzaXplJywgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovLCB2YWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgIGtleSA9IHRvUmF3KGtleSk7XG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xuICAgIH1cbiAgICBjb25zdCBvbGRWYWx1ZSA9IGdldC5jYWxsKHRhcmdldCwga2V5KTtcbiAgICB0YXJnZXQuc2V0KGtleSwgdmFsdWUpO1xuICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBkZWxldGVFbnRyeShrZXkpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgfVxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0ID8gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpIDogdW5kZWZpbmVkO1xuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xuICAgIGlmIChoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgY29uc3QgaGFkSXRlbXMgPSB0YXJnZXQuc2l6ZSAhPT0gMDtcbiAgICBjb25zdCBvbGRUYXJnZXQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyBpc01hcCh0YXJnZXQpXG4gICAgICAgICAgICA/IG5ldyBNYXAodGFyZ2V0KVxuICAgICAgICAgICAgOiBuZXcgU2V0KHRhcmdldClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcbiAgICBpZiAoaGFkSXRlbXMpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9sZFRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICAgIHJldHVybiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi9dO1xuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgICAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiIC8qIFRyYWNrT3BUeXBlcy5JVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgLy8gaW1wb3J0YW50OiBtYWtlIHN1cmUgdGhlIGNhbGxiYWNrIGlzXG4gICAgICAgICAgICAvLyAxLiBpbnZva2VkIHdpdGggdGhlIHJlYWN0aXZlIG1hcCBhcyBgdGhpc2AgYW5kIDNyZCBhcmdcbiAgICAgICAgICAgIC8vIDIuIHRoZSB2YWx1ZSByZWNlaXZlZCBzaG91bGQgYmUgYSBjb3JyZXNwb25kaW5nIHJlYWN0aXZlL3JlYWRvbmx5LlxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgd3JhcCh2YWx1ZSksIHdyYXAoa2V5KSwgb2JzZXJ2ZWQpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcbiAgICAgICAgY29uc3QgaXNQYWlyID0gbWV0aG9kID09PSAnZW50cmllcycgfHwgKG1ldGhvZCA9PT0gU3ltYm9sLml0ZXJhdG9yICYmIHRhcmdldElzTWFwKTtcbiAgICAgICAgY29uc3QgaXNLZXlPbmx5ID0gbWV0aG9kID09PSAna2V5cycgJiYgdGFyZ2V0SXNNYXA7XG4gICAgICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAgICAgIWlzUmVhZG9ubHkgJiZcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIGlzS2V5T25seSA/IE1BUF9LRVlfSVRFUkFURV9LRVkgOiBJVEVSQVRFX0tFWSk7XG4gICAgICAgIC8vIHJldHVybiBhIHdyYXBwZWQgaXRlcmF0b3Igd2hpY2ggcmV0dXJucyBvYnNlcnZlZCB2ZXJzaW9ucyBvZiB0aGVcbiAgICAgICAgLy8gdmFsdWVzIGVtaXR0ZWQgZnJvbSB0aGUgcmVhbCBpdGVyYXRvclxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gaXRlcmF0b3IgcHJvdG9jb2xcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlLCBkb25lIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNQYWlyID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB3cmFwKHZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWRvbmx5TWV0aG9kKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2NhcGl0YWxpemUodHlwZSl9IG9wZXJhdGlvbiAke2tleX1mYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0b1Jhdyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovID8gZmFsc2UgOiB0aGlzO1xuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25zKCkge1xuICAgIGNvbnN0IG11dGFibGVJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIGtleSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhcyxcbiAgICAgICAgYWRkLFxuICAgICAgICBzZXQsXG4gICAgICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXG4gICAgICAgIGNsZWFyLFxuICAgICAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCBmYWxzZSlcbiAgICB9O1xuICAgIGNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBoYXMsXG4gICAgICAgIGFkZCxcbiAgICAgICAgc2V0LFxuICAgICAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxuICAgICAgICBjbGVhcixcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgdHJ1ZSlcbiAgICB9O1xuICAgIGNvbnN0IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyA9IHtcbiAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzLmNhbGwodGhpcywga2V5LCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLyksXG4gICAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8pLFxuICAgICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovKSxcbiAgICAgICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLyksXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgZmFsc2UpXG4gICAgfTtcbiAgICBjb25zdCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIGtleSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUodGhpcywgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhcyhrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovKSxcbiAgICAgICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyksXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8pLFxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovKSxcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCB0cnVlKVxuICAgIH07XG4gICAgY29uc3QgaXRlcmF0b3JNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdlbnRyaWVzJywgU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4ge1xuICAgICAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyxcbiAgICAgICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICBdO1xufVxuY29uc3QgW211dGFibGVJbnN0cnVtZW50YXRpb25zLCByZWFkb25seUluc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXSA9IC8qICNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHNoYWxsb3dcbiAgICAgICAgPyBpc1JlYWRvbmx5XG4gICAgICAgICAgICA/IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICAgICAgICAgIDogc2hhbGxvd0luc3RydW1lbnRhdGlvbnNcbiAgICAgICAgOiBpc1JlYWRvbmx5XG4gICAgICAgICAgICA/IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xuICAgICAgICAgICAgOiBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucztcbiAgICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xuICAgICAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqLykge1xuICAgICAgICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICAgICAgID8gaW5zdHJ1bWVudGF0aW9uc1xuICAgICAgICAgICAgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuICAgIH07XG59XG5jb25zdCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIGZhbHNlKVxufTtcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgdHJ1ZSlcbn07XG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIGZhbHNlKVxufTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIHRydWUpXG59O1xuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIGAgK1xuICAgICAgICAgICAgYHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCBgICtcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xuICAgICAgICAgICAgYEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIGAgK1xuICAgICAgICAgICAgYG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYCk7XG4gICAgfVxufVxuXG5jb25zdCByZWFjdGl2ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBzaGFsbG93UmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5TWFwID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHRhcmdldFR5cGVNYXAocmF3VHlwZSkge1xuICAgIHN3aXRjaCAocmF3VHlwZSkge1xuICAgICAgICBjYXNlICdPYmplY3QnOlxuICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBUYXJnZXRUeXBlLkNPTU1PTiAqLztcbiAgICAgICAgY2FzZSAnTWFwJzpcbiAgICAgICAgY2FzZSAnU2V0JzpcbiAgICAgICAgY2FzZSAnV2Vha01hcCc6XG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgICAgICAgICAgcmV0dXJuIDIgLyogVGFyZ2V0VHlwZS5DT0xMRUNUSU9OICovO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDAgLyogVGFyZ2V0VHlwZS5JTlZBTElEICovO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqL10gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpXG4gICAgICAgID8gMCAvKiBUYXJnZXRUeXBlLklOVkFMSUQgKi9cbiAgICAgICAgOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gcmVhY3RpdmUodGFyZ2V0KSB7XG4gICAgLy8gaWYgdHJ5aW5nIHRvIG9ic2VydmUgYSByZWFkb25seSBwcm94eSwgcmV0dXJuIHRoZSByZWFkb25seSB2ZXJzaW9uLlxuICAgIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycywgcmVhY3RpdmVNYXApO1xufVxuLyoqXG4gKiBSZXR1cm4gYSBzaGFsbG93bHktcmVhY3RpdmUgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290XG4gKiBsZXZlbCBwcm9wZXJ0aWVzIGFyZSByZWFjdGl2ZS4gSXQgYWxzbyBkb2VzIG5vdCBhdXRvLXVud3JhcCByZWZzIChldmVuIGF0IHRoZVxuICogcm9vdCBsZXZlbCkuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dSZWFjdGl2ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsIHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMsIHNoYWxsb3dSZWFjdGl2ZU1hcCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSByZWFkb25seSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QuIE5vdGUgdGhlIHJldHVybmVkIGNvcHkgaXMgbm90XG4gKiBtYWRlIHJlYWN0aXZlLCBidXQgYHJlYWRvbmx5YCBjYW4gYmUgY2FsbGVkIG9uIGFuIGFscmVhZHkgcmVhY3RpdmUgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgcmVhZG9ubHlNYXApO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXG4gKiBwcm9wZXJ0aWVzIGFyZSByZWFkb25seSwgYW5kIGRvZXMgTk9UIHVud3JhcCByZWZzIG5vciByZWN1cnNpdmVseSBjb252ZXJ0XG4gKiByZXR1cm5lZCBwcm9wZXJ0aWVzLlxuICogVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsIHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgc2hhbGxvd1JlYWRvbmx5TWFwKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgdmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6ICR7U3RyaW5nKHRhcmdldCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxuICAgIC8vIGV4Y2VwdGlvbjogY2FsbGluZyByZWFkb25seSgpIG9uIGEgcmVhY3RpdmUgb2JqZWN0XG4gICAgaWYgKHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10gJiZcbiAgICAgICAgIShpc1JlYWRvbmx5ICYmIHRhcmdldFtcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqL10pKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIC8vIHRhcmdldCBhbHJlYWR5IGhhcyBjb3JyZXNwb25kaW5nIFByb3h5XG4gICAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xuICAgIGlmIChleGlzdGluZ1Byb3h5KSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xuICAgIH1cbiAgICAvLyBvbmx5IHNwZWNpZmljIHZhbHVlIHR5cGVzIGNhbiBiZSBvYnNlcnZlZC5cbiAgICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRUeXBlID09PSAwIC8qIFRhcmdldFR5cGUuSU5WQUxJRCAqLykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHRhcmdldFR5cGUgPT09IDIgLyogVGFyZ2V0VHlwZS5DT0xMRUNUSU9OICovID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzKTtcbiAgICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuZnVuY3Rpb24gaXNSZWFjdGl2ZSh2YWx1ZSkge1xuICAgIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10pO1xuICAgIH1cbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBQ1RJVkUgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xuICAgIGNvbnN0IHJhdyA9IG9ic2VydmVkICYmIG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICByZXR1cm4gcmF3ID8gdG9SYXcocmF3KSA6IG9ic2VydmVkO1xufVxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xuICAgIGRlZih2YWx1ZSwgXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqLywgdHJ1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XG5jb25zdCB0b1JlYWRvbmx5ID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFkb25seSh2YWx1ZSkgOiB2YWx1ZTtcblxuZnVuY3Rpb24gdHJhY2tSZWZWYWx1ZShyZWYpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2sgJiYgYWN0aXZlRWZmZWN0KSB7XG4gICAgICAgIHJlZiA9IHRvUmF3KHJlZik7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyYWNrRWZmZWN0cyhyZWYuZGVwIHx8IChyZWYuZGVwID0gY3JlYXRlRGVwKCkpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLFxuICAgICAgICAgICAgICAgIGtleTogJ3ZhbHVlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFja0VmZmVjdHMocmVmLmRlcCB8fCAocmVmLmRlcCA9IGNyZWF0ZURlcCgpKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyUmVmVmFsdWUocmVmLCBuZXdWYWwpIHtcbiAgICByZWYgPSB0b1JhdyhyZWYpO1xuICAgIGNvbnN0IGRlcCA9IHJlZi5kZXA7XG4gICAgaWYgKGRlcCkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhkZXAsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHJlZixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyxcbiAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhkZXApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNSZWYocikge1xuICAgIHJldHVybiAhIShyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcbn1cbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIGZhbHNlKTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dSZWYodmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlZihyYXdWYWx1ZSwgc2hhbGxvdykge1xuICAgIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHJhd1ZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlZkltcGwocmF3VmFsdWUsIHNoYWxsb3cpO1xufVxuY2xhc3MgUmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIF9fdl9pc1NoYWxsb3cpIHtcbiAgICAgICAgdGhpcy5fX3ZfaXNTaGFsbG93ID0gX192X2lzU2hhbGxvdztcbiAgICAgICAgdGhpcy5kZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmF3VmFsdWUgPSBfX3ZfaXNTaGFsbG93ID8gdmFsdWUgOiB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SZWFjdGl2ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgdHJhY2tSZWZWYWx1ZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgICAgIGNvbnN0IHVzZURpcmVjdFZhbHVlID0gdGhpcy5fX3ZfaXNTaGFsbG93IHx8IGlzU2hhbGxvdyhuZXdWYWwpIHx8IGlzUmVhZG9ubHkobmV3VmFsKTtcbiAgICAgICAgbmV3VmFsID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWwgOiB0b1JhdyhuZXdWYWwpO1xuICAgICAgICBpZiAoaGFzQ2hhbmdlZChuZXdWYWwsIHRoaXMuX3Jhd1ZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5fcmF3VmFsdWUgPSBuZXdWYWw7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHVzZURpcmVjdFZhbHVlID8gbmV3VmFsIDogdG9SZWFjdGl2ZShuZXdWYWwpO1xuICAgICAgICAgICAgdHJpZ2dlclJlZlZhbHVlKHRoaXMsIG5ld1ZhbCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyUmVmKHJlZikge1xuICAgIHRyaWdnZXJSZWZWYWx1ZShyZWYsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHJlZi52YWx1ZSA6IHZvaWQgMCk7XG59XG5mdW5jdGlvbiB1bnJlZihyZWYpIHtcbiAgICByZXR1cm4gaXNSZWYocmVmKSA/IHJlZi52YWx1ZSA6IHJlZjtcbn1cbmNvbnN0IHNoYWxsb3dVbndyYXBIYW5kbGVycyA9IHtcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHVucmVmKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikpLFxuICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuZnVuY3Rpb24gcHJveHlSZWZzKG9iamVjdFdpdGhSZWZzKSB7XG4gICAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpXG4gICAgICAgID8gb2JqZWN0V2l0aFJlZnNcbiAgICAgICAgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XG59XG5jbGFzcyBDdXN0b21SZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3J5KSB7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoKCkgPT4gdHJhY2tSZWZWYWx1ZSh0aGlzKSwgKCkgPT4gdHJpZ2dlclJlZlZhbHVlKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fZ2V0ID0gZ2V0O1xuICAgICAgICB0aGlzLl9zZXQgPSBzZXQ7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldCgpO1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgICAgIHRoaXMuX3NldChuZXdWYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21SZWZJbXBsKGZhY3RvcnkpO1xufVxuZnVuY3Rpb24gdG9SZWZzKG9iamVjdCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzUHJveHkob2JqZWN0KSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBpc0FycmF5KG9iamVjdCkgPyBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCkgOiB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgcmV0W2tleV0gPSB0b1JlZihvYmplY3QsIGtleSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5jbGFzcyBPYmplY3RSZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihfb2JqZWN0LCBfa2V5LCBfZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XG4gICAgICAgIHRoaXMuX2tleSA9IF9rZXk7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZSA9IF9kZWZhdWx0VmFsdWU7XG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PT0gdW5kZWZpbmVkID8gdGhpcy5fZGVmYXVsdFZhbHVlIDogdmFsO1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgICAgIHRoaXMuX29iamVjdFt0aGlzLl9rZXldID0gbmV3VmFsO1xuICAgIH1cbiAgICBnZXQgZGVwKCkge1xuICAgICAgICByZXR1cm4gZ2V0RGVwRnJvbVJlYWN0aXZlKHRvUmF3KHRoaXMuX29iamVjdCksIHRoaXMuX2tleSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SZWYob2JqZWN0LCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbCA9IG9iamVjdFtrZXldO1xuICAgIHJldHVybiBpc1JlZih2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogbmV3IE9iamVjdFJlZkltcGwob2JqZWN0LCBrZXksIGRlZmF1bHRWYWx1ZSk7XG59XG5cbnZhciBfYSQxO1xuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIsIF9zZXR0ZXIsIGlzUmVhZG9ubHksIGlzU1NSKSB7XG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIHRoaXNbX2EkMV0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGlydHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclJlZlZhbHVlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lZmZlY3QuY29tcHV0ZWQgPSB0aGlzO1xuICAgICAgICB0aGlzLmVmZmVjdC5hY3RpdmUgPSB0aGlzLl9jYWNoZWFibGUgPSAhaXNTU1I7XG4gICAgICAgIHRoaXNbXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi9dID0gaXNSZWFkb25seTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICAvLyB0aGUgY29tcHV0ZWQgcmVmIG1heSBnZXQgd3JhcHBlZCBieSBvdGhlciBwcm94aWVzIGUuZy4gcmVhZG9ubHkoKSAjMzM3NlxuICAgICAgICBjb25zdCBzZWxmID0gdG9SYXcodGhpcyk7XG4gICAgICAgIHRyYWNrUmVmVmFsdWUoc2VsZik7XG4gICAgICAgIGlmIChzZWxmLl9kaXJ0eSB8fCAhc2VsZi5fY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICBzZWxmLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5fdmFsdWUgPSBzZWxmLmVmZmVjdC5ydW4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZi5fdmFsdWU7XG4gICAgfVxuICAgIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLl9zZXR0ZXIobmV3VmFsdWUpO1xuICAgIH1cbn1cbl9hJDEgPSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLztcbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucywgZGVidWdPcHRpb25zLCBpc1NTUiA9IGZhbHNlKSB7XG4gICAgbGV0IGdldHRlcjtcbiAgICBsZXQgc2V0dGVyO1xuICAgIGNvbnN0IG9ubHlHZXR0ZXIgPSBpc0Z1bmN0aW9uKGdldHRlck9yT3B0aW9ucyk7XG4gICAgaWYgKG9ubHlHZXR0ZXIpIHtcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zO1xuICAgICAgICBzZXR0ZXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgID8gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgdmFsdWUgaXMgcmVhZG9ubHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogTk9PUDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucy5nZXQ7XG4gICAgICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XG4gICAgfVxuICAgIGNvbnN0IGNSZWYgPSBuZXcgQ29tcHV0ZWRSZWZJbXBsKGdldHRlciwgc2V0dGVyLCBvbmx5R2V0dGVyIHx8ICFzZXR0ZXIsIGlzU1NSKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGRlYnVnT3B0aW9ucyAmJiAhaXNTU1IpIHtcbiAgICAgICAgY1JlZi5lZmZlY3Qub25UcmFjayA9IGRlYnVnT3B0aW9ucy5vblRyYWNrO1xuICAgICAgICBjUmVmLmVmZmVjdC5vblRyaWdnZXIgPSBkZWJ1Z09wdGlvbnMub25UcmlnZ2VyO1xuICAgIH1cbiAgICByZXR1cm4gY1JlZjtcbn1cblxudmFyIF9hO1xuY29uc3QgdGljayA9IC8qI19fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5jb25zdCBxdWV1ZSA9IFtdO1xubGV0IHF1ZXVlZCA9IGZhbHNlO1xuY29uc3Qgc2NoZWR1bGVyID0gKGZuKSA9PiB7XG4gICAgcXVldWUucHVzaChmbik7XG4gICAgaWYgKCFxdWV1ZWQpIHtcbiAgICAgICAgcXVldWVkID0gdHJ1ZTtcbiAgICAgICAgdGljay50aGVuKGZsdXNoKTtcbiAgICB9XG59O1xuY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxdWV1ZVtpXSgpO1xuICAgIH1cbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgIHF1ZXVlZCA9IGZhbHNlO1xufTtcbmNsYXNzIERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5kZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgICAgICB0aGlzW19hXSA9IHRydWU7XG4gICAgICAgIGxldCBjb21wYXJlVGFyZ2V0O1xuICAgICAgICBsZXQgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICBsZXQgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgKGNvbXB1dGVkVHJpZ2dlcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXB1dGVkVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJlVGFyZ2V0ID0gdGhpcy5fdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlVG9Db21wYXJlID0gaGFzQ29tcGFyZVRhcmdldCA/IGNvbXBhcmVUYXJnZXQgOiB0aGlzLl92YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWZmZWN0LmFjdGl2ZSAmJiB0aGlzLl9nZXQoKSAhPT0gdmFsdWVUb0NvbXBhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNoYWluZWQgdXBzdHJlYW0gY29tcHV0ZWRzIGFyZSBub3RpZmllZCBzeW5jaHJvbm91c2x5IHRvIGVuc3VyZVxuICAgICAgICAgICAgICAgIC8vIHZhbHVlIGludmFsaWRhdGlvbiBpbiBjYXNlIG9mIHN5bmMgYWNjZXNzOyBub3JtYWwgZWZmZWN0cyBhcmVcbiAgICAgICAgICAgICAgICAvLyBkZWZlcnJlZCB0byBiZSB0cmlnZ2VyZWQgaW4gc2NoZWR1bGVyLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLmRlcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jb21wdXRlZCBpbnN0YW5jZW9mIERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNjaGVkdWxlcih0cnVlIC8qIGNvbXB1dGVkVHJpZ2dlciAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVmZmVjdC5jb21wdXRlZCA9IHRoaXM7XG4gICAgfVxuICAgIF9nZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fdmFsdWUgPSB0aGlzLmVmZmVjdC5ydW4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgICAgIC8vIHRoZSBjb21wdXRlZCByZWYgbWF5IGdldCB3cmFwcGVkIGJ5IG90aGVyIHByb3hpZXMgZS5nLiByZWFkb25seSgpICMzMzc2XG4gICAgICAgIHJldHVybiB0b1Jhdyh0aGlzKS5fZ2V0KCk7XG4gICAgfVxufVxuX2EgPSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLztcbmZ1bmN0aW9uIGRlZmVycmVkQ29tcHV0ZWQoZ2V0dGVyKSB7XG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbChnZXR0ZXIpO1xufVxuXG5leHBvcnQgeyBFZmZlY3RTY29wZSwgSVRFUkFURV9LRVksIFJlYWN0aXZlRWZmZWN0LCBjb21wdXRlZCwgY3VzdG9tUmVmLCBkZWZlcnJlZENvbXB1dGVkLCBlZmZlY3QsIGVmZmVjdFNjb3BlLCBlbmFibGVUcmFja2luZywgZ2V0Q3VycmVudFNjb3BlLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgaXNTaGFsbG93LCBtYXJrUmF3LCBvblNjb3BlRGlzcG9zZSwgcGF1c2VUcmFja2luZywgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgcmVzZXRUcmFja2luZywgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0cmFjaywgdHJpZ2dlciwgdHJpZ2dlclJlZiwgdW5yZWYgfTtcbiIsImltcG9ydCB7IHBhdXNlVHJhY2tpbmcsIHJlc2V0VHJhY2tpbmcsIGlzUmVmLCB0b1JhdywgZ2V0Q3VycmVudFNjb3BlLCBpc1NoYWxsb3cgYXMgaXNTaGFsbG93JDEsIGlzUmVhY3RpdmUsIFJlYWN0aXZlRWZmZWN0LCByZWYsIHNoYWxsb3dSZWFkb25seSwgdHJhY2ssIHJlYWN0aXZlLCBzaGFsbG93UmVhY3RpdmUsIHRyaWdnZXIsIGlzUHJveHksIHByb3h5UmVmcywgbWFya1JhdywgRWZmZWN0U2NvcGUsIGNvbXB1dGVkIGFzIGNvbXB1dGVkJDEsIGlzUmVhZG9ubHkgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuZXhwb3J0IHsgRWZmZWN0U2NvcGUsIFJlYWN0aXZlRWZmZWN0LCBjdXN0b21SZWYsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGdldEN1cnJlbnRTY29wZSwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1Jhdywgb25TY29wZURpc3Bvc2UsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgTk9PUCwgZ2V0R2xvYmFsVGhpcywgZXh0ZW5kLCBFTVBUWV9PQkosIHRvSGFuZGxlcktleSwgbG9vc2VUb051bWJlciwgaHlwaGVuYXRlLCBjYW1lbGl6ZSwgaXNPYmplY3QsIGlzT24sIGhhc093biwgaXNNb2RlbExpc3RlbmVyLCB0b051bWJlciwgaGFzQ2hhbmdlZCwgcmVtb3ZlLCBpc1NldCwgaXNNYXAsIGlzUGxhaW5PYmplY3QsIGludm9rZUFycmF5Rm5zLCBpc1JlZ0V4cCwgaXNCdWlsdEluRGlyZWN0aXZlLCBjYXBpdGFsaXplLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGRlZiwgaXNSZXNlcnZlZFByb3AsIEVNUFRZX0FSUiwgdG9SYXdUeXBlLCBtYWtlTWFwLCBOTywgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVQcm9wcywgbm9ybWFsaXplU3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdGFjayA9IFtdO1xuZnVuY3Rpb24gcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKSB7XG4gICAgc3RhY2sucHVzaCh2bm9kZSk7XG59XG5mdW5jdGlvbiBwb3BXYXJuaW5nQ29udGV4dCgpIHtcbiAgICBzdGFjay5wb3AoKTtcbn1cbmZ1bmN0aW9uIHdhcm4obXNnLCAuLi5hcmdzKSB7XG4gICAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBhdm9pZCBwcm9wcyBmb3JtYXR0aW5nIG9yIHdhcm4gaGFuZGxlciB0cmFja2luZyBkZXBzIHRoYXQgbWlnaHQgYmUgbXV0YXRlZFxuICAgIC8vIGR1cmluZyBwYXRjaCwgbGVhZGluZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGNvbnN0IGluc3RhbmNlID0gc3RhY2subGVuZ3RoID8gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0uY29tcG9uZW50IDogbnVsbDtcbiAgICBjb25zdCBhcHBXYXJuSGFuZGxlciA9IGluc3RhbmNlICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLndhcm5IYW5kbGVyO1xuICAgIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcbiAgICBpZiAoYXBwV2FybkhhbmRsZXIpIHtcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcFdhcm5IYW5kbGVyLCBpbnN0YW5jZSwgMTEgLyogRXJyb3JDb2Rlcy5BUFBfV0FSTl9IQU5ETEVSICovLCBbXG4gICAgICAgICAgICBtc2cgKyBhcmdzLmpvaW4oJycpLFxuICAgICAgICAgICAgaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHksXG4gICAgICAgICAgICB0cmFjZVxuICAgICAgICAgICAgICAgIC5tYXAoKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gKVxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgIHRyYWNlXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgd2FybkFyZ3MgPSBbYFtWdWUgd2Fybl06ICR7bXNnfWAsIC4uLmFyZ3NdO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHRyYWNlLmxlbmd0aCAmJlxuICAgICAgICAgICAgLy8gYXZvaWQgc3BhbW1pbmcgY29uc29sZSBkdXJpbmcgdGVzdHNcbiAgICAgICAgICAgICFmYWxzZSkge1xuICAgICAgICAgICAgd2FybkFyZ3MucHVzaChgXFxuYCwgLi4uZm9ybWF0VHJhY2UodHJhY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xuICAgIH1cbiAgICByZXNldFRyYWNraW5nKCk7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcbiAgICBsZXQgY3VycmVudFZOb2RlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvLyB3ZSBjYW4ndCBqdXN0IHVzZSB0aGUgc3RhY2sgYmVjYXVzZSBpdCB3aWxsIGJlIGluY29tcGxldGUgZHVyaW5nIHVwZGF0ZXNcbiAgICAvLyB0aGF0IGRpZCBub3Qgc3RhcnQgZnJvbSB0aGUgcm9vdC4gUmUtY29uc3RydWN0IHRoZSBwYXJlbnQgY2hhaW4gdXNpbmdcbiAgICAvLyBpbnN0YW5jZSBwYXJlbnQgcG9pbnRlcnMuXG4gICAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XG4gICAgd2hpbGUgKGN1cnJlbnRWTm9kZSkge1xuICAgICAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xuICAgICAgICBpZiAobGFzdCAmJiBsYXN0LnZub2RlID09PSBjdXJyZW50Vk5vZGUpIHtcbiAgICAgICAgICAgIGxhc3QucmVjdXJzZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVkU3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgdm5vZGU6IGN1cnJlbnRWTm9kZSxcbiAgICAgICAgICAgICAgICByZWN1cnNlQ291bnQ6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcbiAgICAgICAgY3VycmVudFZOb2RlID0gcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2Uudm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkU3RhY2s7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcbiAgICBjb25zdCBsb2dzID0gW107XG4gICAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcbiAgICAgICAgbG9ncy5wdXNoKC4uLihpID09PSAwID8gW10gOiBbYFxcbmBdKSwgLi4uZm9ybWF0VHJhY2VFbnRyeShlbnRyeSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBsb2dzO1xufVxuZnVuY3Rpb24gZm9ybWF0VHJhY2VFbnRyeSh7IHZub2RlLCByZWN1cnNlQ291bnQgfSkge1xuICAgIGNvbnN0IHBvc3RmaXggPSByZWN1cnNlQ291bnQgPiAwID8gYC4uLiAoJHtyZWN1cnNlQ291bnR9IHJlY3Vyc2l2ZSBjYWxscylgIDogYGA7XG4gICAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XG4gICAgY29uc3Qgb3BlbiA9IGAgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZSh2bm9kZS5jb21wb25lbnQsIHZub2RlLnR5cGUsIGlzUm9vdCl9YDtcbiAgICBjb25zdCBjbG9zZSA9IGA+YCArIHBvc3RmaXg7XG4gICAgcmV0dXJuIHZub2RlLnByb3BzXG4gICAgICAgID8gW29wZW4sIC4uLmZvcm1hdFByb3BzKHZub2RlLnByb3BzKSwgY2xvc2VdXG4gICAgICAgIDogW29wZW4gKyBjbG9zZV07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICAgIGtleXMuc2xpY2UoMCwgMykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICByZXMucHVzaCguLi5mb3JtYXRQcm9wKGtleSwgcHJvcHNba2V5XSkpO1xuICAgIH0pO1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgcmVzLnB1c2goYCAuLi5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBmb3JtYXRQcm9wKGtleSwgdmFsdWUsIHJhdykge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXRQcm9wKGtleSwgdG9SYXcodmFsdWUudmFsdWUpLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09UmVmPGAsIHZhbHVlLCBgPmBdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsLCB0eXBlKSB7XG4gICAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgICAgICB3YXJuKGAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIGAgKyBgZ290ICR7SlNPTi5zdHJpbmdpZnkodmFsKX0uYCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgICAgd2FybihgJHt0eXBlfSBpcyBOYU4gLSBgICsgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nKTtcbiAgICB9XG59XG5cbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSB7XG4gICAgW1wic3BcIiAvKiBMaWZlY3ljbGVIb29rcy5TRVJWRVJfUFJFRkVUQ0ggKi9dOiAnc2VydmVyUHJlZmV0Y2ggaG9vaycsXG4gICAgW1wiYmNcIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfQ1JFQVRFICovXTogJ2JlZm9yZUNyZWF0ZSBob29rJyxcbiAgICBbXCJjXCIgLyogTGlmZWN5Y2xlSG9va3MuQ1JFQVRFRCAqL106ICdjcmVhdGVkIGhvb2snLFxuICAgIFtcImJtXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX01PVU5UICovXTogJ2JlZm9yZU1vdW50IGhvb2snLFxuICAgIFtcIm1cIiAvKiBMaWZlY3ljbGVIb29rcy5NT1VOVEVEICovXTogJ21vdW50ZWQgaG9vaycsXG4gICAgW1wiYnVcIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfVVBEQVRFICovXTogJ2JlZm9yZVVwZGF0ZSBob29rJyxcbiAgICBbXCJ1XCIgLyogTGlmZWN5Y2xlSG9va3MuVVBEQVRFRCAqL106ICd1cGRhdGVkJyxcbiAgICBbXCJidW1cIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfVU5NT1VOVCAqL106ICdiZWZvcmVVbm1vdW50IGhvb2snLFxuICAgIFtcInVtXCIgLyogTGlmZWN5Y2xlSG9va3MuVU5NT1VOVEVEICovXTogJ3VubW91bnRlZCBob29rJyxcbiAgICBbXCJhXCIgLyogTGlmZWN5Y2xlSG9va3MuQUNUSVZBVEVEICovXTogJ2FjdGl2YXRlZCBob29rJyxcbiAgICBbXCJkYVwiIC8qIExpZmVjeWNsZUhvb2tzLkRFQUNUSVZBVEVEICovXTogJ2RlYWN0aXZhdGVkIGhvb2snLFxuICAgIFtcImVjXCIgLyogTGlmZWN5Y2xlSG9va3MuRVJST1JfQ0FQVFVSRUQgKi9dOiAnZXJyb3JDYXB0dXJlZCBob29rJyxcbiAgICBbXCJydGNcIiAvKiBMaWZlY3ljbGVIb29rcy5SRU5ERVJfVFJBQ0tFRCAqL106ICdyZW5kZXJUcmFja2VkIGhvb2snLFxuICAgIFtcInJ0Z1wiIC8qIExpZmVjeWNsZUhvb2tzLlJFTkRFUl9UUklHR0VSRUQgKi9dOiAncmVuZGVyVHJpZ2dlcmVkIGhvb2snLFxuICAgIFswIC8qIEVycm9yQ29kZXMuU0VUVVBfRlVOQ1RJT04gKi9dOiAnc2V0dXAgZnVuY3Rpb24nLFxuICAgIFsxIC8qIEVycm9yQ29kZXMuUkVOREVSX0ZVTkNUSU9OICovXTogJ3JlbmRlciBmdW5jdGlvbicsXG4gICAgWzIgLyogRXJyb3JDb2Rlcy5XQVRDSF9HRVRURVIgKi9dOiAnd2F0Y2hlciBnZXR0ZXInLFxuICAgIFszIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi9dOiAnd2F0Y2hlciBjYWxsYmFjaycsXG4gICAgWzQgLyogRXJyb3JDb2Rlcy5XQVRDSF9DTEVBTlVQICovXTogJ3dhdGNoZXIgY2xlYW51cCBmdW5jdGlvbicsXG4gICAgWzUgLyogRXJyb3JDb2Rlcy5OQVRJVkVfRVZFTlRfSEFORExFUiAqL106ICduYXRpdmUgZXZlbnQgaGFuZGxlcicsXG4gICAgWzYgLyogRXJyb3JDb2Rlcy5DT01QT05FTlRfRVZFTlRfSEFORExFUiAqL106ICdjb21wb25lbnQgZXZlbnQgaGFuZGxlcicsXG4gICAgWzcgLyogRXJyb3JDb2Rlcy5WTk9ERV9IT09LICovXTogJ3Zub2RlIGhvb2snLFxuICAgIFs4IC8qIEVycm9yQ29kZXMuRElSRUNUSVZFX0hPT0sgKi9dOiAnZGlyZWN0aXZlIGhvb2snLFxuICAgIFs5IC8qIEVycm9yQ29kZXMuVFJBTlNJVElPTl9IT09LICovXTogJ3RyYW5zaXRpb24gaG9vaycsXG4gICAgWzEwIC8qIEVycm9yQ29kZXMuQVBQX0VSUk9SX0hBTkRMRVIgKi9dOiAnYXBwIGVycm9ySGFuZGxlcicsXG4gICAgWzExIC8qIEVycm9yQ29kZXMuQVBQX1dBUk5fSEFORExFUiAqL106ICdhcHAgd2FybkhhbmRsZXInLFxuICAgIFsxMiAvKiBFcnJvckNvZGVzLkZVTkNUSU9OX1JFRiAqL106ICdyZWYgZnVuY3Rpb24nLFxuICAgIFsxMyAvKiBFcnJvckNvZGVzLkFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi9dOiAnYXN5bmMgY29tcG9uZW50IGxvYWRlcicsXG4gICAgWzE0IC8qIEVycm9yQ29kZXMuU0NIRURVTEVSICovXTogJ3NjaGVkdWxlciBmbHVzaC4gVGhpcyBpcyBsaWtlbHkgYSBWdWUgaW50ZXJuYWxzIGJ1Zy4gJyArXG4gICAgICAgICdQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL25ldy1pc3N1ZS52dWVqcy5vcmcvP3JlcG89dnVlanMvY29yZSdcbn07XG5mdW5jdGlvbiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgICByZXMgPSBhcmdzID8gZm4oLi4uYXJncykgOiBmbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpO1xuICAgICAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgICAgICByZXMuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm5baV0sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xuICAgIGNvbnN0IGNvbnRleHRWTm9kZSA9IGluc3RhbmNlID8gaW5zdGFuY2Uudm5vZGUgOiBudWxsO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBsZXQgY3VyID0gaW5zdGFuY2UucGFyZW50O1xuICAgICAgICAvLyB0aGUgZXhwb3NlZCBpbnN0YW5jZSBpcyB0aGUgcmVuZGVyIHByb3h5IHRvIGtlZXAgaXQgY29uc2lzdGVudCB3aXRoIDIueFxuICAgICAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcbiAgICAgICAgLy8gaW4gcHJvZHVjdGlvbiB0aGUgaG9vayByZWNlaXZlcyBvbmx5IHRoZSBlcnJvciBjb2RlXG4gICAgICAgIGNvbnN0IGVycm9ySW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IEVycm9yVHlwZVN0cmluZ3NbdHlwZV0gOiB0eXBlO1xuICAgICAgICB3aGlsZSAoY3VyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckNhcHR1cmVkSG9va3MgPSBjdXIuZWM7XG4gICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rc1tpXShlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwLWxldmVsIGhhbmRsaW5nXG4gICAgICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcbiAgICAgICAgaWYgKGFwcEVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcEVycm9ySGFuZGxlciwgbnVsbCwgMTAgLyogRXJyb3JDb2Rlcy5BUFBfRVJST1JfSEFORExFUiAqLywgW2VyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm9dKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2dFcnJvcihlcnIsIHR5cGUsIGNvbnRleHRWTm9kZSwgdGhyb3dJbkRldik7XG59XG5mdW5jdGlvbiBsb2dFcnJvcihlcnIsIHR5cGUsIGNvbnRleHRWTm9kZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBFcnJvclR5cGVTdHJpbmdzW3R5cGVdO1xuICAgICAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB3YXJuKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcbiAgICAgICAgaWYgKGNvbnRleHRWTm9kZSkge1xuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjcmFzaCBpbiBkZXYgYnkgZGVmYXVsdCBzbyBpdCdzIG1vcmUgbm90aWNlYWJsZVxuICAgICAgICBpZiAodGhyb3dJbkRldikge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyByZWNvdmVyIGluIHByb2QgdG8gcmVkdWNlIHRoZSBpbXBhY3Qgb24gZW5kLXVzZXJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxubGV0IGlzRmx1c2hpbmcgPSBmYWxzZTtcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuY29uc3QgcXVldWUgPSBbXTtcbmxldCBmbHVzaEluZGV4ID0gMDtcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcbmxldCBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xubGV0IHBvc3RGbHVzaEluZGV4ID0gMDtcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IC8qI19fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5sZXQgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSAxMDA7XG5mdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgIGNvbnN0IHAgPSBjdXJyZW50Rmx1c2hQcm9taXNlIHx8IHJlc29sdmVkUHJvbWlzZTtcbiAgICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xufVxuLy8gIzI3Njhcbi8vIFVzZSBiaW5hcnktc2VhcmNoIHRvIGZpbmQgYSBzdWl0YWJsZSBwb3NpdGlvbiBpbiB0aGUgcXVldWUsXG4vLyBzbyB0aGF0IHRoZSBxdWV1ZSBtYWludGFpbnMgdGhlIGluY3JlYXNpbmcgb3JkZXIgb2Ygam9iJ3MgaWQsXG4vLyB3aGljaCBjYW4gcHJldmVudCB0aGUgam9iIGZyb20gYmVpbmcgc2tpcHBlZCBhbmQgYWxzbyBjYW4gYXZvaWQgcmVwZWF0ZWQgcGF0Y2hpbmcuXG5mdW5jdGlvbiBmaW5kSW5zZXJ0aW9uSW5kZXgoaWQpIHtcbiAgICAvLyB0aGUgc3RhcnQgaW5kZXggc2hvdWxkIGJlIGBmbHVzaEluZGV4ICsgMWBcbiAgICBsZXQgc3RhcnQgPSBmbHVzaEluZGV4ICsgMTtcbiAgICBsZXQgZW5kID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBjb25zdCBtaWRkbGUgPSAoc3RhcnQgKyBlbmQpID4+PiAxO1xuICAgICAgICBjb25zdCBtaWRkbGVKb2JJZCA9IGdldElkKHF1ZXVlW21pZGRsZV0pO1xuICAgICAgICBtaWRkbGVKb2JJZCA8IGlkID8gKHN0YXJ0ID0gbWlkZGxlICsgMSkgOiAoZW5kID0gbWlkZGxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0O1xufVxuZnVuY3Rpb24gcXVldWVKb2Ioam9iKSB7XG4gICAgLy8gdGhlIGRlZHVwZSBzZWFyY2ggdXNlcyB0aGUgc3RhcnRJbmRleCBhcmd1bWVudCBvZiBBcnJheS5pbmNsdWRlcygpXG4gICAgLy8gYnkgZGVmYXVsdCB0aGUgc2VhcmNoIGluZGV4IGluY2x1ZGVzIHRoZSBjdXJyZW50IGpvYiB0aGF0IGlzIGJlaW5nIHJ1blxuICAgIC8vIHNvIGl0IGNhbm5vdCByZWN1cnNpdmVseSB0cmlnZ2VyIGl0c2VsZiBhZ2Fpbi5cbiAgICAvLyBpZiB0aGUgam9iIGlzIGEgd2F0Y2goKSBjYWxsYmFjaywgdGhlIHNlYXJjaCB3aWxsIHN0YXJ0IHdpdGggYSArMSBpbmRleCB0b1xuICAgIC8vIGFsbG93IGl0IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIC0gaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0b1xuICAgIC8vIGVuc3VyZSBpdCBkb2Vzbid0IGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wLlxuICAgIGlmICghcXVldWUubGVuZ3RoIHx8XG4gICAgICAgICFxdWV1ZS5pbmNsdWRlcyhqb2IsIGlzRmx1c2hpbmcgJiYgam9iLmFsbG93UmVjdXJzZSA/IGZsdXNoSW5kZXggKyAxIDogZmx1c2hJbmRleCkpIHtcbiAgICAgICAgaWYgKGpvYi5pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGpvYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UoZmluZEluc2VydGlvbkluZGV4KGpvYi5pZCksIDAsIGpvYik7XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVGbHVzaCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XG4gICAgaWYgKCFpc0ZsdXNoaW5nICYmICFpc0ZsdXNoUGVuZGluZykge1xuICAgICAgICBpc0ZsdXNoUGVuZGluZyA9IHRydWU7XG4gICAgICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGludmFsaWRhdGVKb2Ioam9iKSB7XG4gICAgY29uc3QgaSA9IHF1ZXVlLmluZGV4T2Yoam9iKTtcbiAgICBpZiAoaSA+IGZsdXNoSW5kZXgpIHtcbiAgICAgICAgcXVldWUuc3BsaWNlKGksIDEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlUG9zdEZsdXNoQ2IoY2IpIHtcbiAgICBpZiAoIWlzQXJyYXkoY2IpKSB7XG4gICAgICAgIGlmICghYWN0aXZlUG9zdEZsdXNoQ2JzIHx8XG4gICAgICAgICAgICAhYWN0aXZlUG9zdEZsdXNoQ2JzLmluY2x1ZGVzKGNiLCBjYi5hbGxvd1JlY3Vyc2UgPyBwb3N0Rmx1c2hJbmRleCArIDEgOiBwb3N0Rmx1c2hJbmRleCkpIHtcbiAgICAgICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaChjYik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGlmIGNiIGlzIGFuIGFycmF5LCBpdCBpcyBhIGNvbXBvbmVudCBsaWZlY3ljbGUgaG9vayB3aGljaCBjYW4gb25seSBiZVxuICAgICAgICAvLyB0cmlnZ2VyZWQgYnkgYSBqb2IsIHdoaWNoIGlzIGFscmVhZHkgZGVkdXBlZCBpbiB0aGUgbWFpbiBxdWV1ZSwgc29cbiAgICAgICAgLy8gd2UgY2FuIHNraXAgZHVwbGljYXRlIGNoZWNrIGhlcmUgdG8gaW1wcm92ZSBwZXJmXG4gICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaCguLi5jYik7XG4gICAgfVxuICAgIHF1ZXVlRmx1c2goKTtcbn1cbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgXG4vLyBpZiBjdXJyZW50bHkgZmx1c2hpbmcsIHNraXAgdGhlIGN1cnJlbnQgam9iIGl0c2VsZlxuaSA9IGlzRmx1c2hpbmcgPyBmbHVzaEluZGV4ICsgMSA6IDApIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZm9yICg7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjYiA9IHF1ZXVlW2ldO1xuICAgICAgICBpZiAoY2IgJiYgY2IucHJlKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XG4gICAgaWYgKHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV07XG4gICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gIzE5NDcgYWxyZWFkeSBoYXMgYWN0aXZlIHF1ZXVlLCBuZXN0ZWQgZmx1c2hQb3N0Rmx1c2hDYnMgY2FsbFxuICAgICAgICBpZiAoYWN0aXZlUG9zdEZsdXNoQ2JzKSB7XG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMucHVzaCguLi5kZWR1cGVkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBkZWR1cGVkO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xuICAgICAgICBmb3IgKHBvc3RGbHVzaEluZGV4ID0gMDsgcG9zdEZsdXNoSW5kZXggPCBhY3RpdmVQb3N0Rmx1c2hDYnMubGVuZ3RoOyBwb3N0Rmx1c2hJbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcbiAgICAgICAgcG9zdEZsdXNoSW5kZXggPSAwO1xuICAgIH1cbn1cbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBJbmZpbml0eSA6IGpvYi5pZDtcbmNvbnN0IGNvbXBhcmF0b3IgPSAoYSwgYikgPT4ge1xuICAgIGNvbnN0IGRpZmYgPSBnZXRJZChhKSAtIGdldElkKGIpO1xuICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgIGlmIChhLnByZSAmJiAhYi5wcmUpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGlmIChiLnByZSAmJiAhYS5wcmUpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmY7XG59O1xuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcbiAgICBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gICAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkIHNvIGl0cyByZW5kZXIgZWZmZWN0IHdpbGwgaGF2ZSBzbWFsbGVyXG4gICAgLy8gICAgcHJpb3JpdHkgbnVtYmVyKVxuICAgIC8vIDIuIElmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3MgdXBkYXRlLFxuICAgIC8vICAgIGl0cyB1cGRhdGUgY2FuIGJlIHNraXBwZWQuXG4gICAgcXVldWUuc29ydChjb21wYXJhdG9yKTtcbiAgICAvLyBjb25kaXRpb25hbCB1c2FnZSBvZiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZSBtdXN0IGJlIGRldGVybWluZWQgb3V0IG9mXG4gICAgLy8gdHJ5IC4uLiBjYXRjaCBibG9jayBzaW5jZSBSb2xsdXAgYnkgZGVmYXVsdCBkZS1vcHRpbWl6ZXMgdHJlZXNoYWtpbmdcbiAgICAvLyBpbnNpZGUgdHJ5LWNhdGNoLiBUaGlzIGNhbiBsZWF2ZSBhbGwgd2FybmluZyBjb2RlIHVuc2hha2VkLiBBbHRob3VnaFxuICAgIC8vIHRoZXkgd291bGQgZ2V0IGV2ZW50dWFsbHkgc2hha2VuIGJ5IGEgbWluaWZpZXIgbGlrZSB0ZXJzZXIsIHNvbWUgbWluaWZpZXJzXG4gICAgLy8gd291bGQgZmFpbCB0byBkbyB0aGF0IChlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS9ldmFudy9lc2J1aWxkL2lzc3Vlcy8xNjEwKVxuICAgIGNvbnN0IGNoZWNrID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8gKGpvYikgPT4gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGpvYilcbiAgICAgICAgOiBOT09QO1xuICAgIHRyeSB7XG4gICAgICAgIGZvciAoZmx1c2hJbmRleCA9IDA7IGZsdXNoSW5kZXggPCBxdWV1ZS5sZW5ndGg7IGZsdXNoSW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3Qgam9iID0gcXVldWVbZmx1c2hJbmRleF07XG4gICAgICAgICAgICBpZiAoam9iICYmIGpvYi5hY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjaGVjayhqb2IpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgcnVubmluZzpgLCBqb2IuaWQpXG4gICAgICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGpvYiwgbnVsbCwgMTQgLyogRXJyb3JDb2Rlcy5TQ0hFRFVMRVIgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBmbHVzaEluZGV4ID0gMDtcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbik7XG4gICAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIC8vIHNvbWUgcG9zdEZsdXNoQ2IgcXVldWVkIGpvYnMhXG4gICAgICAgIC8vIGtlZXAgZmx1c2hpbmcgdW50aWwgaXQgZHJhaW5zLlxuICAgICAgICBpZiAocXVldWUubGVuZ3RoIHx8IHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmbHVzaEpvYnMoc2Vlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcbiAgICBpZiAoIXNlZW4uaGFzKGZuKSkge1xuICAgICAgICBzZWVuLnNldChmbiwgMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjb3VudCA9IHNlZW4uZ2V0KGZuKTtcbiAgICAgICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGZuLm93bmVySW5zdGFuY2U7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnROYW1lID0gaW5zdGFuY2UgJiYgZ2V0Q29tcG9uZW50TmFtZShpbnN0YW5jZS50eXBlKTtcbiAgICAgICAgICAgIHdhcm4oYE1heGltdW0gcmVjdXJzaXZlIHVwZGF0ZXMgZXhjZWVkZWQke2NvbXBvbmVudE5hbWUgPyBgIGluIGNvbXBvbmVudCA8JHtjb21wb25lbnROYW1lfT5gIDogYGB9LiBgICtcbiAgICAgICAgICAgICAgICBgVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gYCArXG4gICAgICAgICAgICAgICAgYGRlcGVuZGVuY2llcyBhbmQgdGh1cyByZWN1cnNpdmVseSB0cmlnZ2VyaW5nIGl0c2VsZi4gUG9zc2libGUgc291cmNlcyBgICtcbiAgICAgICAgICAgICAgICBgaW5jbHVkZSBjb21wb25lbnQgdGVtcGxhdGUsIHJlbmRlciBmdW5jdGlvbiwgdXBkYXRlZCBob29rIG9yIGAgK1xuICAgICAgICAgICAgICAgIGB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2Vlbi5zZXQoZm4sIGNvdW50ICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcbmNvbnN0IGhtckRpcnR5Q29tcG9uZW50cyA9IG5ldyBTZXQoKTtcbi8vIEV4cG9zZSB0aGUgSE1SIHJ1bnRpbWUgb24gdGhlIGdsb2JhbCBvYmplY3Rcbi8vIFRoaXMgbWFrZXMgaXQgZW50aXJlbHkgdHJlZS1zaGFrYWJsZSB3aXRob3V0IHBvbGx1dGluZyB0aGUgZXhwb3J0cyBhbmQgbWFrZXNcbi8vIGl0IGVhc2llciB0byBiZSB1c2VkIGluIHRvb2xpbmdzIGxpa2UgdnVlLWxvYWRlclxuLy8gTm90ZTogZm9yIGEgY29tcG9uZW50IHRvIGJlIGVsaWdpYmxlIGZvciBITVIgaXQgYWxzbyBuZWVkcyB0aGUgX19obXJJZCBvcHRpb25cbi8vIHRvIGJlIHNldCBzbyB0aGF0IGl0cyBpbnN0YW5jZXMgY2FuIGJlIHJlZ2lzdGVyZWQgLyByZW1vdmVkLlxuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9ITVJfUlVOVElNRV9fID0ge1xuICAgICAgICBjcmVhdGVSZWNvcmQ6IHRyeVdyYXAoY3JlYXRlUmVjb3JkKSxcbiAgICAgICAgcmVyZW5kZXI6IHRyeVdyYXAocmVyZW5kZXIpLFxuICAgICAgICByZWxvYWQ6IHRyeVdyYXAocmVsb2FkKVxuICAgIH07XG59XG5jb25zdCBtYXAgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiByZWdpc3RlckhNUihpbnN0YW5jZSkge1xuICAgIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xuICAgIGxldCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlY29yZCkge1xuICAgICAgICBjcmVhdGVSZWNvcmQoaWQsIGluc3RhbmNlLnR5cGUpO1xuICAgICAgICByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICB9XG4gICAgcmVjb3JkLmluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gdW5yZWdpc3RlckhNUihpbnN0YW5jZSkge1xuICAgIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgaW5pdGlhbERlZikge1xuICAgIGlmIChtYXAuaGFzKGlkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG1hcC5zZXQoaWQsIHtcbiAgICAgICAgaW5pdGlhbERlZjogbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5pdGlhbERlZiksXG4gICAgICAgIGluc3RhbmNlczogbmV3IFNldCgpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICByZXR1cm4gaXNDbGFzc0NvbXBvbmVudChjb21wb25lbnQpID8gY29tcG9uZW50Ll9fdmNjT3B0cyA6IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyKGlkLCBuZXdSZW5kZXIpIHtcbiAgICBjb25zdCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlY29yZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHVwZGF0ZSBpbml0aWFsIHJlY29yZCAoZm9yIG5vdC15ZXQtcmVuZGVyZWQgY29tcG9uZW50KVxuICAgIHJlY29yZC5pbml0aWFsRGVmLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICBbLi4ucmVjb3JkLmluc3RhbmNlc10uZm9yRWFjaChpbnN0YW5jZSA9PiB7XG4gICAgICAgIGlmIChuZXdSZW5kZXIpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgICAgICAgIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5yZW5kZXJDYWNoZSA9IFtdO1xuICAgICAgICAvLyB0aGlzIGZsYWcgZm9yY2VzIGNoaWxkIGNvbXBvbmVudHMgd2l0aCBzbG90IGNvbnRlbnQgdG8gdXBkYXRlXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcmVsb2FkKGlkLCBuZXdDb21wKSB7XG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gICAgaWYgKCFyZWNvcmQpXG4gICAgICAgIHJldHVybjtcbiAgICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XG4gICAgLy8gdXBkYXRlIGluaXRpYWwgZGVmIChmb3Igbm90LXlldC1yZW5kZXJlZCBjb21wb25lbnRzKVxuICAgIHVwZGF0ZUNvbXBvbmVudERlZihyZWNvcmQuaW5pdGlhbERlZiwgbmV3Q29tcCk7XG4gICAgLy8gY3JlYXRlIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmcgdXBkYXRlc1xuICAgIGNvbnN0IGluc3RhbmNlcyA9IFsuLi5yZWNvcmQuaW5zdGFuY2VzXTtcbiAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xuICAgICAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XG4gICAgICAgIGlmICghaG1yRGlydHlDb21wb25lbnRzLmhhcyhvbGRDb21wKSkge1xuICAgICAgICAgICAgLy8gMS4gVXBkYXRlIGV4aXN0aW5nIGNvbXAgZGVmaW5pdGlvbiB0byBtYXRjaCBuZXcgb25lXG4gICAgICAgICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnREZWYob2xkQ29tcCwgbmV3Q29tcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAyLiBtYXJrIGRlZmluaXRpb24gZGlydHkuIFRoaXMgZm9yY2VzIHRoZSByZW5kZXJlciB0byByZXBsYWNlIHRoZVxuICAgICAgICAgICAgLy8gY29tcG9uZW50IG9uIHBhdGNoLlxuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmFkZChvbGRDb21wKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBpbnZhbGlkYXRlIG9wdGlvbnMgcmVzb2x1dGlvbiBjYWNoZVxuICAgICAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgICAgIC8vIDQuIGFjdHVhbGx5IHVwZGF0ZVxuICAgICAgICBpZiAoaW5zdGFuY2UuY2VSZWxvYWQpIHtcbiAgICAgICAgICAgIC8vIGN1c3RvbSBlbGVtZW50XG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuYWRkKG9sZENvbXApO1xuICAgICAgICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShvbGRDb21wKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIDQuIEZvcmNlIHRoZSBwYXJlbnQgaW5zdGFuY2UgdG8gcmUtcmVuZGVyLiBUaGlzIHdpbGwgY2F1c2UgYWxsIHVwZGF0ZWRcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudHMgdG8gYmUgdW5tb3VudGVkIGFuZCByZS1tb3VudGVkLiBRdWV1ZSB0aGUgdXBkYXRlIHNvIHRoYXQgd2VcbiAgICAgICAgICAgIC8vIGRvbid0IGVuZCB1cCBmb3JjaW5nIHRoZSBzYW1lIHBhcmVudCB0byByZS1yZW5kZXIgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCkge1xuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBtb3VudGVkIHZpYSBjcmVhdGVBcHAoKSBoYXMgYSByZWxvYWQgbWV0aG9kXG4gICAgICAgICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIGluc2lkZSB0cmVlIGNyZWF0ZWQgdmlhIHJhdyByZW5kZXIoKS4gRm9yY2UgcmVsb2FkLlxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbSE1SXSBSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIDUuIG1ha2Ugc3VyZSB0byBjbGVhbnVwIGRpcnR5IGhtciBjb21wb25lbnRzIGFmdGVyIHVwZGF0ZVxuICAgIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKSB7XG4gICAgZXh0ZW5kKG9sZENvbXAsIG5ld0NvbXApO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9sZENvbXApIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJ19fZmlsZScgJiYgIShrZXkgaW4gbmV3Q29tcCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvbGRDb21wW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XG4gICAgcmV0dXJuIChpZCwgYXJnKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtITVJdIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBWdWUgY29tcG9uZW50IGhvdC1yZWxvYWQuIGAgK1xuICAgICAgICAgICAgICAgIGBGdWxsIHJlbG9hZCByZXF1aXJlZC5gKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmxldCBkZXZ0b29scztcbmxldCBidWZmZXIgPSBbXTtcbmxldCBkZXZ0b29sc05vdEluc3RhbGxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdCQxKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBlbHNlIGlmICghZGV2dG9vbHNOb3RJbnN0YWxsZWQpIHtcbiAgICAgICAgYnVmZmVyLnB1c2goeyBldmVudCwgYXJncyB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXREZXZ0b29sc0hvb2soaG9vaywgdGFyZ2V0KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBkZXZ0b29scyA9IGhvb2s7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scy5lbWl0KGV2ZW50LCAuLi5hcmdzKSk7XG4gICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAvLyBoYW5kbGUgbGF0ZSBkZXZ0b29scyBpbmplY3Rpb24gLSBvbmx5IGRvIHRoaXMgaWYgd2UgYXJlIGluIGFuIGFjdHVhbFxuICAgIC8vIGJyb3dzZXIgZW52aXJvbm1lbnQgdG8gYXZvaWQgdGhlIHRpbWVyIGhhbmRsZSBzdGFsbGluZyB0ZXN0IHJ1bm5lciBleGl0XG4gICAgLy8gKCM0ODE1KVxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIC8vIHNvbWUgZW52cyBtb2NrIHdpbmRvdyBidXQgbm90IGZ1bGx5XG4gICAgICAgIHdpbmRvdy5IVE1MRWxlbWVudCAmJlxuICAgICAgICAvLyBhbHNvIGV4Y2x1ZGUganNkb21cbiAgICAgICAgISgoX2IgPSAoX2EgPSB3aW5kb3cubmF2aWdhdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXNlckFnZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoJ2pzZG9tJykpKSB7XG4gICAgICAgIGNvbnN0IHJlcGxheSA9ICh0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9XG4gICAgICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyB8fCBbXSk7XG4gICAgICAgIHJlcGxheS5wdXNoKChuZXdIb29rKSA9PiB7XG4gICAgICAgICAgICBzZXREZXZ0b29sc0hvb2sobmV3SG9vaywgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNsZWFyIGJ1ZmZlciBhZnRlciAzcyAtIHRoZSB1c2VyIHByb2JhYmx5IGRvZXNuJ3QgaGF2ZSBkZXZ0b29scyBpbnN0YWxsZWRcbiAgICAgICAgLy8gYXQgYWxsLCBhbmQga2VlcGluZyB0aGUgYnVmZmVyIHdpbGwgY2F1c2UgbWVtb3J5IGxlYWtzICgjNDczOClcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRldnRvb2xzKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSBudWxsO1xuICAgICAgICAgICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMzAwMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBub24tYnJvd3NlciBlbnYsIGFzc3VtZSBub3QgaW5zdGFsbGVkXG4gICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbikge1xuICAgIGVtaXQkMShcImFwcDppbml0XCIgLyogRGV2dG9vbHNIb29rcy5BUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XG4gICAgICAgIEZyYWdtZW50LFxuICAgICAgICBUZXh0LFxuICAgICAgICBDb21tZW50LFxuICAgICAgICBTdGF0aWNcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcbiAgICBlbWl0JDEoXCJhcHA6dW5tb3VudFwiIC8qIERldnRvb2xzSG9va3MuQVBQX1VOTU9VTlQgKi8sIGFwcCk7XG59XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudEFkZGVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6YWRkZWRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9BRERFRCAqLyk7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQgPSBcbi8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnVwZGF0ZWRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9VUERBVEVEICovKTtcbmNvbnN0IF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogRGV2dG9vbHNIb29rcy5DT01QT05FTlRfUkVNT1ZFRCAqLyk7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAoY29tcG9uZW50KSA9PiB7XG4gICAgaWYgKGRldnRvb2xzICYmXG4gICAgICAgIHR5cGVvZiBkZXZ0b29scy5jbGVhbnVwQnVmZmVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgY29tcG9uZW50IGlmIGl0IHdhc24ndCBidWZmZXJlZFxuICAgICAgICAhZGV2dG9vbHMuY2xlYW51cEJ1ZmZlcihjb21wb25lbnQpKSB7XG4gICAgICAgIF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoY29tcG9uZW50KTtcbiAgICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCkgPT4ge1xuICAgICAgICBlbWl0JDEoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQucGFyZW50ID8gY29tcG9uZW50LnBhcmVudC51aWQgOiB1bmRlZmluZWQsIGNvbXBvbmVudCk7XG4gICAgfTtcbn1cbmNvbnN0IGRldnRvb2xzUGVyZlN0YXJ0ID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6c3RhcnRcIiAvKiBEZXZ0b29sc0hvb2tzLlBFUkZPUk1BTkNFX1NUQVJUICovKTtcbmNvbnN0IGRldnRvb2xzUGVyZkVuZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOmVuZFwiIC8qIERldnRvb2xzSG9va3MuUEVSRk9STUFOQ0VfRU5EICovKTtcbmZ1bmN0aW9uIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKGhvb2spIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCwgdHlwZSwgdGltZSkgPT4ge1xuICAgICAgICBlbWl0JDEoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQsIHR5cGUsIHRpbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiBkZXZ0b29sc0NvbXBvbmVudEVtaXQoY29tcG9uZW50LCBldmVudCwgcGFyYW1zKSB7XG4gICAgZW1pdCQxKFwiY29tcG9uZW50OmVtaXRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9FTUlUICovLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGVtaXQoaW5zdGFuY2UsIGV2ZW50LCAuLi5yYXdBcmdzKSB7XG4gICAgaWYgKGluc3RhbmNlLmlzVW5tb3VudGVkKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCB7IGVtaXRzT3B0aW9ucywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGlmIChlbWl0c09wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghKGV2ZW50IGluIGVtaXRzT3B0aW9ucykgJiZcbiAgICAgICAgICAgICAgICAhKGZhbHNlICkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BzT3B0aW9ucyB8fCAhKHRvSGFuZGxlcktleShldmVudCkgaW4gcHJvcHNPcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgZW1pdHRlZCBldmVudCBcIiR7ZXZlbnR9XCIgYnV0IGl0IGlzIG5laXRoZXIgZGVjbGFyZWQgaW4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGhlIGVtaXRzIG9wdGlvbiBub3IgYXMgYW4gXCIke3RvSGFuZGxlcktleShldmVudCl9XCIgcHJvcC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBlbWl0c09wdGlvbnNbZXZlbnRdO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbGlkYXRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvciguLi5yYXdBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIGV2ZW50IGFyZ3VtZW50czogZXZlbnQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGV2ZW50IFwiJHtldmVudH1cIi5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgYXJncyA9IHJhd0FyZ3M7XG4gICAgY29uc3QgaXNNb2RlbExpc3RlbmVyID0gZXZlbnQuc3RhcnRzV2l0aCgndXBkYXRlOicpO1xuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhcHBseSBtb2RpZmllcnMgb24gYXJnc1xuICAgIGNvbnN0IG1vZGVsQXJnID0gaXNNb2RlbExpc3RlbmVyICYmIGV2ZW50LnNsaWNlKDcpO1xuICAgIGlmIChtb2RlbEFyZyAmJiBtb2RlbEFyZyBpbiBwcm9wcykge1xuICAgICAgICBjb25zdCBtb2RpZmllcnNLZXkgPSBgJHttb2RlbEFyZyA9PT0gJ21vZGVsVmFsdWUnID8gJ21vZGVsJyA6IG1vZGVsQXJnfU1vZGlmaWVyc2A7XG4gICAgICAgIGNvbnN0IHsgbnVtYmVyLCB0cmltIH0gPSBwcm9wc1ttb2RpZmllcnNLZXldIHx8IEVNUFRZX09CSjtcbiAgICAgICAgaWYgKHRyaW0pIHtcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcChhID0+IChpc1N0cmluZyhhKSA/IGEudHJpbSgpIDogYSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1iZXIpIHtcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcChsb29zZVRvTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEVtaXQoaW5zdGFuY2UsIGV2ZW50LCBhcmdzKTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgcHJvcHNbdG9IYW5kbGVyS2V5KGxvd2VyQ2FzZUV2ZW50KV0pIHtcbiAgICAgICAgICAgIHdhcm4oYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBgICtcbiAgICAgICAgICAgICAgICBgJHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0gYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFwiJHtldmVudH1cIi4gYCArXG4gICAgICAgICAgICAgICAgYE5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIGAgK1xuICAgICAgICAgICAgICAgIGB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gYCArXG4gICAgICAgICAgICAgICAgYFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFwiJHtoeXBoZW5hdGUoZXZlbnQpfVwiIGluc3RlYWQgb2YgXCIke2V2ZW50fVwiLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBoYW5kbGVyTmFtZTtcbiAgICBsZXQgaGFuZGxlciA9IHByb3BzWyhoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShldmVudCkpXSB8fFxuICAgICAgICAvLyBhbHNvIHRyeSBjYW1lbENhc2UgZXZlbnQgaGFuZGxlciAoIzIyNDkpXG4gICAgICAgIHByb3BzWyhoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpKV07XG4gICAgLy8gZm9yIHYtbW9kZWwgdXBkYXRlOnh4eCBldmVudHMsIGFsc28gdHJpZ2dlciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRcbiAgICAvLyBmb3IgcHJvcHMgcGFzc2VkIHZpYSBrZWJhYi1jYXNlXG4gICAgaWYgKCFoYW5kbGVyICYmIGlzTW9kZWxMaXN0ZW5lcikge1xuICAgICAgICBoYW5kbGVyID0gcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGh5cGhlbmF0ZShldmVudCkpKV07XG4gICAgfVxuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIEVycm9yQ29kZXMuQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xuICAgIH1cbiAgICBjb25zdCBvbmNlSGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lICsgYE9uY2VgXTtcbiAgICBpZiAob25jZUhhbmRsZXIpIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5lbWl0dGVkKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5lbWl0dGVkID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSA9IHRydWU7XG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKG9uY2VIYW5kbGVyLCBpbnN0YW5jZSwgNiAvKiBFcnJvckNvZGVzLkNPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovLCBhcmdzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVFbWl0c09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgY2FjaGUgPSBhcHBDb250ZXh0LmVtaXRzQ2FjaGU7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICAgIGlmIChjYWNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCByYXcgPSBjb21wLmVtaXRzO1xuICAgIGxldCBub3JtYWxpemVkID0ge307XG4gICAgLy8gYXBwbHkgbWl4aW4vZXh0ZW5kcyBwcm9wc1xuICAgIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5kRW1pdHMgPSAocmF3KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkRnJvbUV4dGVuZCA9IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhyYXcsIGFwcENvbnRleHQsIHRydWUpO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRGcm9tRXh0ZW5kKSB7XG4gICAgICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIG5vcm1hbGl6ZWRGcm9tRXh0ZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXAuZXh0ZW5kcykge1xuICAgICAgICAgICAgZXh0ZW5kRW1pdHMoY29tcC5leHRlbmRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcC5taXhpbnMpIHtcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XG4gICAgICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGNvbXAsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgICAgIHJhdy5mb3JFYWNoKGtleSA9PiAobm9ybWFsaXplZFtrZXldID0gbnVsbCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHJhdyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgICBjYWNoZS5zZXQoY29tcCwgbm9ybWFsaXplZCk7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkO1xufVxuLy8gQ2hlY2sgaWYgYW4gaW5jb21pbmcgcHJvcCBrZXkgaXMgYSBkZWNsYXJlZCBlbWl0IGV2ZW50IGxpc3RlbmVyLlxuLy8gZS5nLiBXaXRoIGBlbWl0czogeyBjbGljazogbnVsbCB9YCwgcHJvcHMgbmFtZWQgYG9uQ2xpY2tgIGFuZCBgb25jbGlja2AgYXJlXG4vLyBib3RoIGNvbnNpZGVyZWQgbWF0Y2hlZCBsaXN0ZW5lcnMuXG5mdW5jdGlvbiBpc0VtaXRMaXN0ZW5lcihvcHRpb25zLCBrZXkpIHtcbiAgICBpZiAoIW9wdGlvbnMgfHwgIWlzT24oa2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGtleSA9IGtleS5zbGljZSgyKS5yZXBsYWNlKC9PbmNlJC8sICcnKTtcbiAgICByZXR1cm4gKGhhc093bihvcHRpb25zLCBrZXlbMF0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgxKSkgfHxcbiAgICAgICAgaGFzT3duKG9wdGlvbnMsIGh5cGhlbmF0ZShrZXkpKSB8fFxuICAgICAgICBoYXNPd24ob3B0aW9ucywga2V5KSk7XG59XG5cbi8qKlxuICogbWFyayB0aGUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2UgZm9yIGFzc2V0IHJlc29sdXRpb24gKGUuZy5cbiAqIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUpIGR1cmluZyByZW5kZXJcbiAqL1xubGV0IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5sZXQgY3VycmVudFNjb3BlSWQgPSBudWxsO1xuLyoqXG4gKiBOb3RlOiByZW5kZXJpbmcgY2FsbHMgbWF5YmUgbmVzdGVkLiBUaGUgZnVuY3Rpb24gcmV0dXJucyB0aGUgcGFyZW50IHJlbmRlcmluZ1xuICogaW5zdGFuY2UgaWYgcHJlc2VudCwgd2hpY2ggc2hvdWxkIGJlIHJlc3RvcmVkIGFmdGVyIHRoZSByZW5kZXIgaXMgZG9uZTpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcHJldiA9IHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpKVxuICogLy8gLi4ucmVuZGVyXG4gKiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldilcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBwcmV2ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIGN1cnJlbnRTY29wZUlkID0gKGluc3RhbmNlICYmIGluc3RhbmNlLnR5cGUuX19zY29wZUlkKSB8fCBudWxsO1xuICAgIHJldHVybiBwcmV2O1xufVxuLyoqXG4gKiBTZXQgc2NvcGUgaWQgd2hlbiBjcmVhdGluZyBob2lzdGVkIHZub2Rlcy5cbiAqIEBwcml2YXRlIGNvbXBpbGVyIGhlbHBlclxuICovXG5mdW5jdGlvbiBwdXNoU2NvcGVJZChpZCkge1xuICAgIGN1cnJlbnRTY29wZUlkID0gaWQ7XG59XG4vKipcbiAqIFRlY2huaWNhbGx5IHdlIG5vIGxvbmdlciBuZWVkIHRoaXMgYWZ0ZXIgMy4wLjggYnV0IHdlIG5lZWQgdG8ga2VlcCB0aGUgc2FtZVxuICogQVBJIGZvciBiYWNrd2FyZHMgY29tcGF0IHcvIGNvZGUgZ2VuZXJhdGVkIGJ5IGNvbXBpbGVycy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBvcFNjb3BlSWQoKSB7XG4gICAgY3VycmVudFNjb3BlSWQgPSBudWxsO1xufVxuLyoqXG4gKiBPbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB3aXRoU2NvcGVJZCA9IChfaWQpID0+IHdpdGhDdHg7XG4vKipcbiAqIFdyYXAgYSBzbG90IGZ1bmN0aW9uIHRvIG1lbW9pemUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2VcbiAqIEBwcml2YXRlIGNvbXBpbGVyIGhlbHBlclxuICovXG5mdW5jdGlvbiB3aXRoQ3R4KGZuLCBjdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsIGlzTm9uU2NvcGVkU2xvdCAvLyBmYWxzZSBvbmx5XG4pIHtcbiAgICBpZiAoIWN0eClcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIC8vIGFscmVhZHkgbm9ybWFsaXplZFxuICAgIGlmIChmbi5fbikge1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfVxuICAgIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAvLyBJZiBhIHVzZXIgY2FsbHMgYSBjb21waWxlZCBzbG90IGluc2lkZSBhIHRlbXBsYXRlIGV4cHJlc3Npb24gKCMxNzQ1KSwgaXRcbiAgICAgICAgLy8gY2FuIG1lc3MgdXAgYmxvY2sgdHJhY2tpbmcsIHNvIGJ5IGRlZmF1bHQgd2UgZGlzYWJsZSBibG9jayB0cmFja2luZyBhbmRcbiAgICAgICAgLy8gZm9yY2UgYmFpbCBvdXQgd2hlbiBpbnZva2luZyBhIGNvbXBpbGVkIHNsb3QgKGluZGljYXRlZCBieSB0aGUgLl9kIGZsYWcpLlxuICAgICAgICAvLyBUaGlzIGlzbid0IG5lY2Vzc2FyeSBpZiByZW5kZXJpbmcgYSBjb21waWxlZCBgPHNsb3Q+YCwgc28gd2UgZmxpcCB0aGVcbiAgICAgICAgLy8gLl9kIGZsYWcgb2ZmIHdoZW4gaW52b2tpbmcgdGhlIHdyYXBwZWQgZm4gaW5zaWRlIGByZW5kZXJTbG90YC5cbiAgICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgICAgICAgIHNldEJsb2NrVHJhY2tpbmcoLTEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZJbnN0YW5jZSA9IHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShjdHgpO1xuICAgICAgICBsZXQgcmVzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzID0gZm4oLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldkluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XG4gICAgICAgICAgICAgICAgc2V0QmxvY2tUcmFja2luZygxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIC8vIG1hcmsgbm9ybWFsaXplZCB0byBhdm9pZCBkdXBsaWNhdGVkIHdyYXBwaW5nXG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fbiA9IHRydWU7XG4gICAgLy8gbWFyayB0aGlzIGFzIGNvbXBpbGVkIGJ5IGRlZmF1bHRcbiAgICAvLyB0aGlzIGlzIHVzZWQgaW4gdm5vZGUudHMgLT4gbm9ybWFsaXplQ2hpbGRyZW4oKSB0byBzZXQgdGhlIHNsb3RcbiAgICAvLyByZW5kZXJpbmcgZmxhZy5cbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9jID0gdHJ1ZTtcbiAgICAvLyBkaXNhYmxlIGJsb2NrIHRyYWNraW5nIGJ5IGRlZmF1bHRcbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9kID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVuZGVyRm5XaXRoQ29udGV4dDtcbn1cblxuLyoqXG4gKiBkZXYgb25seSBmbGFnIHRvIHRyYWNrIHdoZXRoZXIgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIuXG4gKiBJZiAkYXR0cnMgd2FzIHVzZWQgZHVyaW5nIHJlbmRlciB0aGVuIHRoZSB3YXJuaW5nIGZvciBmYWlsZWQgYXR0cnNcbiAqIGZhbGx0aHJvdWdoIGNhbiBiZSBzdXBwcmVzc2VkLlxuICovXG5sZXQgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xuZnVuY3Rpb24gbWFya0F0dHJzQWNjZXNzZWQoKSB7XG4gICAgYWNjZXNzZWRBdHRycyA9IHRydWU7XG59XG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSB7XG4gICAgY29uc3QgeyB0eXBlOiBDb21wb25lbnQsIHZub2RlLCBwcm94eSwgd2l0aFByb3h5LCBwcm9wcywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSwgc2xvdHMsIGF0dHJzLCBlbWl0LCByZW5kZXIsIHJlbmRlckNhY2hlLCBkYXRhLCBzZXR1cFN0YXRlLCBjdHgsIGluaGVyaXRBdHRycyB9ID0gaW5zdGFuY2U7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgZmFsbHRocm91Z2hBdHRycztcbiAgICBjb25zdCBwcmV2ID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGluc3RhbmNlKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU2hhcGVGbGFncy5TVEFURUZVTF9DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgIC8vIHdpdGhQcm94eSBpcyBhIHByb3h5IHdpdGggYSBkaWZmZXJlbnQgYGhhc2AgdHJhcCBvbmx5IGZvclxuICAgICAgICAgICAgLy8gcnVudGltZS1jb21waWxlZCByZW5kZXIgZnVuY3Rpb25zIHVzaW5nIGB3aXRoYCBibG9jay5cbiAgICAgICAgICAgIGNvbnN0IHByb3h5VG9Vc2UgPSB3aXRoUHJveHkgfHwgcHJveHk7XG4gICAgICAgICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShyZW5kZXIuY2FsbChwcm94eVRvVXNlLCBwcm94eVRvVXNlLCByZW5kZXJDYWNoZSwgcHJvcHMsIHNldHVwU3RhdGUsIGRhdGEsIGN0eCkpO1xuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGF0dHJzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbFxuICAgICAgICAgICAgY29uc3QgcmVuZGVyID0gQ29tcG9uZW50O1xuICAgICAgICAgICAgLy8gaW4gZGV2LCBtYXJrIGF0dHJzIGFjY2Vzc2VkIGlmIG9wdGlvbmFsIHByb3BzIChhdHRycyA9PT0gcHJvcHMpXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGF0dHJzID09PSBwcm9wcykge1xuICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShyZW5kZXIubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgID8gcmVuZGVyKHByb3BzLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7IGF0dHJzLCBzbG90cywgZW1pdCB9KVxuICAgICAgICAgICAgICAgIDogcmVuZGVyKHByb3BzLCBudWxsIC8qIHdlIGtub3cgaXQgZG9lc24ndCBuZWVkIGl0ICovKSk7XG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gQ29tcG9uZW50LnByb3BzXG4gICAgICAgICAgICAgICAgPyBhdHRyc1xuICAgICAgICAgICAgICAgIDogZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoKGF0dHJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGJsb2NrU3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMSAvKiBFcnJvckNvZGVzLlJFTkRFUl9GVU5DVElPTiAqLyk7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xuICAgIH1cbiAgICAvLyBhdHRyIG1lcmdpbmdcbiAgICAvLyBpbiBkZXYgbW9kZSwgY29tbWVudHMgYXJlIHByZXNlcnZlZCwgYW5kIGl0J3MgcG9zc2libGUgZm9yIGEgdGVtcGxhdGVcbiAgICAvLyB0byBoYXZlIGNvbW1lbnRzIGFsb25nIHNpZGUgdGhlIHJvb3QgZWxlbWVudCB3aGljaCBtYWtlcyBpdCBhIGZyYWdtZW50XG4gICAgbGV0IHJvb3QgPSByZXN1bHQ7XG4gICAgbGV0IHNldFJvb3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICByZXN1bHQucGF0Y2hGbGFnID4gMCAmJlxuICAgICAgICByZXN1bHQucGF0Y2hGbGFnICYgMjA0OCAvKiBQYXRjaEZsYWdzLkRFVl9ST09UX0ZSQUdNRU5UICovKSB7XG4gICAgICAgIFtyb290LCBzZXRSb290XSA9IGdldENoaWxkUm9vdChyZXN1bHQpO1xuICAgIH1cbiAgICBpZiAoZmFsbHRocm91Z2hBdHRycyAmJiBpbmhlcml0QXR0cnMgIT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHJvb3Q7XG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmICgxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyB8IDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzT3B0aW9ucyAmJiBrZXlzLnNvbWUoaXNNb2RlbExpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHYtbW9kZWwgbGlzdGVuZXIgKG9uVXBkYXRlOnh4eCkgaGFzIGEgY29ycmVzcG9uZGluZyBkZWNsYXJlZFxuICAgICAgICAgICAgICAgICAgICAvLyBwcm9wLCBpdCBpbmRpY2F0ZXMgdGhpcyBjb21wb25lbnQgZXhwZWN0cyB0byBoYW5kbGUgdi1tb2RlbCBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgc2hvdWxkIG5vdCBmYWxsdGhyb3VnaC5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVsYXRlZDogIzE1NDMsICMxNjQzLCAjMTk4OVxuICAgICAgICAgICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gZmlsdGVyTW9kZWxMaXN0ZW5lcnMoZmFsbHRocm91Z2hBdHRycywgcHJvcHNPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm9vdCA9IGNsb25lVk5vZGUocm9vdCwgZmFsbHRocm91Z2hBdHRycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWFjY2Vzc2VkQXR0cnMgJiYgcm9vdC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsQXR0cnMgPSBPYmplY3Qua2V5cyhhdHRycyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRBdHRycyA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhQXR0cnMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFsbEF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBhbGxBdHRyc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIHYtbW9kZWwgaGFuZGxlcnMgd2hlbiB0aGV5IGZhaWwgdG8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgYG9uYCwgbG93ZXJjYXNlIGZpcnN0IGxldHRlciB0byByZWZsZWN0IGV2ZW50IGNhc2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFjY3VyYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEF0dHJzLnB1c2goa2V5WzJdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFBdHRycy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhQXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEV4dHJhbmVvdXMgbm9uLXByb3BzIGF0dHJpYnV0ZXMgKGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCR7ZXh0cmFBdHRycy5qb2luKCcsICcpfSkgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgd2VyZSBwYXNzZWQgdG8gY29tcG9uZW50IGJ1dCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgYmVjYXVzZSBjb21wb25lbnQgcmVuZGVycyBmcmFnbWVudCBvciB0ZXh0IHJvb3Qgbm9kZXMuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChldmVudEF0dHJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBFeHRyYW5lb3VzIG5vbi1lbWl0cyBldmVudCBsaXN0ZW5lcnMgKGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCR7ZXZlbnRBdHRycy5qb2luKCcsICcpfSkgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgd2VyZSBwYXNzZWQgdG8gY29tcG9uZW50IGJ1dCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgYmVjYXVzZSBjb21wb25lbnQgcmVuZGVycyBmcmFnbWVudCBvciB0ZXh0IHJvb3Qgbm9kZXMuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYElmIHRoZSBsaXN0ZW5lciBpcyBpbnRlbmRlZCB0byBiZSBhIGNvbXBvbmVudCBjdXN0b20gZXZlbnQgbGlzdGVuZXIgb25seSwgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgZGVjbGFyZSBpdCB1c2luZyB0aGUgXCJlbWl0c1wiIG9wdGlvbi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gaW5oZXJpdCBkaXJlY3RpdmVzXG4gICAgaWYgKHZub2RlLmRpcnMpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNFbGVtZW50Um9vdChyb290KSkge1xuICAgICAgICAgICAgd2FybihgUnVudGltZSBkaXJlY3RpdmUgdXNlZCBvbiBjb21wb25lbnQgd2l0aCBub24tZWxlbWVudCByb290IG5vZGUuIGAgK1xuICAgICAgICAgICAgICAgIGBUaGUgZGlyZWN0aXZlcyB3aWxsIG5vdCBmdW5jdGlvbiBhcyBpbnRlbmRlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjbG9uZSBiZWZvcmUgbXV0YXRpbmcgc2luY2UgdGhlIHJvb3QgbWF5IGJlIGEgaG9pc3RlZCB2bm9kZVxuICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290KTtcbiAgICAgICAgcm9vdC5kaXJzID0gcm9vdC5kaXJzID8gcm9vdC5kaXJzLmNvbmNhdCh2bm9kZS5kaXJzKSA6IHZub2RlLmRpcnM7XG4gICAgfVxuICAgIC8vIGluaGVyaXQgdHJhbnNpdGlvbiBkYXRhXG4gICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNFbGVtZW50Um9vdChyb290KSkge1xuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGluc2lkZSA8VHJhbnNpdGlvbj4gcmVuZGVycyBub24tZWxlbWVudCByb290IG5vZGUgYCArXG4gICAgICAgICAgICAgICAgYHRoYXQgY2Fubm90IGJlIGFuaW1hdGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJvb3QudHJhbnNpdGlvbiA9IHZub2RlLnRyYW5zaXRpb247XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2V0Um9vdCkge1xuICAgICAgICBzZXRSb290KHJvb3QpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gcm9vdDtcbiAgICB9XG4gICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKHByZXYpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKiBJbiBkZXYgbW9kZSwgdGVtcGxhdGUgcm9vdCBsZXZlbCBjb21tZW50cyBhcmUgcmVuZGVyZWQsIHdoaWNoIHR1cm5zIHRoZVxuICogdGVtcGxhdGUgaW50byBhIGZyYWdtZW50IHJvb3QsIGJ1dCB3ZSBuZWVkIHRvIGxvY2F0ZSB0aGUgc2luZ2xlIGVsZW1lbnRcbiAqIHJvb3QgZm9yIGF0dHJzIGFuZCBzY29wZSBpZCBwcm9jZXNzaW5nLlxuICovXG5jb25zdCBnZXRDaGlsZFJvb3QgPSAodm5vZGUpID0+IHtcbiAgICBjb25zdCByYXdDaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGNvbnN0IGR5bmFtaWNDaGlsZHJlbiA9IHZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBjaGlsZFJvb3QgPSBmaWx0ZXJTaW5nbGVSb290KHJhd0NoaWxkcmVuKTtcbiAgICBpZiAoIWNoaWxkUm9vdCkge1xuICAgICAgICByZXR1cm4gW3Zub2RlLCB1bmRlZmluZWRdO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHJhd0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KTtcbiAgICBjb25zdCBkeW5hbWljSW5kZXggPSBkeW5hbWljQ2hpbGRyZW4gPyBkeW5hbWljQ2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpIDogLTE7XG4gICAgY29uc3Qgc2V0Um9vdCA9ICh1cGRhdGVkUm9vdCkgPT4ge1xuICAgICAgICByYXdDaGlsZHJlbltpbmRleF0gPSB1cGRhdGVkUm9vdDtcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuW2R5bmFtaWNJbmRleF0gPSB1cGRhdGVkUm9vdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVwZGF0ZWRSb290LnBhdGNoRmxhZyA+IDApIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBbLi4uZHluYW1pY0NoaWxkcmVuLCB1cGRhdGVkUm9vdF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBbbm9ybWFsaXplVk5vZGUoY2hpbGRSb290KSwgc2V0Um9vdF07XG59O1xuZnVuY3Rpb24gZmlsdGVyU2luZ2xlUm9vdChjaGlsZHJlbikge1xuICAgIGxldCBzaW5nbGVSb290O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKGlzVk5vZGUoY2hpbGQpKSB7XG4gICAgICAgICAgICAvLyBpZ25vcmUgdXNlciBjb21tZW50XG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSAhPT0gQ29tbWVudCB8fCBjaGlsZC5jaGlsZHJlbiA9PT0gJ3YtaWYnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNpbmdsZVJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzIG1vcmUgdGhhbiAxIG5vbi1jb21tZW50IGNoaWxkLCByZXR1cm4gbm93XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVJvb3QgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNpbmdsZVJvb3Q7XG59XG5jb25zdCBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2ggPSAoYXR0cnMpID0+IHtcbiAgICBsZXQgcmVzO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnc3R5bGUnIHx8IGlzT24oa2V5KSkge1xuICAgICAgICAgICAgKHJlcyB8fCAocmVzID0ge30pKVtrZXldID0gYXR0cnNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGZpbHRlck1vZGVsTGlzdGVuZXJzID0gKGF0dHJzLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkgfHwgIShrZXkuc2xpY2UoOSkgaW4gcHJvcHMpKSB7XG4gICAgICAgICAgICByZXNba2V5XSA9IGF0dHJzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBpc0VsZW1lbnRSb290ID0gKHZub2RlKSA9PiB7XG4gICAgcmV0dXJuICh2bm9kZS5zaGFwZUZsYWcgJiAoNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLyB8IDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovKSB8fFxuICAgICAgICB2bm9kZS50eXBlID09PSBDb21tZW50IC8vIHBvdGVudGlhbCB2LWlmIGJyYW5jaCBzd2l0Y2hcbiAgICApO1xufTtcbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZUNvbXBvbmVudChwcmV2Vk5vZGUsIG5leHRWTm9kZSwgb3B0aW1pemVkKSB7XG4gICAgY29uc3QgeyBwcm9wczogcHJldlByb3BzLCBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCBjb21wb25lbnQgfSA9IHByZXZWTm9kZTtcbiAgICBjb25zdCB7IHByb3BzOiBuZXh0UHJvcHMsIGNoaWxkcmVuOiBuZXh0Q2hpbGRyZW4sIHBhdGNoRmxhZyB9ID0gbmV4dFZOb2RlO1xuICAgIGNvbnN0IGVtaXRzID0gY29tcG9uZW50LmVtaXRzT3B0aW9ucztcbiAgICAvLyBQYXJlbnQgY29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uIHdhcyBob3QtdXBkYXRlZC4gU2luY2UgdGhpcyBtYXkgaGF2ZVxuICAgIC8vIGNhdXNlZCB0aGUgY2hpbGQgY29tcG9uZW50J3Mgc2xvdHMgY29udGVudCB0byBoYXZlIGNoYW5nZWQsIHdlIG5lZWQgdG9cbiAgICAvLyBmb3JjZSB0aGUgY2hpbGQgdG8gdXBkYXRlIGFzIHdlbGwuXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikgJiYgaXNIbXJVcGRhdGluZykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gZm9yY2UgY2hpbGQgdXBkYXRlIGZvciBydW50aW1lIGRpcmVjdGl2ZSBvciB0cmFuc2l0aW9uIG9uIGNvbXBvbmVudCB2bm9kZS5cbiAgICBpZiAobmV4dFZOb2RlLmRpcnMgfHwgbmV4dFZOb2RlLnRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChvcHRpbWl6ZWQgJiYgcGF0Y2hGbGFnID49IDApIHtcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEwMjQgLyogUGF0Y2hGbGFncy5EWU5BTUlDX1NMT1RTICovKSB7XG4gICAgICAgICAgICAvLyBzbG90IGNvbnRlbnQgdGhhdCByZWZlcmVuY2VzIHZhbHVlcyB0aGF0IG1pZ2h0IGhhdmUgY2hhbmdlZCxcbiAgICAgICAgICAgIC8vIGUuZy4gaW4gYSB2LWZvclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLykge1xuICAgICAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiB0aGlzIGZsYWcgaW5kaWNhdGVzIHByb3BzIGFyZSBhbHdheXMgbm9uLW51bGxcbiAgICAgICAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBhdGNoRmxhZ3MuUFJPUFMgKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNQcm9wcyA9IG5leHRWTm9kZS5keW5hbWljUHJvcHM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNQcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGR5bmFtaWNQcm9wc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmXG4gICAgICAgICAgICAgICAgICAgICFpc0VtaXRMaXN0ZW5lcihlbWl0cywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgcGF0aCBpcyBvbmx5IHRha2VuIGJ5IG1hbnVhbGx5IHdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9uc1xuICAgICAgICAvLyBzbyBwcmVzZW5jZSBvZiBhbnkgY2hpbGRyZW4gbGVhZHMgdG8gYSBmb3JjZWQgdXBkYXRlXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoIW5leHRDaGlsZHJlbiB8fCAhbmV4dENoaWxkcmVuLiRzdGFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlByb3BzID09PSBuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV4dFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHNPcHRpb25zKSB7XG4gICAgY29uc3QgbmV4dEtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xuICAgIGlmIChuZXh0S2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByZXZQcm9wcykubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IG5leHRLZXlzW2ldO1xuICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmXG4gICAgICAgICAgICAhaXNFbWl0TGlzdGVuZXIoZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB1cGRhdGVIT0NIb3N0RWwoeyB2bm9kZSwgcGFyZW50IH0sIGVsIC8vIEhvc3ROb2RlXG4pIHtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgICAgICAodm5vZGUgPSBwYXJlbnQudm5vZGUpLmVsID0gZWw7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxufVxuXG5jb25zdCBpc1N1c3BlbnNlID0gKHR5cGUpID0+IHR5cGUuX19pc1N1c3BlbnNlO1xuLy8gU3VzcGVuc2UgZXhwb3NlcyBhIGNvbXBvbmVudC1saWtlIEFQSSwgYW5kIGlzIHRyZWF0ZWQgbGlrZSBhIGNvbXBvbmVudFxuLy8gaW4gdGhlIGNvbXBpbGVyLCBidXQgaW50ZXJuYWxseSBpdCdzIGEgc3BlY2lhbCBidWlsdC1pbiB0eXBlIHRoYXQgaG9va3Ncbi8vIGRpcmVjdGx5IGludG8gdGhlIHJlbmRlcmVyLlxuY29uc3QgU3VzcGVuc2VJbXBsID0ge1xuICAgIG5hbWU6ICdTdXNwZW5zZScsXG4gICAgLy8gSW4gb3JkZXIgdG8gbWFrZSBTdXNwZW5zZSB0cmVlLXNoYWthYmxlLCB3ZSBuZWVkIHRvIGF2b2lkIGltcG9ydGluZyBpdFxuICAgIC8vIGRpcmVjdGx5IGluIHRoZSByZW5kZXJlci4gVGhlIHJlbmRlcmVyIGNoZWNrcyBmb3IgdGhlIF9faXNTdXNwZW5zZSBmbGFnXG4gICAgLy8gb24gYSB2bm9kZSdzIHR5cGUgYW5kIGNhbGxzIHRoZSBgcHJvY2Vzc2AgbWV0aG9kLCBwYXNzaW5nIGluIHJlbmRlcmVyXG4gICAgLy8gaW50ZXJuYWxzLlxuICAgIF9faXNTdXNwZW5zZTogdHJ1ZSxcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgXG4gICAgLy8gcGxhdGZvcm0tc3BlY2lmaWMgaW1wbCBwYXNzZWQgZnJvbSByZW5kZXJlclxuICAgIHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICBtb3VudFN1c3BlbnNlKG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdXNwZW5zZSxcbiAgICBjcmVhdGU6IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnksXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuXG59O1xuLy8gRm9yY2UtY2FzdGVkIHB1YmxpYyB0eXBpbmcgZm9yIGggYW5kIFRTWCBwcm9wcyBpbmZlcmVuY2VcbmNvbnN0IFN1c3BlbnNlID0gKFN1c3BlbnNlSW1wbFxuICAgICk7XG5mdW5jdGlvbiB0cmlnZ2VyRXZlbnQodm5vZGUsIG5hbWUpIHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHNbbmFtZV07XG4gICAgaWYgKGlzRnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikpIHtcbiAgICAgICAgZXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2Uodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICAgIGNvbnN0IGhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IHN1c3BlbnNlID0gKHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50U3VzcGVuc2UsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykpO1xuICAgIC8vIHN0YXJ0IG1vdW50aW5nIHRoZSBjb250ZW50IHN1YnRyZWUgaW4gYW4gb2ZmLWRvbSBjb250YWluZXJcbiAgICBwYXRjaChudWxsLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIGhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcyk7XG4gICAgLy8gbm93IGNoZWNrIGlmIHdlIGhhdmUgZW5jb3VudGVyZWQgYW55IGFzeW5jIGRlcHNcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA+IDApIHtcbiAgICAgICAgLy8gaGFzIGFzeW5jXG4gICAgICAgIC8vIGludm9rZSBAZmFsbGJhY2sgZXZlbnRcbiAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25QZW5kaW5nJyk7XG4gICAgICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgJ29uRmFsbGJhY2snKTtcbiAgICAgICAgLy8gbW91bnQgdGhlIGZhbGxiYWNrIHRyZWVcbiAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUuc3NGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgaXNTVkcsIHNsb3RTY29wZUlkcyk7XG4gICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgdm5vZGUuc3NGYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBTdXNwZW5zZSBoYXMgbm8gYXN5bmMgZGVwcy4gSnVzdCByZXNvbHZlLlxuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBwOiBwYXRjaCwgdW06IHVubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0pIHtcbiAgICBjb25zdCBzdXNwZW5zZSA9IChuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlKTtcbiAgICBzdXNwZW5zZS52bm9kZSA9IG4yO1xuICAgIG4yLmVsID0gbjEuZWw7XG4gICAgY29uc3QgbmV3QnJhbmNoID0gbjIuc3NDb250ZW50O1xuICAgIGNvbnN0IG5ld0ZhbGxiYWNrID0gbjIuc3NGYWxsYmFjaztcbiAgICBjb25zdCB7IGFjdGl2ZUJyYW5jaCwgcGVuZGluZ0JyYW5jaCwgaXNJbkZhbGxiYWNrLCBpc0h5ZHJhdGluZyB9ID0gc3VzcGVuc2U7XG4gICAgaWYgKHBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG5ld0JyYW5jaDtcbiAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIHBlbmRpbmdCcmFuY2gpKSB7XG4gICAgICAgICAgICAvLyBzYW1lIHJvb3QgdHlwZSBidXQgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAgcGF0Y2gocGVuZGluZ0JyYW5jaCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdG9nZ2xlZCBiZWZvcmUgcGVuZGluZyB0cmVlIGlzIHJlc29sdmVkXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcbiAgICAgICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRvZ2dsZWQgYmVmb3JlIGh5ZHJhdGlvbiBpcyBmaW5pc2hlZCwgdGhlIGN1cnJlbnQgRE9NIHRyZWUgaXNcbiAgICAgICAgICAgICAgICAvLyBubyBsb25nZXIgdmFsaWQuIHNldCBpdCBhcyB0aGUgYWN0aXZlIGJyYW5jaCBzbyBpdCB3aWxsIGJlIHVubW91bnRlZFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gcmVzb2x2ZWRcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IHBlbmRpbmdCcmFuY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bm1vdW50KHBlbmRpbmdCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW5jcmVtZW50IHBlbmRpbmcgSUQuIHRoaXMgaXMgdXNlZCB0byBpbnZhbGlkYXRlIGFzeW5jIGNhbGxiYWNrc1xuICAgICAgICAgICAgLy8gcmVzZXQgc3VzcGVuc2Ugc3RhdGVcbiAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMgPSAwO1xuICAgICAgICAgICAgLy8gZGlzY2FyZCBlZmZlY3RzIGZyb20gcGVuZGluZyBicmFuY2hcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgY29udGFpbmVyXG4gICAgICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGlmIChpc0luRmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGluIGZhbGxiYWNrIHN0YXRlXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xuICAgICAgICAgICAgICAgIC8vIHRvZ2dsZWQgXCJiYWNrXCIgdG8gY3VycmVudCBhY3RpdmUgYnJhbmNoXG4gICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHJlc29sdmVcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoZWQgdG8gYSAzcmQgYnJhbmNoXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcbiAgICAgICAgICAgIC8vIHJvb3QgZGlkIG5vdCBjaGFuZ2UsIGp1c3Qgbm9ybWFsIHBhdGNoXG4gICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0JyYW5jaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByb290IG5vZGUgdG9nZ2xlZFxuICAgICAgICAgICAgLy8gaW52b2tlIEBwZW5kaW5nIGV2ZW50XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQobjIsICdvblBlbmRpbmcnKTtcbiAgICAgICAgICAgIC8vIG1vdW50IHBlbmRpbmcgYnJhbmNoIGluIG9mZi1kb20gY29udGFpbmVyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkKys7XG4gICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBpbmNvbWluZyBicmFuY2ggaGFzIG5vIGFzeW5jIGRlcHMsIHJlc29sdmUgbm93LlxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGltZW91dCwgcGVuZGluZ0lkIH0gPSBzdXNwZW5zZTtcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0lkID09PSBwZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5sZXQgaGFzV2FybmVkID0gZmFsc2U7XG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnQsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlICYmICFoYXNXYXJuZWQpIHtcbiAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBgY29uc29sZS5pbmZvYCBjYW5ub3QgYmUgbnVsbCBlcnJvclxuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShgPFN1c3BlbnNlPiBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZSBhbmQgaXRzIEFQSSB3aWxsIGxpa2VseSBjaGFuZ2UuYCk7XG4gICAgfVxuICAgIGNvbnN0IHsgcDogcGF0Y2gsIG06IG1vdmUsIHVtOiB1bm1vdW50LCBuOiBuZXh0LCBvOiB7IHBhcmVudE5vZGUsIHJlbW92ZSB9IH0gPSByZW5kZXJlckludGVybmFscztcbiAgICBjb25zdCB0aW1lb3V0ID0gdm5vZGUucHJvcHMgPyB0b051bWJlcih2bm9kZS5wcm9wcy50aW1lb3V0KSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGFzc2VydE51bWJlcih0aW1lb3V0LCBgU3VzcGVuc2UgdGltZW91dGApO1xuICAgIH1cbiAgICBjb25zdCBzdXNwZW5zZSA9IHtcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBoaWRkZW5Db250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgZGVwczogMCxcbiAgICAgICAgcGVuZGluZ0lkOiAwLFxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXG4gICAgICAgIGFjdGl2ZUJyYW5jaDogbnVsbCxcbiAgICAgICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxuICAgICAgICBpc0h5ZHJhdGluZyxcbiAgICAgICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgcmVzb2x2ZShyZXN1bWUgPSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCB3aXRob3V0IGEgcGVuZGluZyBicmFuY2guYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgb24gYW4gYWxyZWFkeSB1bm1vdW50ZWQgc3VzcGVuc2UgYm91bmRhcnkuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBwZW5kaW5nSWQsIGVmZmVjdHMsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyIH0gPSBzdXNwZW5zZTtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghcmVzdW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uLm1vZGUgPT09ICdvdXQtaW4nO1xuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ0lkID09PSBzdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIE1vdmVUeXBlLkVOVEVSICovKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBpbml0aWFsIGFuY2hvciBvbiBtb3VudFxuICAgICAgICAgICAgICAgIGxldCB7IGFuY2hvciB9ID0gc3VzcGVuc2U7XG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmFsbGJhY2sgdHJlZSB3YXMgbW91bnRlZCwgaXQgbWF5IGhhdmUgYmVlbiBtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgY29udGVudCBmcm9tIG9mZi1kb20gY29udGFpbmVyIHRvIGFjdHVhbCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBNb3ZlVHlwZS5FTlRFUiAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBudWxsO1xuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gc3VzcGVuc2UucGFyZW50O1xuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50byB0aGF0IHBhcmVudFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZWZmZWN0cy5wdXNoKC4uLmVmZmVjdHMpO1xuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBmbHVzaCBhbGwgam9ic1xuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xuICAgICAgICAgICAgLy8gaW52b2tlIEByZXNvbHZlIGV2ZW50XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvblJlc29sdmUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xuICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaXNTVkcgfSA9IHN1c3BlbnNlO1xuICAgICAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25GYWxsYmFjaycpO1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1c3BlbnNlLmlzSW5GYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgZmFsbGJhY2tWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgZmFsbGJhY2tWTm9kZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbiAmJiBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XG4gICAgICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSBtb3VudEZhbGxiYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHVubW91bnQgY3VycmVudCBhY3RpdmUgYnJhbmNoXG4gICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XG4gICAgICAgICAgICB0cnVlIC8vIHNob3VsZFJlbW92ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghZGVsYXlFbnRlcikge1xuICAgICAgICAgICAgICAgIG1vdW50RmFsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW92ZShjb250YWluZXIsIGFuY2hvciwgdHlwZSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmXG4gICAgICAgICAgICAgICAgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKTtcbiAgICAgICAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbmV4dChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzSW5QZW5kaW5nU3VzcGVuc2UgPSAhIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2g7XG4gICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSkge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgLmFzeW5jRGVwLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmNTZXR1cFJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgd2hlbiB0aGUgc2V0dXAoKSBwcm9taXNlIHJlc29sdmVzLlxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIHVubW91bnRlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgZnJvbSB0aGlzIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBtYXkgaGF2ZSBiZWVuIHJlcGxhY2VkIGlmIGFuIHVwZGF0ZSBoYXBwZW5lZCBiZWZvcmUgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzeW5jIGRlcCBpcyByZXNvbHZlZC5cbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBoeWRyYXRlZEVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XG4gICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIHZub2RlLCBcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiBtb3ZlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZShoeWRyYXRlZEVsIHx8IGluc3RhbmNlLnN1YlRyZWUuZWwpLCBcbiAgICAgICAgICAgICAgICAvLyBhbmNob3Igd2lsbCBub3QgYmUgdXNlZCBpZiB0aGlzIGlzIGh5ZHJhdGlvbiwgc28gb25seSBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cbiAgICAgICAgICAgICAgICBoeWRyYXRlZEVsID8gbnVsbCA6IG5leHQoaW5zdGFuY2Uuc3ViVHJlZSksIHN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZS5lbCk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvbmx5IGRlY3JlYXNlIGRlcHMgY291bnQgaWYgc3VzcGVuc2UgaXMgbm90IGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSAmJiAtLXN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3VzcGVuc2U7XG59XG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBub2RlLnBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBudWxsLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCB0cnVlIC8qIGh5ZHJhdGluZyAqLykpO1xuICAgIC8vIHRoZXJlIGFyZSB0d28gcG9zc2libGUgc2NlbmFyaW9zIGZvciBzZXJ2ZXItcmVuZGVyZWQgc3VzcGVuc2U6XG4gICAgLy8gLSBzdWNjZXNzOiBzc3IgY29udGVudCBzaG91bGQgYmUgZnVsbHkgcmVzb2x2ZWRcbiAgICAvLyAtIGZhaWx1cmU6IHNzciBjb250ZW50IHNob3VsZCBiZSB0aGUgZmFsbGJhY2sgYnJhbmNoLlxuICAgIC8vIGhvd2V2ZXIsIG9uIHRoZSBjbGllbnQgd2UgZG9uJ3QgcmVhbGx5IGtub3cgaWYgaXQgaGFzIGZhaWxlZCBvciBub3RcbiAgICAvLyBhdHRlbXB0IHRvIGh5ZHJhdGUgdGhlIERPTSBhc3N1bWluZyBpdCBoYXMgc3VjY2VlZGVkLCBidXQgd2Ugc3RpbGxcbiAgICAvLyBuZWVkIHRvIGNvbnN0cnVjdCBhIHN1c3BlbnNlIGJvdW5kYXJ5IGZpcnN0XG4gICAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUobm9kZSwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKSB7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgICBjb25zdCBpc1Nsb3RDaGlsZHJlbiA9IHNoYXBlRmxhZyAmIDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi87XG4gICAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuKTtcbiAgICB2bm9kZS5zc0ZhbGxiYWNrID0gaXNTbG90Q2hpbGRyZW5cbiAgICAgICAgPyBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xuICAgIGxldCBibG9jaztcbiAgICBpZiAoaXNGdW5jdGlvbihzKSkge1xuICAgICAgICBjb25zdCB0cmFja0Jsb2NrID0gaXNCbG9ja1RyZWVFbmFibGVkICYmIHMuX2M7XG4gICAgICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkaXNhYmxlVHJhY2tpbmc6IGZhbHNlXG4gICAgICAgICAgICAvLyBhbGxvdyBibG9jayB0cmFja2luZyBmb3IgY29tcGlsZWQgc2xvdHNcbiAgICAgICAgICAgIC8vIChzZWUgLi9jb21wb25lbnRSZW5kZXJDb250ZXh0LnRzKVxuICAgICAgICAgICAgcy5fZCA9IGZhbHNlO1xuICAgICAgICAgICAgb3BlbkJsb2NrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IHMoKTtcbiAgICAgICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgICAgICAgIHMuX2QgPSB0cnVlO1xuICAgICAgICAgICAgYmxvY2sgPSBjdXJyZW50QmxvY2s7XG4gICAgICAgICAgICBjbG9zZUJsb2NrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQXJyYXkocykpIHtcbiAgICAgICAgY29uc3Qgc2luZ2xlQ2hpbGQgPSBmaWx0ZXJTaW5nbGVSb290KHMpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzaW5nbGVDaGlsZCkge1xuICAgICAgICAgICAgd2FybihgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBzaW5nbGVDaGlsZDtcbiAgICB9XG4gICAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xuICAgIGlmIChibG9jayAmJiAhcy5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcy5keW5hbWljQ2hpbGRyZW4gPSBibG9jay5maWx0ZXIoYyA9PiBjICE9PSBzKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcbiAgICBpZiAoc3VzcGVuc2UgJiYgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xuICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IGJyYW5jaDtcbiAgICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xuICAgIGNvbnN0IGVsID0gKHZub2RlLmVsID0gYnJhbmNoLmVsKTtcbiAgICAvLyBpbiBjYXNlIHN1c3BlbnNlIGlzIHRoZSByb290IG5vZGUgb2YgYSBjb21wb25lbnQsXG4gICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRoZSBIT0MgZWxcbiAgICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgICAgICBwYXJlbnRDb21wb25lbnQudm5vZGUuZWwgPSBlbDtcbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcbiAgICAgICAgLy8gYnkgZGVmYXVsdCBhbiBpbnN0YW5jZSBpbmhlcml0cyBpdHMgcGFyZW50J3MgcHJvdmlkZXMgb2JqZWN0XG4gICAgICAgIC8vIGJ1dCB3aGVuIGl0IG5lZWRzIHRvIHByb3ZpZGUgdmFsdWVzIG9mIGl0cyBvd24sIGl0IGNyZWF0ZXMgaXRzXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXG4gICAgICAgIC8vIHRoaXMgd2F5IGluIGBpbmplY3RgIHdlIGNhbiBzaW1wbHkgbG9vayB1cCBpbmplY3Rpb25zIGZyb20gZGlyZWN0XG4gICAgICAgIC8vIHBhcmVudCBhbmQgbGV0IHRoZSBwcm90b3R5cGUgY2hhaW4gZG8gdGhlIHdvcmsuXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xuICAgICAgICBpZiAocGFyZW50UHJvdmlkZXMgPT09IHByb3ZpZGVzKSB7XG4gICAgICAgICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRTIGRvZXNuJ3QgYWxsb3cgc3ltYm9sIGFzIGluZGV4IHR5cGVcbiAgICAgICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxuICAgIC8vIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIC8vICMyNDAwXG4gICAgICAgIC8vIHRvIHN1cHBvcnQgYGFwcC51c2VgIHBsdWdpbnMsXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnN0YW5jZSBpcyBhdCByb290XG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaW5zdGFuY2UucGFyZW50ID09IG51bGxcbiAgICAgICAgICAgID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzXG4gICAgICAgICAgICA6IGluc3RhbmNlLnBhcmVudC5wcm92aWRlcztcbiAgICAgICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWUuY2FsbChpbnN0YW5jZS5wcm94eSlcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYGluamVjdGlvbiBcIiR7U3RyaW5nKGtleSl9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcbiAgICB9XG59XG5cbi8vIFNpbXBsZSBlZmZlY3QuXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gd2F0Y2hQb3N0RWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBmbHVzaDogJ3Bvc3QnIH0pIDogeyBmbHVzaDogJ3Bvc3QnIH0pO1xufVxuZnVuY3Rpb24gd2F0Y2hTeW5jRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBmbHVzaDogJ3N5bmMnIH0pIDogeyBmbHVzaDogJ3N5bmMnIH0pO1xufVxuLy8gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMgdG8gdHJpZ2dlciBvbiB1bmRlZmluZWQgaW5pdGlhbCB2YWx1ZXNcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xuICAgICAgICB3YXJuKGBcXGB3YXRjaChmbiwgb3B0aW9ucz8pXFxgIHNpZ25hdHVyZSBoYXMgYmVlbiBtb3ZlZCB0byBhIHNlcGFyYXRlIEFQSS4gYCArXG4gICAgICAgICAgICBgVXNlIFxcYHdhdGNoRWZmZWN0KGZuLCBvcHRpb25zPylcXGAgaW5zdGVhZC4gXFxgd2F0Y2hcXGAgbm93IG9ubHkgYCArXG4gICAgICAgICAgICBgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBkb1dhdGNoKHNvdXJjZSwgY2IsIHsgaW1tZWRpYXRlLCBkZWVwLCBmbHVzaCwgb25UcmFjaywgb25UcmlnZ2VyIH0gPSBFTVBUWV9PQkopIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjYikge1xuICAgICAgICBpZiAoaW1tZWRpYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2Fybihgd2F0Y2goKSBcImRlZXBcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2FybkludmFsaWRTb3VyY2UgPSAocykgPT4ge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCwgcywgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGAgK1xuICAgICAgICAgICAgYGEgcmVhY3RpdmUgb2JqZWN0LCBvciBhbiBhcnJheSBvZiB0aGVzZSB0eXBlcy5gKTtcbiAgICB9O1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudFNjb3BlKCkgPT09IChjdXJyZW50SW5zdGFuY2UgPT09IG51bGwgfHwgY3VycmVudEluc3RhbmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50SW5zdGFuY2Uuc2NvcGUpID8gY3VycmVudEluc3RhbmNlIDogbnVsbDtcbiAgICAvLyBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZVxuICAgIGxldCBnZXR0ZXI7XG4gICAgbGV0IGZvcmNlVHJpZ2dlciA9IGZhbHNlO1xuICAgIGxldCBpc011bHRpU291cmNlID0gZmFsc2U7XG4gICAgaWYgKGlzUmVmKHNvdXJjZSkpIHtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLnZhbHVlO1xuICAgICAgICBmb3JjZVRyaWdnZXIgPSBpc1NoYWxsb3ckMShzb3VyY2UpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlO1xuICAgICAgICBkZWVwID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIGlzTXVsdGlTb3VyY2UgPSB0cnVlO1xuICAgICAgICBmb3JjZVRyaWdnZXIgPSBzb3VyY2Uuc29tZShzID0+IGlzUmVhY3RpdmUocykgfHwgaXNTaGFsbG93JDEocykpO1xuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UubWFwKHMgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUmVmKHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnNlKHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEVycm9ySGFuZGxpbmcocywgaW5zdGFuY2UsIDIgLyogRXJyb3JDb2Rlcy5XQVRDSF9HRVRURVIgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5JbnZhbGlkU291cmNlKHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgLy8gZ2V0dGVyIHdpdGggY2JcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAyIC8qIEVycm9yQ29kZXMuV0FUQ0hfR0VUVEVSICovKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIGNiIC0+IHNpbXBsZSBlZmZlY3RcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAzIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtvbkNsZWFudXBdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdldHRlciA9IE5PT1A7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzb3VyY2UpO1xuICAgIH1cbiAgICBpZiAoY2IgJiYgZGVlcCkge1xuICAgICAgICBjb25zdCBiYXNlR2V0dGVyID0gZ2V0dGVyO1xuICAgICAgICBnZXR0ZXIgPSAoKSA9PiB0cmF2ZXJzZShiYXNlR2V0dGVyKCkpO1xuICAgIH1cbiAgICBsZXQgY2xlYW51cDtcbiAgICBsZXQgb25DbGVhbnVwID0gKGZuKSA9PiB7XG4gICAgICAgIGNsZWFudXAgPSBlZmZlY3Qub25TdG9wID0gKCkgPT4ge1xuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgNCAvKiBFcnJvckNvZGVzLldBVENIX0NMRUFOVVAgKi8pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gaW4gU1NSIHRoZXJlIGlzIG5vIG5lZWQgdG8gc2V0dXAgYW4gYWN0dWFsIGVmZmVjdCwgYW5kIGl0IHNob3VsZCBiZSBub29wXG4gICAgLy8gdW5sZXNzIGl0J3MgZWFnZXIgb3Igc3luYyBmbHVzaFxuICAgIGxldCBzc3JDbGVhbnVwO1xuICAgIGlmIChpc0luU1NSQ29tcG9uZW50U2V0dXApIHtcbiAgICAgICAgLy8gd2Ugd2lsbCBhbHNvIG5vdCBjYWxsIHRoZSBpbnZhbGlkYXRlIGNhbGxiYWNrICgrIHJ1bm5lciBpcyBub3Qgc2V0IHVwKVxuICAgICAgICBvbkNsZWFudXAgPSBOT09QO1xuICAgICAgICBpZiAoIWNiKSB7XG4gICAgICAgICAgICBnZXR0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMyAvKiBFcnJvckNvZGVzLldBVENIX0NBTExCQUNLICovLCBbXG4gICAgICAgICAgICAgICAgZ2V0dGVyKCksXG4gICAgICAgICAgICAgICAgaXNNdWx0aVNvdXJjZSA/IFtdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsdXNoID09PSAnc3luYycpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHVzZVNTUkNvbnRleHQoKTtcbiAgICAgICAgICAgIHNzckNsZWFudXAgPSBjdHguX193YXRjaGVySGFuZGxlcyB8fCAoY3R4Ll9fd2F0Y2hlckhhbmRsZXMgPSBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTk9PUDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgb2xkVmFsdWUgPSBpc011bHRpU291cmNlXG4gICAgICAgID8gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpLmZpbGwoSU5JVElBTF9XQVRDSEVSX1ZBTFVFKVxuICAgICAgICA6IElOSVRJQUxfV0FUQ0hFUl9WQUxVRTtcbiAgICBjb25zdCBqb2IgPSAoKSA9PiB7XG4gICAgICAgIGlmICghZWZmZWN0LmFjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgLy8gd2F0Y2goc291cmNlLCBjYilcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgICAgICAgICAgaWYgKGRlZXAgfHxcbiAgICAgICAgICAgICAgICBmb3JjZVRyaWdnZXIgfHxcbiAgICAgICAgICAgICAgICAoaXNNdWx0aVNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/IG5ld1ZhbHVlLnNvbWUoKHYsIGkpID0+IGhhc0NoYW5nZWQodiwgb2xkVmFsdWVbaV0pKVxuICAgICAgICAgICAgICAgICAgICA6IGhhc0NoYW5nZWQobmV3VmFsdWUsIG9sZFZhbHVlKSkgfHxcbiAgICAgICAgICAgICAgICAoZmFsc2UgICkpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIGJlZm9yZSBydW5uaW5nIGNiIGFnYWluXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFudXApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhjYiwgaW5zdGFuY2UsIDMgLyogRXJyb3JDb2Rlcy5XQVRDSF9DQUxMQkFDSyAqLywgW1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFzcyB1bmRlZmluZWQgYXMgdGhlIG9sZCB2YWx1ZSB3aGVuIGl0J3MgY2hhbmdlZCBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPT09IElOSVRJQUxfV0FUQ0hFUl9WQUxVRVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXNNdWx0aVNvdXJjZSAmJiBvbGRWYWx1ZVswXSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xlYW51cFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB3YXRjaEVmZmVjdFxuICAgICAgICAgICAgZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBpbXBvcnRhbnQ6IG1hcmsgdGhlIGpvYiBhcyBhIHdhdGNoZXIgY2FsbGJhY2sgc28gdGhhdCBzY2hlZHVsZXIga25vd3NcbiAgICAvLyBpdCBpcyBhbGxvd2VkIHRvIHNlbGYtdHJpZ2dlciAoIzE3MjcpXG4gICAgam9iLmFsbG93UmVjdXJzZSA9ICEhY2I7XG4gICAgbGV0IHNjaGVkdWxlcjtcbiAgICBpZiAoZmx1c2ggPT09ICdzeW5jJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBqb2I7IC8vIHRoZSBzY2hlZHVsZXIgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZGlyZWN0bHlcbiAgICB9XG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0OiAncHJlJ1xuICAgICAgICBqb2IucHJlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluc3RhbmNlKVxuICAgICAgICAgICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZUpvYihqb2IpO1xuICAgIH1cbiAgICBjb25zdCBlZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoZ2V0dGVyLCBzY2hlZHVsZXIpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBvblRyYWNrO1xuICAgICAgICBlZmZlY3Qub25UcmlnZ2VyID0gb25UcmlnZ2VyO1xuICAgIH1cbiAgICAvLyBpbml0aWFsIHJ1blxuICAgIGlmIChjYikge1xuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICBqb2IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9sZFZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGVmZmVjdC5ydW4uYmluZChlZmZlY3QpLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlZmZlY3QucnVuKCk7XG4gICAgfVxuICAgIGNvbnN0IHVud2F0Y2ggPSAoKSA9PiB7XG4gICAgICAgIGVmZmVjdC5zdG9wKCk7XG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5zY29wZSkge1xuICAgICAgICAgICAgcmVtb3ZlKGluc3RhbmNlLnNjb3BlLmVmZmVjdHMsIGVmZmVjdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzc3JDbGVhbnVwKVxuICAgICAgICBzc3JDbGVhbnVwLnB1c2godW53YXRjaCk7XG4gICAgcmV0dXJuIHVud2F0Y2g7XG59XG4vLyB0aGlzLiR3YXRjaFxuZnVuY3Rpb24gaW5zdGFuY2VXYXRjaChzb3VyY2UsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XG4gICAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKVxuICAgICAgICA/IHNvdXJjZS5pbmNsdWRlcygnLicpXG4gICAgICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywgc291cmNlKVxuICAgICAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV1cbiAgICAgICAgOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgICBsZXQgY2I7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGNiID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYiA9IHZhbHVlLmhhbmRsZXI7XG4gICAgICAgIG9wdGlvbnMgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgY3VyID0gY3VycmVudEluc3RhbmNlO1xuICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0aGlzKTtcbiAgICBjb25zdCByZXMgPSBkb1dhdGNoKGdldHRlciwgY2IuYmluZChwdWJsaWNUaGlzKSwgb3B0aW9ucyk7XG4gICAgaWYgKGN1cikge1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoR2V0dGVyKGN0eCwgcGF0aCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBjdXIgPSBjdHg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoICYmIGN1cjsgaSsrKSB7XG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXI7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBzZWVuKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqL10pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZWVuID0gc2VlbiB8fCBuZXcgU2V0KCk7XG4gICAgaWYgKHNlZW4uaGFzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHNlZW4uYWRkKHZhbHVlKTtcbiAgICBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBzZWVuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVbaV0sIHNlZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgdHJhdmVyc2Uodiwgc2Vlbik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uU3RhdGUoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgICAgIGlzTGVhdmluZzogZmFsc2UsXG4gICAgICAgIGlzVW5tb3VudGluZzogZmFsc2UsXG4gICAgICAgIGxlYXZpbmdWTm9kZXM6IG5ldyBNYXAoKVxuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBzdGF0ZTtcbn1cbmNvbnN0IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yID0gW0Z1bmN0aW9uLCBBcnJheV07XG5jb25zdCBCYXNlVHJhbnNpdGlvbkltcGwgPSB7XG4gICAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgICBwcm9wczoge1xuICAgICAgICBtb2RlOiBTdHJpbmcsXG4gICAgICAgIGFwcGVhcjogQm9vbGVhbixcbiAgICAgICAgcGVyc2lzdGVkOiBCb29sZWFuLFxuICAgICAgICAvLyBlbnRlclxuICAgICAgICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25FbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICAvLyBsZWF2ZVxuICAgICAgICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICAvLyBhcHBlYXJcbiAgICAgICAgb25CZWZvcmVBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3JcbiAgICB9LFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcbiAgICAgICAgbGV0IHByZXZUcmFuc2l0aW9uS2V5O1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBoYXNGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGxvY2F0ZSBmaXJzdCBub24tY29tbWVudCBjaGlsZFxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYyBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYy50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGhhc0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FybiBtb3JlIHRoYW4gb25lIG5vbi1jb21tZW50IGNoaWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlIDx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byB0cmFjayByZWFjdGl2aXR5IGZvciB0aGVzZSBwcm9wcyBzbyB1c2UgdGhlIHJhd1xuICAgICAgICAgICAgLy8gcHJvcHMgZm9yIGEgYml0IGJldHRlciBwZXJmXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gcmF3UHJvcHM7XG4gICAgICAgICAgICAvLyBjaGVjayBtb2RlXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgbW9kZSAmJlxuICAgICAgICAgICAgICAgIG1vZGUgIT09ICdpbi1vdXQnICYmXG4gICAgICAgICAgICAgICAgbW9kZSAhPT0gJ291dC1pbicgJiZcbiAgICAgICAgICAgICAgICBtb2RlICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAke21vZGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNMZWF2aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgPHRyYW5zaXRpb24+PGtlZXAtYWxpdmUvPjwvdHJhbnNpdGlvbj4sIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIHR5cGUgb2YgdGhlIGtlcHQtYWxpdmUgY2hpbGRyZW4uXG4gICAgICAgICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKCFpbm5lckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW50ZXJIb29rcyA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgcmF3UHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWU7XG4gICAgICAgICAgICBjb25zdCBvbGRJbm5lckNoaWxkID0gb2xkQ2hpbGQgJiYgZ2V0S2VlcEFsaXZlQ2hpbGQob2xkQ2hpbGQpO1xuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB7IGdldFRyYW5zaXRpb25LZXkgfSA9IGlubmVyQ2hpbGQudHlwZTtcbiAgICAgICAgICAgIGlmIChnZXRUcmFuc2l0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0VHJhbnNpdGlvbktleSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09IHByZXZUcmFuc2l0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGFuZGxlIG1vZGVcbiAgICAgICAgICAgIGlmIChvbGRJbm5lckNoaWxkICYmXG4gICAgICAgICAgICAgICAgb2xkSW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50ICYmXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgb2xkIHRyZWUncyBob29rcyBpbiBjYXNlIG9mIGR5bmFtaWMgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGluZyBiZXR3ZWVuIGRpZmZlcmVudCB2aWV3c1xuICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0hvb2tzLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICM2ODM1XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCBhbHNvIG5lZWRzIHRvIGJlIHVwZGF0ZWQgd2hlbiBhY3RpdmUgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UudXBkYXRlLmFjdGl2ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0JyAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0hvb2tzLmRlbGF5TGVhdmUgPSAoZWwsIGVhcmx5UmVtb3ZlLCBkZWxheWVkTGVhdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIG9sZElubmVyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVhcmx5IHJlbW92YWwgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVySG9va3MuZGVsYXllZExlYXZlID0gZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICAgIGNvbnN0IHsgbGVhdmluZ1ZOb2RlcyB9ID0gc3RhdGU7XG4gICAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xuICAgIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBsZWF2aW5nVk5vZGVzQ2FjaGU7XG59XG4vLyBUaGUgdHJhbnNpdGlvbiBob29rcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZub2RlIGFzIHZub2RlLnRyYW5zaXRpb25cbi8vIGFuZCB3aWxsIGJlIGNhbGxlZCBhdCBhcHByb3ByaWF0ZSB0aW1pbmcgaW4gdGhlIHJlbmRlcmVyLlxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgYXBwZWFyLCBtb2RlLCBwZXJzaXN0ZWQgPSBmYWxzZSwgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25BZnRlckVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkJlZm9yZUxlYXZlLCBvbkxlYXZlLCBvbkFmdGVyTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyLCBvbkFwcGVhciwgb25BZnRlckFwcGVhciwgb25BcHBlYXJDYW5jZWxsZWQgfSA9IHByb3BzO1xuICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xuICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcbiAgICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgICAgIGhvb2sgJiZcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA5IC8qIEVycm9yQ29kZXMuVFJBTlNJVElPTl9IT09LICovLCBhcmdzKTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbGxBc3luY0hvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgICAgICBjb25zdCBkb25lID0gYXJnc1sxXTtcbiAgICAgICAgY2FsbEhvb2soaG9vaywgYXJncyk7XG4gICAgICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICAgICAgICBpZiAoaG9vay5ldmVyeShob29rID0+IGhvb2subGVuZ3RoIDw9IDEpKVxuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhvb2tzID0ge1xuICAgICAgICBtb2RlLFxuICAgICAgICBwZXJzaXN0ZWQsXG4gICAgICAgIGJlZm9yZUVudGVyKGVsKSB7XG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uQmVmb3JlRW50ZXI7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9vayA9IG9uQmVmb3JlQXBwZWFyIHx8IG9uQmVmb3JlRW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIHNhbWUgZWxlbWVudCAodi1zaG93KVxuICAgICAgICAgICAgaWYgKGVsLl9sZWF2ZUNiKSB7XG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIHRvZ2dsZWQgZWxlbWVudCB3aXRoIHNhbWUga2V5ICh2LWlmKVxuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2RlID0gbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XG4gICAgICAgICAgICBpZiAobGVhdmluZ1ZOb2RlICYmXG4gICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgZWFybHkgcmVtb3ZhbCAobm90IGNhbmNlbGxlZClcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxIb29rKGhvb2ssIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnRlcihlbCkge1xuICAgICAgICAgICAgbGV0IGhvb2sgPSBvbkVudGVyO1xuICAgICAgICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgICAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJIb29rID0gb25BZnRlckFwcGVhciB8fCBvbkFmdGVyRW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEhvb2sgPSBvbkFwcGVhckNhbmNlbGxlZCB8fCBvbkVudGVyQ2FuY2VsbGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChob29rcy5kZWxheWVkTGVhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsLl9lbnRlckNiID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaG9vaykge1xuICAgICAgICAgICAgICAgIGNhbGxBc3luY0hvb2soaG9vaywgW2VsLCBkb25lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxlYXZlKGVsLCByZW1vdmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xuICAgICAgICAgICAgaWYgKGVsLl9lbnRlckNiKSB7XG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xuICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fbGVhdmVDYiA9IChjYW5jZWxsZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID09PSB2bm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICAgICAgaWYgKG9uTGVhdmUpIHtcbiAgICAgICAgICAgICAgICBjYWxsQXN5bmNIb29rKG9uTGVhdmUsIFtlbCwgZG9uZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9uZSh2bm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gaG9va3M7XG59XG4vLyB0aGUgcGxhY2Vob2xkZXIgcmVhbGx5IG9ubHkgaGFuZGxlcyBvbmUgc3BlY2lhbCBjYXNlOiBLZWVwQWxpdmVcbi8vIGluIHRoZSBjYXNlIG9mIGEgS2VlcEFsaXZlIGluIGEgbGVhdmUgcGhhc2Ugd2UgbmVlZCB0byByZXR1cm4gYSBLZWVwQWxpdmVcbi8vIHBsYWNlaG9sZGVyIHdpdGggZW1wdHkgY29udGVudCB0byBhdm9pZCB0aGUgS2VlcEFsaXZlIGluc3RhbmNlIGZyb20gYmVpbmdcbi8vIHVubW91bnRlZC5cbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcbiAgICBpZiAoaXNLZWVwQWxpdmUodm5vZGUpKSB7XG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEtlZXBBbGl2ZUNoaWxkKHZub2RlKSB7XG4gICAgcmV0dXJuIGlzS2VlcEFsaXZlKHZub2RlKVxuICAgICAgICA/IHZub2RlLmNoaWxkcmVuXG4gICAgICAgICAgICA/IHZub2RlLmNoaWxkcmVuWzBdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICA6IHZub2RlO1xufVxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCBob29rcykge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgdm5vZGUuc3NDb250ZW50LnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0NvbnRlbnQpO1xuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UsIHBhcmVudEtleSkge1xuICAgIGxldCByZXQgPSBbXTtcbiAgICBsZXQga2V5ZWRGcmFnbWVudENvdW50ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAvLyAjNTM2MCBpbmhlcml0IHBhcmVudCBrZXkgaW4gY2FzZSBvZiA8dGVtcGxhdGUgdi1mb3I+XG4gICAgICAgIGNvbnN0IGtleSA9IHBhcmVudEtleSA9PSBudWxsXG4gICAgICAgICAgICA/IGNoaWxkLmtleVxuICAgICAgICAgICAgOiBTdHJpbmcocGFyZW50S2V5KSArIFN0cmluZyhjaGlsZC5rZXkgIT0gbnVsbCA/IGNoaWxkLmtleSA6IGkpO1xuICAgICAgICAvLyBoYW5kbGUgZnJhZ21lbnQgY2hpbGRyZW4gY2FzZSwgZS5nLiB2LWZvclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXRjaEZsYWcgJiAxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqLylcbiAgICAgICAgICAgICAgICBrZXllZEZyYWdtZW50Q291bnQrKztcbiAgICAgICAgICAgIHJldCA9IHJldC5jb25jYXQoZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKGNoaWxkLmNoaWxkcmVuLCBrZWVwQ29tbWVudCwga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tbWVudCBwbGFjZWhvbGRlcnMgc2hvdWxkIGJlIHNraXBwZWQsIGUuZy4gdi1pZlxuICAgICAgICBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICByZXQucHVzaChrZXkgIT0gbnVsbCA/IGNsb25lVk5vZGUoY2hpbGQsIHsga2V5IH0pIDogY2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vICMxMTI2IGlmIGEgdHJhbnNpdGlvbiBjaGlsZHJlbiBsaXN0IGNvbnRhaW5zIG11bHRpcGxlIHN1YiBmcmFnbWVudHMsIHRoZXNlXG4gICAgLy8gZnJhZ21lbnRzIHdpbGwgYmUgbWVyZ2VkIGludG8gYSBmbGF0IGNoaWxkcmVuIGFycmF5LiBTaW5jZSBlYWNoIHYtZm9yXG4gICAgLy8gZnJhZ21lbnQgbWF5IGNvbnRhaW4gZGlmZmVyZW50IHN0YXRpYyBiaW5kaW5ncyBpbnNpZGUsIHdlIG5lZWQgdG8gZGUtb3BcbiAgICAvLyB0aGVzZSBjaGlsZHJlbiB0byBmb3JjZSBmdWxsIGRpZmZzIHRvIGVuc3VyZSBjb3JyZWN0IGJlaGF2aW9yLlxuICAgIGlmIChrZXllZEZyYWdtZW50Q291bnQgPiAxKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbi8vIGltcGxlbWVudGF0aW9uLCBjbG9zZSB0byBuby1vcFxuZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvcHRpb25zKSA/IHsgc2V0dXA6IG9wdGlvbnMsIG5hbWU6IG9wdGlvbnMubmFtZSB9IDogb3B0aW9ucztcbn1cblxuY29uc3QgaXNBc3luY1dyYXBwZXIgPSAoaSkgPT4gISFpLnR5cGUuX19hc3luY0xvYWRlcjtcbmZ1bmN0aW9uIGRlZmluZUFzeW5jQ29tcG9uZW50KHNvdXJjZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xuICAgIH1cbiAgICBjb25zdCB7IGxvYWRlciwgbG9hZGluZ0NvbXBvbmVudCwgZXJyb3JDb21wb25lbnQsIGRlbGF5ID0gMjAwLCB0aW1lb3V0LCAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsIG9uRXJyb3I6IHVzZXJPbkVycm9yIH0gPSBzb3VyY2U7XG4gICAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICBsZXQgcmVzb2x2ZWRDb21wO1xuICAgIGxldCByZXRyaWVzID0gMDtcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcbiAgICAgICAgcmV0cmllcysrO1xuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfTtcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xuICAgICAgICBsZXQgdGhpc1JlcXVlc3Q7XG4gICAgICAgIHJldHVybiAocGVuZGluZ1JlcXVlc3QgfHxcbiAgICAgICAgICAgICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID1cbiAgICAgICAgICAgICAgICBsb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlck9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyRmFpbCA9ICgpID0+IHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoY29tcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlcXVlc3QgIT09IHBlbmRpbmdSZXF1ZXN0ICYmIHBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY29tcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRlcm9wIG1vZHVsZSBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoY29tcC5fX2VzTW9kdWxlIHx8IGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhc3luYyBjb21wb25lbnQgbG9hZCByZXN1bHQ6ICR7Y29tcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZENvbXAgPSBjb21wO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgICAgIG5hbWU6ICdBc3luY0NvbXBvbmVudFdyYXBwZXInLFxuICAgICAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgICAgICBnZXQgX19hc3luY1Jlc29sdmVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQ29tcDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0dXAoKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgICAgICAgIC8vIGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMTMgLyogRXJyb3JDb2Rlcy5BU1lOQ19DT01QT05FTlRfTE9BREVSICovLCAhZXJyb3JDb21wb25lbnQgLyogZG8gbm90IHRocm93IGluIGRldiBpZiB1c2VyIHByb3ZpZGVkIGVycm9yIGNvbXBvbmVudCAqLyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gc3VzcGVuc2UtY29udHJvbGxlZCBvciBTU1IuXG4gICAgICAgICAgICBpZiAoKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlKSB8fFxuICAgICAgICAgICAgICAgIChpc0luU1NSQ29tcG9uZW50U2V0dXApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWQoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb21wID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChjb21wLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGVycm9yQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xuICAgICAgICAgICAgY29uc3QgZGVsYXllZCA9IHJlZighIWRlbGF5KTtcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxheWVkLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZC52YWx1ZSAmJiAhZXJyb3IudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXMuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9hZCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnBhcmVudCAmJiBpc0tlZXBBbGl2ZShpbnN0YW5jZS5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBpcyBrZWVwLWFsaXZlLCBmb3JjZSB1cGRhdGUgc28gdGhlIGxvYWRlZCBjb21wb25lbnQnc1xuICAgICAgICAgICAgICAgICAgICAvLyBuYW1lIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvci52YWx1ZSAmJiBlcnJvckNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5uZXJDb21wKGNvbXAsIHBhcmVudCkge1xuICAgIGNvbnN0IHsgcmVmLCBwcm9wcywgY2hpbGRyZW4sIGNlIH0gPSBwYXJlbnQudm5vZGU7XG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xuICAgIC8vIGVuc3VyZSBpbm5lciBjb21wb25lbnQgaW5oZXJpdHMgdGhlIGFzeW5jIHdyYXBwZXIncyByZWYgb3duZXJcbiAgICB2bm9kZS5yZWYgPSByZWY7XG4gICAgLy8gcGFzcyB0aGUgY3VzdG9tIGVsZW1lbnQgY2FsbGJhY2sgb24gdG8gdGhlIGlubmVyIGNvbXBcbiAgICAvLyBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIGFzeW5jIHdyYXBwZXJcbiAgICB2bm9kZS5jZSA9IGNlO1xuICAgIGRlbGV0ZSBwYXJlbnQudm5vZGUuY2U7XG4gICAgcmV0dXJuIHZub2RlO1xufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xuY29uc3QgS2VlcEFsaXZlSW1wbCA9IHtcbiAgICBuYW1lOiBgS2VlcEFsaXZlYCxcbiAgICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxuICAgIC8vIGNoZWNrIGRpcmVjdGx5IG9uIEtlZXBBbGl2ZSBpbiB0aGUgcmVuZGVyZXIsIGJlY2F1c2UgaW1wb3J0aW5nIGl0IGRpcmVjdGx5XG4gICAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxuICAgIF9faXNLZWVwQWxpdmU6IHRydWUsXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaW5jbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXG4gICAgICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgICB9LFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgLy8gS2VlcEFsaXZlIGNvbW11bmljYXRlcyB3aXRoIHRoZSBpbnN0YW50aWF0ZWQgcmVuZGVyZXIgdmlhIHRoZVxuICAgICAgICAvLyBjdHggd2hlcmUgdGhlIHJlbmRlcmVyIHBhc3NlcyBpbiBpdHMgaW50ZXJuYWxzLFxuICAgICAgICAvLyBhbmQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBleHBvc2VzIGFjdGl2YXRlL2RlYWN0aXZhdGUgaW1wbGVtZW50YXRpb25zLlxuICAgICAgICAvLyBUaGUgd2hvbGUgcG9pbnQgb2YgdGhpcyBpcyB0byBhdm9pZCBpbXBvcnRpbmcgS2VlcEFsaXZlIGRpcmVjdGx5IGluIHRoZVxuICAgICAgICAvLyByZW5kZXJlciB0byBmYWNpbGl0YXRlIHRyZWUtc2hha2luZy5cbiAgICAgICAgY29uc3Qgc2hhcmVkQ29udGV4dCA9IGluc3RhbmNlLmN0eDtcbiAgICAgICAgLy8gaWYgdGhlIGludGVybmFsIHJlbmRlcmVyIGlzIG5vdCByZWdpc3RlcmVkLCBpdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHNlcnZlci1zaWRlIHJlbmRlcmluZyxcbiAgICAgICAgLy8gZm9yIEtlZXBBbGl2ZSwgd2UganVzdCBuZWVkIHRvIHJlbmRlciBpdHMgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFzaGFyZWRDb250ZXh0LnJlbmRlcmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5fX3ZfY2FjaGUgPSBjYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xuICAgICAgICBjb25zdCB7IHJlbmRlcmVyOiB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogX3VubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gfSA9IHNoYXJlZENvbnRleHQ7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgbW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogTW92ZVR5cGUuRU5URVIgKi8sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIC8vIGluIGNhc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgICBwYXRjaChpbnN0YW5jZS52bm9kZSwgdm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCB2bm9kZS5zbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuYSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHZub2RlSG9vaykge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb21wb25lbnRzIHRyZWVcbiAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2hhcmVkQ29udGV4dC5kZWFjdGl2YXRlID0gKHZub2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEgLyogTW92ZVR5cGUuTEVBVkUgKi8sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlLnBhcmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudHMgdHJlZVxuICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiB1bm1vdW50KHZub2RlKSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgc2hhcGVGbGFnIHNvIGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWRcbiAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgICAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodm5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgKCFmaWx0ZXIgfHwgIWZpbHRlcihuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQgfHwgIWlzU2FtZVZOb2RlVHlwZShjYWNoZWQsIGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChjYWNoZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgYWN0aXZlIGluc3RhbmNlIHNob3VsZCBubyBsb25nZXIgYmUga2VwdC1hbGl2ZS5cbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1bm1vdW50IGl0IG5vdyBidXQgaXQgbWlnaHQgYmUgbGF0ZXIsIHNvIHJlc2V0IGl0cyBmbGFnIG5vdy5cbiAgICAgICAgICAgICAgICByZXNldFNoYXBlRmxhZyhjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAga2V5cy5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcnVuZSBjYWNoZSBvbiBpbmNsdWRlL2V4Y2x1ZGUgcHJvcCBjaGFuZ2VcbiAgICAgICAgd2F0Y2goKCkgPT4gW3Byb3BzLmluY2x1ZGUsIHByb3BzLmV4Y2x1ZGVdLCAoW2luY2x1ZGUsIGV4Y2x1ZGVdKSA9PiB7XG4gICAgICAgICAgICBpbmNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiBtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKTtcbiAgICAgICAgICAgIGV4Y2x1ZGUgJiYgcHJ1bmVDYWNoZShuYW1lID0+ICFtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKTtcbiAgICAgICAgfSwgXG4gICAgICAgIC8vIHBydW5lIHBvc3QtcmVuZGVyIGFmdGVyIGBjdXJyZW50YCBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICAgIHsgZmx1c2g6ICdwb3N0JywgZGVlcDogdHJ1ZSB9KTtcbiAgICAgICAgLy8gY2FjaGUgc3ViIHRyZWUgYWZ0ZXIgcmVuZGVyXG4gICAgICAgIGxldCBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xuICAgICAgICBjb25zdCBjYWNoZVN1YnRyZWUgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBmaXggIzE2MjEsIHRoZSBwZW5kaW5nQ2FjaGVLZXkgY291bGQgYmUgMFxuICAgICAgICAgICAgaWYgKHBlbmRpbmdDYWNoZUtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHBlbmRpbmdDYWNoZUtleSwgZ2V0SW5uZXJDaGlsZChpbnN0YW5jZS5zdWJUcmVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG9uTW91bnRlZChjYWNoZVN1YnRyZWUpO1xuICAgICAgICBvblVwZGF0ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICAgICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgICAgICAgIGNhY2hlLmZvckVhY2goY2FjaGVkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHN1YlRyZWUsIHN1c3BlbnNlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBjb25zdCB2bm9kZSA9IGdldElubmVyQ2hpbGQoc3ViVHJlZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZC50eXBlID09PSB2bm9kZS50eXBlICYmIGNhY2hlZC5rZXkgPT09IHZub2RlLmtleSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGluc3RhbmNlIHdpbGwgYmUgdW5tb3VudGVkIGFzIHBhcnQgb2Yga2VlcC1hbGl2ZSdzIHVubW91bnRcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaW52b2tlIGl0cyBkZWFjdGl2YXRlZCBob29rIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XG4gICAgICAgICAgICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIXNsb3RzLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgcmF3Vk5vZGUgPSBjaGlsZHJlblswXTtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHxcbiAgICAgICAgICAgICAgICAoIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovKSAmJlxuICAgICAgICAgICAgICAgICAgICAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHJhd1ZOb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xuICAgICAgICAgICAgLy8gZm9yIGFzeW5jIGNvbXBvbmVudHMsIG5hbWUgY2hlY2sgc2hvdWxkIGJlIGJhc2VkIGluIGl0cyBsb2FkZWRcbiAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGlzQXN5bmNXcmFwcGVyKHZub2RlKVxuICAgICAgICAgICAgICAgID8gdm5vZGUudHlwZS5fX2FzeW5jUmVzb2x2ZWQgfHwge31cbiAgICAgICAgICAgICAgICA6IGNvbXApO1xuICAgICAgICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xuICAgICAgICAgICAgaWYgKChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgICAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XG4gICAgICAgICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgLy8gY2xvbmUgdm5vZGUgaWYgaXQncyByZXVzZWQgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0XG4gICAgICAgICAgICBpZiAodm5vZGUuZWwpIHtcbiAgICAgICAgICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAjMTUxMyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcmV0dXJuZWQgdm5vZGUgdG8gYmUgY2xvbmVkIGR1ZSB0byBhdHRyXG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaCBvciBzY29wZUlkLCBzbyB0aGUgdm5vZGUgaGVyZSBtYXkgbm90IGJlIHRoZSBmaW5hbCB2bm9kZVxuICAgICAgICAgICAgLy8gdGhhdCBpcyBtb3VudGVkLiBJbnN0ZWFkIG9mIGNhY2hpbmcgaXQgZGlyZWN0bHksIHdlIHN0b3JlIHRoZSBwZW5kaW5nXG4gICAgICAgICAgICAvLyBrZXkgYW5kIGNhY2hlIGBpbnN0YW5jZS5zdWJUcmVlYCAodGhlIG5vcm1hbGl6ZWQgdm5vZGUpIGluXG4gICAgICAgICAgICAvLyBiZWZvcmVNb3VudC9iZWZvcmVVcGRhdGUgaG9va3MuXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBrZXk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkVk5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb3B5IG92ZXIgbW91bnRlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XG4gICAgICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50ID0gY2FjaGVkVk5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0cmFuc2l0aW9uIGhvb2tzIG9uIHN1YlRyZWVcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgbW91bnRlZCBhcyBmcmVzaFxuICAgICAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLztcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMga2V5IHRoZSBmcmVzaGVzdFxuICAgICAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgICAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIHVubW91bnRlZFxuICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgIHJldHVybiBpc1N1c3BlbnNlKHJhd1ZOb2RlLnR5cGUpID8gcmF3Vk5vZGUgOiB2bm9kZTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xuICAgIGlmIChpc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluY2x1ZGVzKG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG9uQWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImFcIiAvKiBMaWZlY3ljbGVIb29rcy5BQ1RJVkFURUQgKi8sIHRhcmdldCk7XG59XG5mdW5jdGlvbiBvbkRlYWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImRhXCIgLyogTGlmZWN5Y2xlSG9va3MuREVBQ1RJVkFURUQgKi8sIHRhcmdldCk7XG59XG5mdW5jdGlvbiByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgdHlwZSwgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XG4gICAgLy8gY2FjaGUgdGhlIGRlYWN0aXZhdGUgYnJhbmNoIGNoZWNrIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lXG4gICAgLy8gaG9vayBjYW4gYmUgcHJvcGVybHkgZGVkdXBlZCBieSB0aGUgc2NoZWR1bGVyLiBcIl9fd2RjXCIgc3RhbmRzIGZvciBcIndpdGhcbiAgICAvLyBkZWFjdGl2YXRpb24gY2hlY2tcIi5cbiAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZGMgfHxcbiAgICAgICAgKGhvb2suX193ZGMgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBvbmx5IGZpcmUgdGhlIGhvb2sgaWYgdGhlIHRhcmdldCBpbnN0YW5jZSBpcyBOT1QgaW4gYSBkZWFjdGl2YXRlZCBicmFuY2guXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldDtcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuaXNEZWFjdGl2YXRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob29rKCk7XG4gICAgICAgIH0pO1xuICAgIGluamVjdEhvb2sodHlwZSwgd3JhcHBlZEhvb2ssIHRhcmdldCk7XG4gICAgLy8gSW4gYWRkaXRpb24gdG8gcmVnaXN0ZXJpbmcgaXQgb24gdGhlIHRhcmdldCBpbnN0YW5jZSwgd2Ugd2FsayB1cCB0aGUgcGFyZW50XG4gICAgLy8gY2hhaW4gYW5kIHJlZ2lzdGVyIGl0IG9uIGFsbCBhbmNlc3RvciBpbnN0YW5jZXMgdGhhdCBhcmUga2VlcC1hbGl2ZSByb290cy5cbiAgICAvLyBUaGlzIGF2b2lkcyB0aGUgbmVlZCB0byB3YWxrIHRoZSBlbnRpcmUgY29tcG9uZW50IHRyZWUgd2hlbiBpbnZva2luZyB0aGVzZVxuICAgIC8vIGhvb2tzLCBhbmQgbW9yZSBpbXBvcnRhbnRseSwgYXZvaWRzIHRoZSBuZWVkIHRvIHRyYWNrIGNoaWxkIGNvbXBvbmVudHMgaW5cbiAgICAvLyBhcnJheXMuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQucGFyZW50KSB7XG4gICAgICAgICAgICBpZiAoaXNLZWVwQWxpdmUoY3VycmVudC5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgaW5qZWN0VG9LZWVwQWxpdmVSb290KHdyYXBwZWRIb29rLCB0eXBlLCB0YXJnZXQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaW5qZWN0VG9LZWVwQWxpdmVSb290KGhvb2ssIHR5cGUsIHRhcmdldCwga2VlcEFsaXZlUm9vdCkge1xuICAgIC8vIGluamVjdEhvb2sgd3JhcHMgdGhlIG9yaWdpbmFsIGZvciBlcnJvciBoYW5kbGluZywgc28gbWFrZSBzdXJlIHRvIHJlbW92ZVxuICAgIC8vIHRoZSB3cmFwcGVkIHZlcnNpb24uXG4gICAgY29uc3QgaW5qZWN0ZWQgPSBpbmplY3RIb29rKHR5cGUsIGhvb2ssIGtlZXBBbGl2ZVJvb3QsIHRydWUgLyogcHJlcGVuZCAqLyk7XG4gICAgb25Vbm1vdW50ZWQoKCkgPT4ge1xuICAgICAgICByZW1vdmUoa2VlcEFsaXZlUm9vdFt0eXBlXSwgaW5qZWN0ZWQpO1xuICAgIH0sIHRhcmdldCk7XG59XG5mdW5jdGlvbiByZXNldFNoYXBlRmxhZyh2bm9kZSkge1xuICAgIC8vIGJpdHdpc2Ugb3BlcmF0aW9ucyB0byByZW1vdmUga2VlcCBhbGl2ZSBmbGFnc1xuICAgIHZub2RlLnNoYXBlRmxhZyAmPSB+MjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovO1xuICAgIHZub2RlLnNoYXBlRmxhZyAmPSB+NTEyIC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XG59XG5mdW5jdGlvbiBnZXRJbm5lckNoaWxkKHZub2RlKSB7XG4gICAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovID8gdm5vZGUuc3NDb250ZW50IDogdm5vZGU7XG59XG5cbmZ1bmN0aW9uIGluamVjdEhvb2sodHlwZSwgaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlLCBwcmVwZW5kID0gZmFsc2UpIHtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGhvb2tzID0gdGFyZ2V0W3R5cGVdIHx8ICh0YXJnZXRbdHlwZV0gPSBbXSk7XG4gICAgICAgIC8vIGNhY2hlIHRoZSBlcnJvciBoYW5kbGluZyB3cmFwcGVyIGZvciBpbmplY3RlZCBob29rcyBzbyB0aGUgc2FtZSBob29rXG4gICAgICAgIC8vIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZWhcIiBzdGFuZHMgZm9yIFwid2l0aCBlcnJvclxuICAgICAgICAvLyBoYW5kbGluZ1wiLlxuICAgICAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZWggfHxcbiAgICAgICAgICAgIChob29rLl9fd2VoID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZSB0cmFja2luZyBpbnNpZGUgYWxsIGxpZmVjeWNsZSBob29rc1xuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgY2FuIHBvdGVudGlhbGx5IGJlIGNhbGxlZCBpbnNpZGUgZWZmZWN0cy5cbiAgICAgICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgICAgICAgICAgLy8gU2V0IGN1cnJlbnRJbnN0YW5jZSBkdXJpbmcgaG9vayBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgYXNzdW1lcyB0aGUgaG9vayBkb2VzIG5vdCBzeW5jaHJvbm91c2x5IHRyaWdnZXIgb3RoZXIgaG9va3MsIHdoaWNoXG4gICAgICAgICAgICAgICAgLy8gY2FuIG9ubHkgYmUgZmFsc2Ugd2hlbiB0aGUgdXNlciBkb2VzIHNvbWV0aGluZyByZWFsbHkgZnVua3kuXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgdGFyZ2V0LCB0eXBlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICAgICAgICBob29rcy51bnNoaWZ0KHdyYXBwZWRIb29rKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLnB1c2god3JhcHBlZEhvb2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cmFwcGVkSG9vaztcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IGFwaU5hbWUgPSB0b0hhbmRsZXJLZXkoRXJyb3JUeXBlU3RyaW5nc1t0eXBlXS5yZXBsYWNlKC8gaG9vayQvLCAnJykpO1xuICAgICAgICB3YXJuKGAke2FwaU5hbWV9IGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYCArXG4gICAgICAgICAgICBgYXNzb2NpYXRlZCB3aXRoLiBgICtcbiAgICAgICAgICAgIGBMaWZlY3ljbGUgaW5qZWN0aW9uIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgZXhlY3V0aW9uIG9mIHNldHVwKCkuYCArXG4gICAgICAgICAgICAoYCBJZiB5b3UgYXJlIHVzaW5nIGFzeW5jIHNldHVwKCksIG1ha2Ugc3VyZSB0byByZWdpc3RlciBsaWZlY3ljbGUgYCArXG4gICAgICAgICAgICAgICAgICAgIGBob29rcyBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0IHN0YXRlbWVudC5gXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgfVxufVxuY29uc3QgY3JlYXRlSG9vayA9IChsaWZlY3ljbGUpID0+IChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpID0+IFxuLy8gcG9zdC1jcmVhdGUgbGlmZWN5Y2xlIHJlZ2lzdHJhdGlvbnMgYXJlIG5vb3BzIGR1cmluZyBTU1IgKGV4Y2VwdCBmb3Igc2VydmVyUHJlZmV0Y2gpXG4oIWlzSW5TU1JDb21wb25lbnRTZXR1cCB8fCBsaWZlY3ljbGUgPT09IFwic3BcIiAvKiBMaWZlY3ljbGVIb29rcy5TRVJWRVJfUFJFRkVUQ0ggKi8pICYmXG4gICAgaW5qZWN0SG9vayhsaWZlY3ljbGUsICguLi5hcmdzKSA9PiBob29rKC4uLmFyZ3MpLCB0YXJnZXQpO1xuY29uc3Qgb25CZWZvcmVNb3VudCA9IGNyZWF0ZUhvb2soXCJibVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9NT1VOVCAqLyk7XG5jb25zdCBvbk1vdW50ZWQgPSBjcmVhdGVIb29rKFwibVwiIC8qIExpZmVjeWNsZUhvb2tzLk1PVU5URUQgKi8pO1xuY29uc3Qgb25CZWZvcmVVcGRhdGUgPSBjcmVhdGVIb29rKFwiYnVcIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfVVBEQVRFICovKTtcbmNvbnN0IG9uVXBkYXRlZCA9IGNyZWF0ZUhvb2soXCJ1XCIgLyogTGlmZWN5Y2xlSG9va3MuVVBEQVRFRCAqLyk7XG5jb25zdCBvbkJlZm9yZVVubW91bnQgPSBjcmVhdGVIb29rKFwiYnVtXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX1VOTU9VTlQgKi8pO1xuY29uc3Qgb25Vbm1vdW50ZWQgPSBjcmVhdGVIb29rKFwidW1cIiAvKiBMaWZlY3ljbGVIb29rcy5VTk1PVU5URUQgKi8pO1xuY29uc3Qgb25TZXJ2ZXJQcmVmZXRjaCA9IGNyZWF0ZUhvb2soXCJzcFwiIC8qIExpZmVjeWNsZUhvb2tzLlNFUlZFUl9QUkVGRVRDSCAqLyk7XG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXCJydGdcIiAvKiBMaWZlY3ljbGVIb29rcy5SRU5ERVJfVFJJR0dFUkVEICovKTtcbmNvbnN0IG9uUmVuZGVyVHJhY2tlZCA9IGNyZWF0ZUhvb2soXCJydGNcIiAvKiBMaWZlY3ljbGVIb29rcy5SRU5ERVJfVFJBQ0tFRCAqLyk7XG5mdW5jdGlvbiBvbkVycm9yQ2FwdHVyZWQoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XG4gICAgaW5qZWN0SG9vayhcImVjXCIgLyogTGlmZWN5Y2xlSG9va3MuRVJST1JfQ0FQVFVSRUQgKi8sIGhvb2ssIHRhcmdldCk7XG59XG5cbi8qKlxuUnVudGltZSBoZWxwZXIgZm9yIGFwcGx5aW5nIGRpcmVjdGl2ZXMgdG8gYSB2bm9kZS4gRXhhbXBsZSB1c2FnZTpcblxuY29uc3QgY29tcCA9IHJlc29sdmVDb21wb25lbnQoJ2NvbXAnKVxuY29uc3QgZm9vID0gcmVzb2x2ZURpcmVjdGl2ZSgnZm9vJylcbmNvbnN0IGJhciA9IHJlc29sdmVEaXJlY3RpdmUoJ2JhcicpXG5cbnJldHVybiB3aXRoRGlyZWN0aXZlcyhoKGNvbXApLCBbXG4gIFtmb28sIHRoaXMueF0sXG4gIFtiYXIsIHRoaXMueV1cbl0pXG4qL1xuZnVuY3Rpb24gdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpIHtcbiAgICBpZiAoaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gZGlyZWN0aXZlIGlkcyBhcyBjdXN0b20gZGlyZWN0aXZlIGlkOiAnICsgbmFtZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBZGRzIGRpcmVjdGl2ZXMgdG8gYSBWTm9kZS5cbiAqL1xuZnVuY3Rpb24gd2l0aERpcmVjdGl2ZXModm5vZGUsIGRpcmVjdGl2ZXMpIHtcbiAgICBjb25zdCBpbnRlcm5hbEluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGB3aXRoRGlyZWN0aXZlcyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSByZW5kZXIgZnVuY3Rpb25zLmApO1xuICAgICAgICByZXR1cm4gdm5vZGU7XG4gICAgfVxuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0RXhwb3NlUHJveHkoaW50ZXJuYWxJbnN0YW5jZSkgfHxcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5wcm94eTtcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnMgfHwgKHZub2RlLmRpcnMgPSBbXSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBbZGlyLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMgPSBFTVBUWV9PQkpdID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgaWYgKGRpcikge1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyKSkge1xuICAgICAgICAgICAgICAgIGRpciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRlZDogZGlyLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkOiBkaXJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpci5kZWVwKSB7XG4gICAgICAgICAgICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmluZGluZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgZGlyLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgYXJnLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZub2RlO1xufVxuZnVuY3Rpb24gaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgcHJldlZOb2RlLCBpbnN0YW5jZSwgbmFtZSkge1xuICAgIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycztcbiAgICBjb25zdCBvbGRCaW5kaW5ncyA9IHByZXZWTm9kZSAmJiBwcmV2Vk5vZGUuZGlycztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcbiAgICAgICAgaWYgKG9sZEJpbmRpbmdzKSB7XG4gICAgICAgICAgICBiaW5kaW5nLm9sZFZhbHVlID0gb2xkQmluZGluZ3NbaV0udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhvb2sgPSBiaW5kaW5nLmRpcltuYW1lXTtcbiAgICAgICAgaWYgKGhvb2spIHtcbiAgICAgICAgICAgIC8vIGRpc2FibGUgdHJhY2tpbmcgaW5zaWRlIGFsbCBsaWZlY3ljbGUgaG9va3NcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgY2FuIHBvdGVudGlhbGx5IGJlIGNhbGxlZCBpbnNpZGUgZWZmZWN0cy5cbiAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA4IC8qIEVycm9yQ29kZXMuRElSRUNUSVZFX0hPT0sgKi8sIFtcbiAgICAgICAgICAgICAgICB2bm9kZS5lbCxcbiAgICAgICAgICAgICAgICBiaW5kaW5nLFxuICAgICAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgICAgIHByZXZWTm9kZVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IENPTVBPTkVOVFMgPSAnY29tcG9uZW50cyc7XG5jb25zdCBESVJFQ1RJVkVTID0gJ2RpcmVjdGl2ZXMnO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50KG5hbWUsIG1heWJlU2VsZlJlZmVyZW5jZSkge1xuICAgIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgbmFtZSwgdHJ1ZSwgbWF5YmVTZWxmUmVmZXJlbmNlKSB8fCBuYW1lO1xufVxuY29uc3QgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCA9IFN5bWJvbCgpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBpZiAoaXNTdHJpbmcoY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIGNvbXBvbmVudCwgZmFsc2UpIHx8IGNvbXBvbmVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGludmFsaWQgdHlwZXMgd2lsbCBmYWxsdGhyb3VnaCB0byBjcmVhdGVWTm9kZSBhbmQgcmFpc2Ugd2FybmluZ1xuICAgICAgICByZXR1cm4gKGNvbXBvbmVudCB8fCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEaXJlY3RpdmUobmFtZSkge1xuICAgIHJldHVybiByZXNvbHZlQXNzZXQoRElSRUNUSVZFUywgbmFtZSk7XG59XG4vLyBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KHR5cGUsIG5hbWUsIHdhcm5NaXNzaW5nID0gdHJ1ZSwgbWF5YmVTZWxmUmVmZXJlbmNlID0gZmFsc2UpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB8fCBjdXJyZW50SW5zdGFuY2U7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gICAgICAgIC8vIGV4cGxpY2l0IHNlbGYgbmFtZSBoYXMgaGlnaGVzdCBwcmlvcml0eVxuICAgICAgICBpZiAodHlwZSA9PT0gQ09NUE9ORU5UUykge1xuICAgICAgICAgICAgY29uc3Qgc2VsZk5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCwgZmFsc2UgLyogZG8gbm90IGluY2x1ZGUgaW5mZXJyZWQgbmFtZSB0byBhdm9pZCBicmVha2luZyBleGlzdGluZyBjb2RlICovKTtcbiAgICAgICAgICAgIGlmIChzZWxmTmFtZSAmJlxuICAgICAgICAgICAgICAgIChzZWxmTmFtZSA9PT0gbmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FtZWxpemUobmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZk5hbWUgPT09IGNhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gXG4gICAgICAgIC8vIGxvY2FsIHJlZ2lzdHJhdGlvblxuICAgICAgICAvLyBjaGVjayBpbnN0YW5jZVt0eXBlXSBmaXJzdCB3aGljaCBpcyByZXNvbHZlZCBmb3Igb3B0aW9ucyBBUElcbiAgICAgICAgcmVzb2x2ZShpbnN0YW5jZVt0eXBlXSB8fCBDb21wb25lbnRbdHlwZV0sIG5hbWUpIHx8XG4gICAgICAgICAgICAvLyBnbG9iYWwgcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICByZXNvbHZlKGluc3RhbmNlLmFwcENvbnRleHRbdHlwZV0sIG5hbWUpO1xuICAgICAgICBpZiAoIXJlcyAmJiBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGltcGxpY2l0IHNlbGYtcmVmZXJlbmNlXG4gICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgICAgICAgICAgY29uc3QgZXh0cmEgPSB0eXBlID09PSBDT01QT05FTlRTXG4gICAgICAgICAgICAgICAgPyBgXFxuSWYgdGhpcyBpcyBhIG5hdGl2ZSBjdXN0b20gZWxlbWVudCwgbWFrZSBzdXJlIHRvIGV4Y2x1ZGUgaXQgZnJvbSBgICtcbiAgICAgICAgICAgICAgICAgICAgYGNvbXBvbmVudCByZXNvbHV0aW9uIHZpYSBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50LmBcbiAgICAgICAgICAgICAgICA6IGBgO1xuICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIHJlc29sdmUgJHt0eXBlLnNsaWNlKDAsIC0xKX06ICR7bmFtZX0ke2V4dHJhfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGByZXNvbHZlJHtjYXBpdGFsaXplKHR5cGUuc2xpY2UoMCwgLTEpKX0gYCArXG4gICAgICAgICAgICBgY2FuIG9ubHkgYmUgdXNlZCBpbiByZW5kZXIoKSBvciBzZXR1cCgpLmApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmUocmVnaXN0cnksIG5hbWUpIHtcbiAgICByZXR1cm4gKHJlZ2lzdHJ5ICYmXG4gICAgICAgIChyZWdpc3RyeVtuYW1lXSB8fFxuICAgICAgICAgICAgcmVnaXN0cnlbY2FtZWxpemUobmFtZSldIHx8XG4gICAgICAgICAgICByZWdpc3RyeVtjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKV0pKTtcbn1cblxuLyoqXG4gKiBBY3R1YWwgaW1wbGVtZW50YXRpb25cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdChzb3VyY2UsIHJlbmRlckl0ZW0sIGNhY2hlLCBpbmRleCkge1xuICAgIGxldCByZXQ7XG4gICAgY29uc3QgY2FjaGVkID0gKGNhY2hlICYmIGNhY2hlW2luZGV4XSk7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSB8fCBpc1N0cmluZyhzb3VyY2UpKSB7XG4gICAgICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtpXSwgaSwgdW5kZWZpbmVkLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFOdW1iZXIuaXNJbnRlZ2VyKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHdhcm4oYFRoZSB2LWZvciByYW5nZSBleHBlY3QgYW4gaW50ZWdlciB2YWx1ZSBidXQgZ290ICR7c291cmNlfS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2U7IGkrKykge1xuICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShpICsgMSwgaSwgdW5kZWZpbmVkLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIGlmIChzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgICAgICAgcmV0ID0gQXJyYXkuZnJvbShzb3VyY2UsIChpdGVtLCBpKSA9PiByZW5kZXJJdGVtKGl0ZW0sIGksIHVuZGVmaW5lZCwgY2FjaGVkICYmIGNhY2hlZFtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2Vba2V5XSwga2V5LCBpLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0ID0gW107XG4gICAgfVxuICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZVtpbmRleF0gPSByZXQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogQ29tcGlsZXIgcnVudGltZSBoZWxwZXIgZm9yIGNyZWF0aW5nIGR5bmFtaWMgc2xvdHMgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVTbG90cyhzbG90cywgZHluYW1pY1Nsb3RzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljU2xvdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2xvdCA9IGR5bmFtaWNTbG90c1tpXTtcbiAgICAgICAgLy8gYXJyYXkgb2YgZHluYW1pYyBzbG90IGdlbmVyYXRlZCBieSA8dGVtcGxhdGUgdi1mb3I9XCIuLi5cIiAjWy4uLl0+XG4gICAgICAgIGlmIChpc0FycmF5KHNsb3QpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3QubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBzbG90c1tzbG90W2pdLm5hbWVdID0gc2xvdFtqXS5mbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzbG90KSB7XG4gICAgICAgICAgICAvLyBjb25kaXRpb25hbCBzaW5nbGUgc2xvdCBnZW5lcmF0ZWQgYnkgPHRlbXBsYXRlIHYtaWY9XCIuLi5cIiAjZm9vPlxuICAgICAgICAgICAgc2xvdHNbc2xvdC5uYW1lXSA9IHNsb3Qua2V5XG4gICAgICAgICAgICAgICAgPyAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBzbG90LmZuKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAvLyBhdHRhY2ggYnJhbmNoIGtleSBzbyBlYWNoIGNvbmRpdGlvbmFsIGJyYW5jaCBpcyBjb25zaWRlcmVkIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlmZmVyZW50IGZyYWdtZW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMua2V5ID0gc2xvdC5rZXk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogc2xvdC5mbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2xvdHM7XG59XG5cbi8qKlxuICogQ29tcGlsZXIgcnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBgPHNsb3QvPmBcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3Qoc2xvdHMsIG5hbWUsIHByb3BzID0ge30sIFxuLy8gdGhpcyBpcyBub3QgYSB1c2VyLWZhY2luZyBmdW5jdGlvbiwgc28gdGhlIGZhbGxiYWNrIGlzIGFsd2F5cyBnZW5lcmF0ZWQgYnlcbi8vIHRoZSBjb21waWxlciBhbmQgZ3VhcmFudGVlZCB0byBiZSBhIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheVxuZmFsbGJhY2ssIG5vU2xvdHRlZCkge1xuICAgIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UuaXNDRSB8fFxuICAgICAgICAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudCAmJlxuICAgICAgICAgICAgaXNBc3luY1dyYXBwZXIoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudCkgJiZcbiAgICAgICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQuaXNDRSkpIHtcbiAgICAgICAgaWYgKG5hbWUgIT09ICdkZWZhdWx0JylcbiAgICAgICAgICAgIHByb3BzLm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoJ3Nsb3QnLCBwcm9wcywgZmFsbGJhY2sgJiYgZmFsbGJhY2soKSk7XG4gICAgfVxuICAgIGxldCBzbG90ID0gc2xvdHNbbmFtZV07XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzbG90ICYmIHNsb3QubGVuZ3RoID4gMSkge1xuICAgICAgICB3YXJuKGBTU1Itb3B0aW1pemVkIHNsb3QgZnVuY3Rpb24gZGV0ZWN0ZWQgaW4gYSBub24tU1NSLW9wdGltaXplZCByZW5kZXIgYCArXG4gICAgICAgICAgICBgZnVuY3Rpb24uIFlvdSBuZWVkIHRvIG1hcmsgdGhpcyBjb21wb25lbnQgd2l0aCAkZHluYW1pYy1zbG90cyBpbiB0aGUgYCArXG4gICAgICAgICAgICBgcGFyZW50IHRlbXBsYXRlLmApO1xuICAgICAgICBzbG90ID0gKCkgPT4gW107XG4gICAgfVxuICAgIC8vIGEgY29tcGlsZWQgc2xvdCBkaXNhYmxlcyBibG9jayB0cmFja2luZyBieSBkZWZhdWx0IHRvIGF2b2lkIG1hbnVhbFxuICAgIC8vIGludm9jYXRpb24gaW50ZXJmZXJpbmcgd2l0aCB0ZW1wbGF0ZS1iYXNlZCBibG9jayB0cmFja2luZywgYnV0IGluXG4gICAgLy8gYHJlbmRlclNsb3RgIHdlIGNhbiBiZSBzdXJlIHRoYXQgaXQncyB0ZW1wbGF0ZS1iYXNlZCBzbyB3ZSBjYW4gZm9yY2VcbiAgICAvLyBlbmFibGUgaXQuXG4gICAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgICAgICBzbG90Ll9kID0gZmFsc2U7XG4gICAgfVxuICAgIG9wZW5CbG9jaygpO1xuICAgIGNvbnN0IHZhbGlkU2xvdENvbnRlbnQgPSBzbG90ICYmIGVuc3VyZVZhbGlkVk5vZGUoc2xvdChwcm9wcykpO1xuICAgIGNvbnN0IHJlbmRlcmVkID0gY3JlYXRlQmxvY2soRnJhZ21lbnQsIHtcbiAgICAgICAga2V5OiBwcm9wcy5rZXkgfHxcbiAgICAgICAgICAgIC8vIHNsb3QgY29udGVudCBhcnJheSBvZiBhIGR5bmFtaWMgY29uZGl0aW9uYWwgc2xvdCBtYXkgaGF2ZSBhIGJyYW5jaFxuICAgICAgICAgICAgLy8ga2V5IGF0dGFjaGVkIGluIHRoZSBgY3JlYXRlU2xvdHNgIGhlbHBlciwgcmVzcGVjdCB0aGF0XG4gICAgICAgICAgICAodmFsaWRTbG90Q29udGVudCAmJiB2YWxpZFNsb3RDb250ZW50LmtleSkgfHxcbiAgICAgICAgICAgIGBfJHtuYW1lfWBcbiAgICB9LCB2YWxpZFNsb3RDb250ZW50IHx8IChmYWxsYmFjayA/IGZhbGxiYWNrKCkgOiBbXSksIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovXG4gICAgICAgID8gNjQgLyogUGF0Y2hGbGFncy5TVEFCTEVfRlJBR01FTlQgKi9cbiAgICAgICAgOiAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi8pO1xuICAgIGlmICghbm9TbG90dGVkICYmIHJlbmRlcmVkLnNjb3BlSWQpIHtcbiAgICAgICAgcmVuZGVyZWQuc2xvdFNjb3BlSWRzID0gW3JlbmRlcmVkLnNjb3BlSWQgKyAnLXMnXTtcbiAgICB9XG4gICAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgICAgICBzbG90Ll9kID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlcmVkO1xufVxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcbiAgICByZXR1cm4gdm5vZGVzLnNvbWUoY2hpbGQgPT4ge1xuICAgICAgICBpZiAoIWlzVk5vZGUoY2hpbGQpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQgJiZcbiAgICAgICAgICAgICFlbnN1cmVWYWxpZFZOb2RlKGNoaWxkLmNoaWxkcmVuKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSlcbiAgICAgICAgPyB2bm9kZXNcbiAgICAgICAgOiBudWxsO1xufVxuXG4vKipcbiAqIEZvciBwcmVmaXhpbmcga2V5cyBpbiB2LW9uPVwib2JqXCIgd2l0aCBcIm9uXCJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRvSGFuZGxlcnMob2JqLCBwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSkge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgd2Fybihgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgcmV0W3ByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5ICYmIC9bQS1aXS8udGVzdChrZXkpXG4gICAgICAgICAgICA/IGBvbjoke2tleX1gXG4gICAgICAgICAgICA6IHRvSGFuZGxlcktleShrZXkpXSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqICMyNDM3IEluIFZ1ZSAzLCBmdW5jdGlvbmFsIGNvbXBvbmVudHMgZG8gbm90IGhhdmUgYSBwdWJsaWMgaW5zdGFuY2UgcHJveHkgYnV0XG4gKiB0aGV5IGV4aXN0IGluIHRoZSBpbnRlcm5hbCBwYXJlbnQgY2hhaW4uIEZvciBjb2RlIHRoYXQgcmVsaWVzIG9uIHRyYXZlcnNpbmdcbiAqIHB1YmxpYyAkcGFyZW50IGNoYWlucywgc2tpcCBmdW5jdGlvbmFsIG9uZXMgYW5kIGdvIHRvIHRoZSBwYXJlbnQgaW5zdGVhZC5cbiAqL1xuY29uc3QgZ2V0UHVibGljSW5zdGFuY2UgPSAoaSkgPT4ge1xuICAgIGlmICghaSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzU3RhdGVmdWxDb21wb25lbnQoaSkpXG4gICAgICAgIHJldHVybiBnZXRFeHBvc2VQcm94eShpKSB8fCBpLnByb3h5O1xuICAgIHJldHVybiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCk7XG59O1xuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IFxuLy8gTW92ZSBQVVJFIG1hcmtlciB0byBuZXcgbGluZSB0byB3b3JrYXJvdW5kIGNvbXBpbGVyIGRpc2NhcmRpbmcgaXRcbi8vIGR1ZSB0byB0eXBlIGFubm90YXRpb25cbi8qI19fUFVSRV9fKi8gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgICAkOiBpID0+IGksXG4gICAgJGVsOiBpID0+IGkudm5vZGUuZWwsXG4gICAgJGRhdGE6IGkgPT4gaS5kYXRhLFxuICAgICRwcm9wczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucHJvcHMpIDogaS5wcm9wcyksXG4gICAgJGF0dHJzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5hdHRycykgOiBpLmF0dHJzKSxcbiAgICAkc2xvdHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnNsb3RzKSA6IGkuc2xvdHMpLFxuICAgICRyZWZzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5yZWZzKSA6IGkucmVmcyksXG4gICAgJHBhcmVudDogaSA9PiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCksXG4gICAgJHJvb3Q6IGkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcbiAgICAkZW1pdDogaSA9PiBpLmVtaXQsXG4gICAgJG9wdGlvbnM6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSA6IGkudHlwZSksXG4gICAgJGZvcmNlVXBkYXRlOiBpID0+IGkuZiB8fCAoaS5mID0gKCkgPT4gcXVldWVKb2IoaS51cGRhdGUpKSxcbiAgICAkbmV4dFRpY2s6IGkgPT4gaS5uIHx8IChpLm4gPSBuZXh0VGljay5iaW5kKGkucHJveHkpKSxcbiAgICAkd2F0Y2g6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgOiBOT09QKVxufSk7XG5jb25zdCBpc1Jlc2VydmVkUHJlZml4ID0gKGtleSkgPT4ga2V5ID09PSAnXycgfHwga2V5ID09PSAnJCc7XG5jb25zdCBoYXNTZXR1cEJpbmRpbmcgPSAoc3RhdGUsIGtleSkgPT4gc3RhdGUgIT09IEVNUFRZX09CSiAmJiAhc3RhdGUuX19pc1NjcmlwdFNldHVwICYmIGhhc093bihzdGF0ZSwga2V5KTtcbmNvbnN0IFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IHtcbiAgICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcbiAgICAgICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUsIGRhdGEsIHByb3BzLCBhY2Nlc3NDYWNoZSwgdHlwZSwgYXBwQ29udGV4dCB9ID0gaW5zdGFuY2U7XG4gICAgICAgIC8vIGZvciBpbnRlcm5hbCBmb3JtYXR0ZXJzIHRvIGtub3cgdGhhdCB0aGlzIGlzIGEgVnVlIGluc3RhbmNlXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5ID09PSAnX19pc1Z1ZScpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRhdGEgLyBwcm9wcyAvIGN0eFxuICAgICAgICAvLyBUaGlzIGdldHRlciBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgcHJvcGVydHkgYWNjZXNzIG9uIHRoZSByZW5kZXIgY29udGV4dFxuICAgICAgICAvLyBkdXJpbmcgcmVuZGVyIGFuZCBpcyBhIG1ham9yIGhvdHNwb3QuIFRoZSBtb3N0IGV4cGVuc2l2ZSBwYXJ0IG9mIHRoaXNcbiAgICAgICAgLy8gaXMgdGhlIG11bHRpcGxlIGhhc093bigpIGNhbGxzLiBJdCdzIG11Y2ggZmFzdGVyIHRvIGRvIGEgc2ltcGxlIHByb3BlcnR5XG4gICAgICAgIC8vIGFjY2VzcyBvbiBhIHBsYWluIG9iamVjdCwgc28gd2UgdXNlIGFuIGFjY2Vzc0NhY2hlIG9iamVjdCAod2l0aCBudWxsXG4gICAgICAgIC8vIHByb3RvdHlwZSkgdG8gbWVtb2l6ZSB3aGF0IGFjY2VzcyB0eXBlIGEga2V5IGNvcnJlc3BvbmRzIHRvLlxuICAgICAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xuICAgICAgICBpZiAoa2V5WzBdICE9PSAnJCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xuICAgICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEgLyogQWNjZXNzVHlwZXMuU0VUVVAgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIgLyogQWNjZXNzVHlwZXMuREFUQSAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBBY2Nlc3NUeXBlcy5DT05URVhUICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDMgLyogQWNjZXNzVHlwZXMuUFJPUFMgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdDoganVzdCBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDEgLyogQWNjZXNzVHlwZXMuU0VUVVAgKi87XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIEFjY2Vzc1R5cGVzLkRBVEEgKi87XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgLy8gb25seSBjYWNoZSBvdGhlciBwcm9wZXJ0aWVzIHdoZW4gaW5zdGFuY2UgaGFzIGRlY2xhcmVkICh0aHVzIHN0YWJsZSlcbiAgICAgICAgICAgIC8vIHByb3BzXG4gICAgICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJlxuICAgICAgICAgICAgICAgIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBBY2Nlc3NUeXBlcy5QUk9QUyAqLztcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBBY2Nlc3NUeXBlcy5DT05URVhUICovO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfX1ZVRV9PUFRJT05TX0FQSV9fIHx8IHNob3VsZENhY2hlQWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDAgLyogQWNjZXNzVHlwZXMuT1RIRVIgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHVibGljR2V0dGVyID0gcHVibGljUHJvcGVydGllc01hcFtrZXldO1xuICAgICAgICBsZXQgY3NzTW9kdWxlLCBnbG9iYWxQcm9wZXJ0aWVzO1xuICAgICAgICAvLyBwdWJsaWMgJHh4eCBwcm9wZXJ0aWVzXG4gICAgICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICckYXR0cnMnKSB7XG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywga2V5KTtcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwdWJsaWNHZXR0ZXIoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAvLyBjc3MgbW9kdWxlIChpbmplY3RlZCBieSB2dWUtbG9hZGVyKVxuICAgICAgICAoY3NzTW9kdWxlID0gdHlwZS5fX2Nzc01vZHVsZXMpICYmXG4gICAgICAgICAgICAoY3NzTW9kdWxlID0gY3NzTW9kdWxlW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzTW9kdWxlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgICAgICAgIC8vIHVzZXIgbWF5IHNldCBjdXN0b20gcHJvcGVydGllcyB0byBgdGhpc2AgdGhhdCBzdGFydCB3aXRoIGAkYFxuICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogQWNjZXNzVHlwZXMuQ09OVEVYVCAqLztcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgLy8gZ2xvYmFsIHByb3BlcnRpZXNcbiAgICAgICAgKChnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcyksXG4gICAgICAgICAgICBoYXNPd24oZ2xvYmFsUHJvcGVydGllcywga2V5KSkpIHtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsUHJvcGVydGllc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlICYmXG4gICAgICAgICAgICAoIWlzU3RyaW5nKGtleSkgfHxcbiAgICAgICAgICAgICAgICAvLyAjMTA5MSBhdm9pZCBpbnRlcm5hbCBpc1JlZi9pc1ZOb2RlIGNoZWNrcyBvbiBjb21wb25lbnQgaW5zdGFuY2UgbGVhZGluZ1xuICAgICAgICAgICAgICAgIC8vIHRvIGluZmluaXRlIHdhcm5pbmcgbG9vcFxuICAgICAgICAgICAgICAgIGtleS5pbmRleE9mKCdfX3YnKSAhPT0gMCkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgd2FybihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBtdXN0IGJlIGFjY2Vzc2VkIHZpYSAkZGF0YSBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIGEgcmVzZXJ2ZWQgYCArXG4gICAgICAgICAgICAgICAgICAgIGBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UgPT09IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYCArXG4gICAgICAgICAgICAgICAgICAgIGBidXQgaXMgbm90IGRlZmluZWQgb24gaW5zdGFuY2UuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldCh7IF86IGluc3RhbmNlIH0sIGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoaGFzU2V0dXBCaW5kaW5nKHNldHVwU3RhdGUsIGtleSkpIHtcbiAgICAgICAgICAgIHNldHVwU3RhdGVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICBzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCAmJlxuICAgICAgICAgICAgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcbiAgICAgICAgICAgIHdhcm4oYENhbm5vdCBtdXRhdGUgPHNjcmlwdCBzZXR1cD4gYmluZGluZyBcIiR7a2V5fVwiIGZyb20gT3B0aW9ucyBBUEkuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc093bihpbnN0YW5jZS5wcm9wcywga2V5KSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEF0dGVtcHRpbmcgdG8gbXV0YXRlIHByb3AgXCIke2tleX1cIi4gUHJvcHMgYXJlIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyAmJiBrZXkuc2xpY2UoMSkgaW4gaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEF0dGVtcHRpbmcgdG8gbXV0YXRlIHB1YmxpYyBwcm9wZXJ0eSBcIiR7a2V5fVwiLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCAkIGFyZSByZXNlcnZlZCBhbmQgcmVhZG9ubHkuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXMoeyBfOiB7IGRhdGEsIHNldHVwU3RhdGUsIGFjY2Vzc0NhY2hlLCBjdHgsIGFwcENvbnRleHQsIHByb3BzT3B0aW9ucyB9IH0sIGtleSkge1xuICAgICAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xuICAgICAgICByZXR1cm4gKCEhYWNjZXNzQ2FjaGVba2V5XSB8fFxuICAgICAgICAgICAgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkgfHxcbiAgICAgICAgICAgIGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpIHx8XG4gICAgICAgICAgICAoKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkgfHxcbiAgICAgICAgICAgIGhhc093bihjdHgsIGtleSkgfHxcbiAgICAgICAgICAgIGhhc093bihwdWJsaWNQcm9wZXJ0aWVzTWFwLCBrZXkpIHx8XG4gICAgICAgICAgICBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSk7XG4gICAgfSxcbiAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5nZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gaW52YWxpZGF0ZSBrZXkgY2FjaGUgb2YgYSBnZXR0ZXIgYmFzZWQgcHJvcGVydHkgIzU0MTdcbiAgICAgICAgICAgIHRhcmdldC5fLmFjY2Vzc0NhY2hlW2tleV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc093bihkZXNjcmlwdG9yLCAndmFsdWUnKSkge1xuICAgICAgICAgICAgdGhpcy5zZXQodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IudmFsdWUsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG59O1xuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZmFsc2UpIHtcbiAgICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcbiAgICAgICAgd2FybihgQXZvaWQgYXBwIGxvZ2ljIHRoYXQgcmVsaWVzIG9uIGVudW1lcmF0aW5nIGtleXMgb24gYSBjb21wb25lbnQgaW5zdGFuY2UuIGAgK1xuICAgICAgICAgICAgYFRoZSBrZXlzIHdpbGwgYmUgZW1wdHkgaW4gcHJvZHVjdGlvbiBtb2RlIHRvIGF2b2lkIHBlcmZvcm1hbmNlIG92ZXJoZWFkLmApO1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gICAgfTtcbn1cbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMsIHtcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgLy8gZmFzdCBwYXRoIGZvciB1bnNjb3BhYmxlcyB3aGVuIHVzaW5nIGB3aXRoYCBibG9ja1xuICAgICAgICBpZiAoa2V5ID09PSBTeW1ib2wudW5zY29wYWJsZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmdldCh0YXJnZXQsIGtleSwgdGFyZ2V0KTtcbiAgICB9LFxuICAgIGhhcyhfLCBrZXkpIHtcbiAgICAgICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSAnXycgJiYgIWlzR2xvYmFsbHlXaGl0ZWxpc3RlZChrZXkpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XG4gICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBfIHdoaWNoIGlzIGEgcmVzZXJ2ZWQgcHJlZml4IGZvciBWdWUgaW50ZXJuYWxzLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXM7XG4gICAgfVxufSk7XG4vLyBkZXYgb25seVxuLy8gSW4gZGV2IG1vZGUsIHRoZSBwcm94eSB0YXJnZXQgZXhwb3NlcyB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHNlZW4gb24gYHRoaXNgXG4vLyBmb3IgZWFzaWVyIGNvbnNvbGUgaW5zcGVjdGlvbi4gSW4gcHJvZCBtb2RlIGl0IHdpbGwgYmUgYW4gZW1wdHkgb2JqZWN0IHNvXG4vLyB0aGVzZSBwcm9wZXJ0aWVzIGRlZmluaXRpb25zIGNhbiBiZSBza2lwcGVkLlxuZnVuY3Rpb24gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgIC8vIGV4cG9zZSBpbnRlcm5hbCBpbnN0YW5jZSBmb3IgcHJveHkgaGFuZGxlcnNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgX2AsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZVxuICAgIH0pO1xuICAgIC8vIGV4cG9zZSBwdWJsaWMgcHJvcGVydGllc1xuICAgIE9iamVjdC5rZXlzKHB1YmxpY1Byb3BlcnRpZXNNYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGdldDogKCkgPT4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKSxcbiAgICAgICAgICAgIC8vIGludGVyY2VwdGVkIGJ5IHRoZSBwcm94eSBzbyBubyBuZWVkIGZvciBpbXBsZW1lbnRhdGlvbixcbiAgICAgICAgICAgIC8vIGJ1dCBuZWVkZWQgdG8gcHJldmVudCBzZXQgZXJyb3JzXG4gICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8vIGRldiBvbmx5XG5mdW5jdGlvbiBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgY3R4LCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdIH0gPSBpbnN0YW5jZTtcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZS5wcm9wc1trZXldLFxuICAgICAgICAgICAgICAgIHNldDogTk9PUFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIGRldiBvbmx5XG5mdW5jdGlvbiBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xuICAgIE9iamVjdC5rZXlzKHRvUmF3KHNldHVwU3RhdGUpKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICghc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXApIHtcbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHJldHVybiBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBcIiRcIiBvciBcIl9cIiBgICtcbiAgICAgICAgICAgICAgICAgICAgYHdoaWNoIGFyZSByZXNlcnZlZCBwcmVmaXhlcyBmb3IgVnVlIGludGVybmFscy5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHNldHVwU3RhdGVba2V5XSxcbiAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSB7XG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJldHVybiAodHlwZSwga2V5KSA9PiB7XG4gICAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgICAgICB3YXJuKGAke3R5cGV9IHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluICR7Y2FjaGVba2V5XX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWNoZVtrZXldID0gdHlwZTtcbiAgICAgICAgfVxuICAgIH07XG59XG5sZXQgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xuZnVuY3Rpb24gYXBwbHlPcHRpb25zKGluc3RhbmNlKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKTtcbiAgICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XG4gICAgY29uc3QgY3R4ID0gaW5zdGFuY2UuY3R4O1xuICAgIC8vIGRvIG5vdCBjYWNoZSBwcm9wZXJ0eSBhY2Nlc3Mgb24gcHVibGljIHByb3h5IGR1cmluZyBzdGF0ZSBpbml0aWFsaXphdGlvblxuICAgIHNob3VsZENhY2hlQWNjZXNzID0gZmFsc2U7XG4gICAgLy8gY2FsbCBiZWZvcmVDcmVhdGUgZmlyc3QgYmVmb3JlIGFjY2Vzc2luZyBvdGhlciBvcHRpb25zIHNpbmNlXG4gICAgLy8gdGhlIGhvb2sgbWF5IG11dGF0ZSByZXNvbHZlZCBvcHRpb25zICgjMjc5MSlcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVDcmVhdGUpIHtcbiAgICAgICAgY2FsbEhvb2sob3B0aW9ucy5iZWZvcmVDcmVhdGUsIGluc3RhbmNlLCBcImJjXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX0NSRUFURSAqLyk7XG4gICAgfVxuICAgIGNvbnN0IHsgXG4gICAgLy8gc3RhdGVcbiAgICBkYXRhOiBkYXRhT3B0aW9ucywgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucywgbWV0aG9kcywgd2F0Y2g6IHdhdGNoT3B0aW9ucywgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsIGluamVjdDogaW5qZWN0T3B0aW9ucywgXG4gICAgLy8gbGlmZWN5Y2xlXG4gICAgY3JlYXRlZCwgYmVmb3JlTW91bnQsIG1vdW50ZWQsIGJlZm9yZVVwZGF0ZSwgdXBkYXRlZCwgYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCwgYmVmb3JlRGVzdHJveSwgYmVmb3JlVW5tb3VudCwgZGVzdHJveWVkLCB1bm1vdW50ZWQsIHJlbmRlciwgcmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJpZ2dlcmVkLCBlcnJvckNhcHR1cmVkLCBzZXJ2ZXJQcmVmZXRjaCwgXG4gICAgLy8gcHVibGljIEFQSVxuICAgIGV4cG9zZSwgaW5oZXJpdEF0dHJzLCBcbiAgICAvLyBhc3NldHNcbiAgICBjb21wb25lbnRzLCBkaXJlY3RpdmVzLCBmaWx0ZXJzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCBbcHJvcHNPcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHNPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiUHJvcHNcIiAvKiBPcHRpb25UeXBlcy5QUk9QUyAqLywga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBvcHRpb25zIGluaXRpYWxpemF0aW9uIG9yZGVyICh0byBiZSBjb25zaXN0ZW50IHdpdGggVnVlIDIpOlxuICAgIC8vIC0gcHJvcHMgKGFscmVhZHkgZG9uZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24pXG4gICAgLy8gLSBpbmplY3RcbiAgICAvLyAtIG1ldGhvZHNcbiAgICAvLyAtIGRhdGEgKGRlZmVycmVkIHNpbmNlIGl0IHJlbGllcyBvbiBgdGhpc2AgYWNjZXNzKVxuICAgIC8vIC0gY29tcHV0ZWRcbiAgICAvLyAtIHdhdGNoIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcbiAgICBpZiAoaW5qZWN0T3B0aW9ucykge1xuICAgICAgICByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcywgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcudW53cmFwSW5qZWN0ZWRSZWYpO1xuICAgIH1cbiAgICBpZiAobWV0aG9kcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBkZXYgbW9kZSwgd2UgdXNlIHRoZSBgY3JlYXRlUmVuZGVyQ29udGV4dGAgZnVuY3Rpb24gdG8gZGVmaW5lXG4gICAgICAgICAgICAgICAgLy8gbWV0aG9kcyB0byB0aGUgcHJveHkgdGFyZ2V0LCBhbmQgdGhvc2UgYXJlIHJlYWQtb25seSBidXRcbiAgICAgICAgICAgICAgICAvLyByZWNvbmZpZ3VyYWJsZSwgc28gaXQgbmVlZHMgdG8gYmUgcmVkZWZpbmVkIGhlcmVcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eFtrZXldID0gbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIk1ldGhvZHNcIiAvKiBPcHRpb25UeXBlcy5NRVRIT0RTICovLCBrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYE1ldGhvZCBcIiR7a2V5fVwiIGhhcyB0eXBlIFwiJHt0eXBlb2YgbWV0aG9kSGFuZGxlcn1cIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIGAgK1xuICAgICAgICAgICAgICAgICAgICBgRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihkYXRhT3B0aW9ucykpIHtcbiAgICAgICAgICAgIHdhcm4oYFRoZSBkYXRhIG9wdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24uIGAgK1xuICAgICAgICAgICAgICAgIGBQbGFpbiBvYmplY3QgdXNhZ2UgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gZGF0YU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1Byb21pc2UoZGF0YSkpIHtcbiAgICAgICAgICAgIHdhcm4oYGRhdGEoKSByZXR1cm5lZCBhIFByb21pc2UgLSBub3RlIGRhdGEoKSBjYW5ub3QgYmUgYXN5bmM7IElmIHlvdSBgICtcbiAgICAgICAgICAgICAgICBgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBgICtcbiAgICAgICAgICAgICAgICBgYXN5bmMgc2V0dXAoKSArIDxTdXNwZW5zZT4uYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYGRhdGEoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC5gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmRhdGEgPSByZWFjdGl2ZShkYXRhKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkRhdGFcIiAvKiBPcHRpb25UeXBlcy5EQVRBICovLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBleHBvc2UgZGF0YSBvbiBjdHggZHVyaW5nIGRldlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBkYXRhW2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzdGF0ZSBpbml0aWFsaXphdGlvbiBjb21wbGV0ZSBhdCB0aGlzIHBvaW50IC0gc3RhcnQgY2FjaGluZyBhY2Nlc3NcbiAgICBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG4gICAgaWYgKGNvbXB1dGVkT3B0aW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdCA9IGNvbXB1dGVkT3B0aW9uc1trZXldO1xuICAgICAgICAgICAgY29uc3QgZ2V0ID0gaXNGdW5jdGlvbihvcHQpXG4gICAgICAgICAgICAgICAgPyBvcHQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxuICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbihvcHQuZ2V0KVxuICAgICAgICAgICAgICAgICAgICA/IG9wdC5nZXQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGdldCA9PT0gTk9PUCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYENvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaGFzIG5vIGdldHRlci5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNldCA9ICFpc0Z1bmN0aW9uKG9wdCkgJiYgaXNGdW5jdGlvbihvcHQuc2V0KVxuICAgICAgICAgICAgICAgID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpXG4gICAgICAgICAgICAgICAgOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgPyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb21wdXRlZCh7XG4gICAgICAgICAgICAgICAgZ2V0LFxuICAgICAgICAgICAgICAgIHNldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGMudmFsdWUsXG4gICAgICAgICAgICAgICAgc2V0OiB2ID0+IChjLnZhbHVlID0gdilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkNvbXB1dGVkXCIgLyogT3B0aW9uVHlwZXMuQ09NUFVURUQgKi8sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdhdGNoT3B0aW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB3YXRjaE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNyZWF0ZVdhdGNoZXIod2F0Y2hPcHRpb25zW2tleV0sIGN0eCwgcHVibGljVGhpcywga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBpc0Z1bmN0aW9uKHByb3ZpZGVPcHRpb25zKVxuICAgICAgICAgICAgPyBwcm92aWRlT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMpXG4gICAgICAgICAgICA6IHByb3ZpZGVPcHRpb25zO1xuICAgICAgICBSZWZsZWN0Lm93bktleXMocHJvdmlkZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCBwcm92aWRlc1trZXldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChjcmVhdGVkKSB7XG4gICAgICAgIGNhbGxIb29rKGNyZWF0ZWQsIGluc3RhbmNlLCBcImNcIiAvKiBMaWZlY3ljbGVIb29rcy5DUkVBVEVEICovKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJMaWZlY3ljbGVIb29rKHJlZ2lzdGVyLCBob29rKSB7XG4gICAgICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICAgICAgICBob29rLmZvckVhY2goX2hvb2sgPT4gcmVnaXN0ZXIoX2hvb2suYmluZChwdWJsaWNUaGlzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhvb2spIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyKGhvb2suYmluZChwdWJsaWNUaGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlTW91bnQsIGJlZm9yZU1vdW50KTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Nb3VudGVkLCBtb3VudGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVcGRhdGUsIGJlZm9yZVVwZGF0ZSk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uVXBkYXRlZCwgdXBkYXRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQWN0aXZhdGVkLCBhY3RpdmF0ZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkRlYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uRXJyb3JDYXB0dXJlZCwgZXJyb3JDYXB0dXJlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJhY2tlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJpZ2dlcmVkLCByZW5kZXJUcmlnZ2VyZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZVVubW91bnQsIGJlZm9yZVVubW91bnQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVubW91bnRlZCwgdW5tb3VudGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25TZXJ2ZXJQcmVmZXRjaCwgc2VydmVyUHJlZmV0Y2gpO1xuICAgIGlmIChpc0FycmF5KGV4cG9zZSkpIHtcbiAgICAgICAgaWYgKGV4cG9zZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9zZWQgPSBpbnN0YW5jZS5leHBvc2VkIHx8IChpbnN0YW5jZS5leHBvc2VkID0ge30pO1xuICAgICAgICAgICAgZXhwb3NlLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3NlZCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcHVibGljVGhpc1trZXldLFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IHZhbCA9PiAocHVibGljVGhpc1trZXldID0gdmFsKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmV4cG9zZWQgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBvcHRpb25zIHRoYXQgYXJlIGhhbmRsZWQgd2hlbiBjcmVhdGluZyB0aGUgaW5zdGFuY2UgYnV0IGFsc28gbmVlZCB0byBiZVxuICAgIC8vIGFwcGxpZWQgZnJvbSBtaXhpbnNcbiAgICBpZiAocmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCkge1xuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSByZW5kZXI7XG4gICAgfVxuICAgIGlmIChpbmhlcml0QXR0cnMgIT0gbnVsbCkge1xuICAgICAgICBpbnN0YW5jZS5pbmhlcml0QXR0cnMgPSBpbmhlcml0QXR0cnM7XG4gICAgfVxuICAgIC8vIGFzc2V0IG9wdGlvbnMuXG4gICAgaWYgKGNvbXBvbmVudHMpXG4gICAgICAgIGluc3RhbmNlLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgIGlmIChkaXJlY3RpdmVzKVxuICAgICAgICBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbn1cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3Rpb25zKGluamVjdE9wdGlvbnMsIGN0eCwgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gTk9PUCwgdW53cmFwUmVmID0gZmFsc2UpIHtcbiAgICBpZiAoaXNBcnJheShpbmplY3RPcHRpb25zKSkge1xuICAgICAgICBpbmplY3RPcHRpb25zID0gbm9ybWFsaXplSW5qZWN0KGluamVjdE9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbmplY3RPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IGluamVjdE9wdGlvbnNba2V5XTtcbiAgICAgICAgbGV0IGluamVjdGVkO1xuICAgICAgICBpZiAoaXNPYmplY3Qob3B0KSkge1xuICAgICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBvcHQpIHtcbiAgICAgICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXksIG9wdC5kZWZhdWx0LCB0cnVlIC8qIHRyZWF0IGRlZmF1bHQgZnVuY3Rpb24gYXMgZmFjdG9yeSAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5qZWN0ZWQgPSBpbmplY3Qob3B0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWYoaW5qZWN0ZWQpKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHJlbW92ZSB0aGUgY2hlY2sgaW4gMy4zXG4gICAgICAgICAgICBpZiAodW53cmFwUmVmKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBpbmplY3RlZC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiB2ID0+IChpbmplY3RlZC52YWx1ZSA9IHYpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYGluamVjdGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYSByZWYgYW5kIHdpbGwgYmUgYXV0by11bndyYXBwZWQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgYW5kIG5vIGxvbmdlciBuZWVkcyBcXGAudmFsdWVcXGAgaW4gdGhlIG5leHQgbWlub3IgcmVsZWFzZS4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgVG8gb3B0LWluIHRvIHRoZSBuZXcgYmVoYXZpb3Igbm93LCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBzZXQgXFxgYXBwLmNvbmZpZy51bndyYXBJbmplY3RlZFJlZiA9IHRydWVcXGAgKHRoaXMgY29uZmlnIGlzIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHRlbXBvcmFyeSBhbmQgd2lsbCBub3QgYmUgbmVlZGVkIGluIHRoZSBmdXR1cmUuKWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3RlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBPcHRpb25UeXBlcy5JTkpFQ1QgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjYWxsSG9vayhob29rLCBpbnN0YW5jZSwgdHlwZSkge1xuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGlzQXJyYXkoaG9vaylcbiAgICAgICAgPyBob29rLm1hcChoID0+IGguYmluZChpbnN0YW5jZS5wcm94eSkpXG4gICAgICAgIDogaG9vay5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlcihyYXcsIGN0eCwgcHVibGljVGhpcywga2V5KSB7XG4gICAgY29uc3QgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKCcuJylcbiAgICAgICAgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIGtleSlcbiAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW2tleV07XG4gICAgaWYgKGlzU3RyaW5nKHJhdykpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGN0eFtyYXddO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXd9XCJgLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCByYXcuYmluZChwdWJsaWNUaGlzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHJhdykpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgICAgICAgcmF3LmZvckVhY2gociA9PiBjcmVhdGVXYXRjaGVyKHIsIGN0eCwgcHVibGljVGhpcywga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaXNGdW5jdGlvbihyYXcuaGFuZGxlcilcbiAgICAgICAgICAgICAgICA/IHJhdy5oYW5kbGVyLmJpbmQocHVibGljVGhpcylcbiAgICAgICAgICAgICAgICA6IGN0eFtyYXcuaGFuZGxlcl07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlciwgcmF3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIG9wdGlvbjogXCIke2tleX1cImAsIHJhdyk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXNvbHZlIG1lcmdlZCBvcHRpb25zIGFuZCBjYWNoZSBpdCBvbiB0aGUgY29tcG9uZW50LlxuICogVGhpcyBpcyBkb25lIG9ubHkgb25jZSBwZXItY29tcG9uZW50IHNpbmNlIHRoZSBtZXJnaW5nIGRvZXMgbm90IGludm9sdmVcbiAqIGluc3RhbmNlcy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBiYXNlID0gaW5zdGFuY2UudHlwZTtcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGJhc2U7XG4gICAgY29uc3QgeyBtaXhpbnM6IGdsb2JhbE1peGlucywgb3B0aW9uc0NhY2hlOiBjYWNoZSwgY29uZmlnOiB7IG9wdGlvbk1lcmdlU3RyYXRlZ2llcyB9IH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0O1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChiYXNlKTtcbiAgICBsZXQgcmVzb2x2ZWQ7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgICByZXNvbHZlZCA9IGNhY2hlZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWdsb2JhbE1peGlucy5sZW5ndGggJiYgIW1peGlucyAmJiAhZXh0ZW5kc09wdGlvbnMpIHtcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSBiYXNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXNvbHZlZCA9IHt9O1xuICAgICAgICBpZiAoZ2xvYmFsTWl4aW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZ2xvYmFsTWl4aW5zLmZvckVhY2gobSA9PiBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIG0sIG9wdGlvbk1lcmdlU3RyYXRlZ2llcywgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlT3B0aW9ucyhyZXNvbHZlZCwgYmFzZSwgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGJhc2UpKSB7XG4gICAgICAgIGNhY2hlLnNldChiYXNlLCByZXNvbHZlZCk7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbn1cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyh0bywgZnJvbSwgc3RyYXRzLCBhc01peGluID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XG4gICAgaWYgKGV4dGVuZHNPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIHN0cmF0cywgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChtaXhpbnMpIHtcbiAgICAgICAgbWl4aW5zLmZvckVhY2goKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgc3RyYXRzLCB0cnVlKSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICAgICAgaWYgKGFzTWl4aW4gJiYga2V5ID09PSAnZXhwb3NlJykge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgd2FybihgXCJleHBvc2VcIiBvcHRpb24gaXMgaWdub3JlZCB3aGVuIGRlY2xhcmVkIGluIG1peGlucyBvciBleHRlbmRzLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYEl0IHNob3VsZCBvbmx5IGJlIGRlY2xhcmVkIGluIHRoZSBiYXNlIGNvbXBvbmVudCBpdHNlbGYuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHJhdCA9IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHNba2V5XSB8fCAoc3RyYXRzICYmIHN0cmF0c1trZXldKTtcbiAgICAgICAgICAgIHRvW2tleV0gPSBzdHJhdCA/IHN0cmF0KHRvW2tleV0sIGZyb21ba2V5XSkgOiBmcm9tW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xufVxuY29uc3QgaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyA9IHtcbiAgICBkYXRhOiBtZXJnZURhdGFGbixcbiAgICBwcm9wczogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIGVtaXRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgLy8gb2JqZWN0c1xuICAgIG1ldGhvZHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICBjb21wdXRlZDogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIC8vIGxpZmVjeWNsZVxuICAgIGJlZm9yZUNyZWF0ZTogbWVyZ2VBc0FycmF5LFxuICAgIGNyZWF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5LFxuICAgIG1vdW50ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBiZWZvcmVVcGRhdGU6IG1lcmdlQXNBcnJheSxcbiAgICB1cGRhdGVkOiBtZXJnZUFzQXJyYXksXG4gICAgYmVmb3JlRGVzdHJveTogbWVyZ2VBc0FycmF5LFxuICAgIGJlZm9yZVVubW91bnQ6IG1lcmdlQXNBcnJheSxcbiAgICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICB1bm1vdW50ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGVycm9yQ2FwdHVyZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBzZXJ2ZXJQcmVmZXRjaDogbWVyZ2VBc0FycmF5LFxuICAgIC8vIGFzc2V0c1xuICAgIGNvbXBvbmVudHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICBkaXJlY3RpdmVzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgLy8gd2F0Y2hcbiAgICB3YXRjaDogbWVyZ2VXYXRjaE9wdGlvbnMsXG4gICAgLy8gcHJvdmlkZSAvIGluamVjdFxuICAgIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxuICAgIGluamVjdDogbWVyZ2VJbmplY3Rcbn07XG5mdW5jdGlvbiBtZXJnZURhdGFGbih0bywgZnJvbSkge1xuICAgIGlmICghZnJvbSkge1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuICAgIGlmICghdG8pIHtcbiAgICAgICAgcmV0dXJuIGZyb207XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4oKSB7XG4gICAgICAgIHJldHVybiAoZXh0ZW5kKShpc0Z1bmN0aW9uKHRvKSA/IHRvLmNhbGwodGhpcywgdGhpcykgOiB0bywgaXNGdW5jdGlvbihmcm9tKSA/IGZyb20uY2FsbCh0aGlzLCB0aGlzKSA6IGZyb20pO1xuICAgIH07XG59XG5mdW5jdGlvbiBtZXJnZUluamVjdCh0bywgZnJvbSkge1xuICAgIHJldHVybiBtZXJnZU9iamVjdE9wdGlvbnMobm9ybWFsaXplSW5qZWN0KHRvKSwgbm9ybWFsaXplSW5qZWN0KGZyb20pKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdChyYXcpIHtcbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzW3Jhd1tpXV0gPSByYXdbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIHJhdztcbn1cbmZ1bmN0aW9uIG1lcmdlQXNBcnJheSh0bywgZnJvbSkge1xuICAgIHJldHVybiB0byA/IFsuLi5uZXcgU2V0KFtdLmNvbmNhdCh0bywgZnJvbSkpXSA6IGZyb207XG59XG5mdW5jdGlvbiBtZXJnZU9iamVjdE9wdGlvbnModG8sIGZyb20pIHtcbiAgICByZXR1cm4gdG8gPyBleHRlbmQoZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHRvKSwgZnJvbSkgOiBmcm9tO1xufVxuZnVuY3Rpb24gbWVyZ2VXYXRjaE9wdGlvbnModG8sIGZyb20pIHtcbiAgICBpZiAoIXRvKVxuICAgICAgICByZXR1cm4gZnJvbTtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiB0bztcbiAgICBjb25zdCBtZXJnZWQgPSBleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSBtZXJnZUFzQXJyYXkodG9ba2V5XSwgZnJvbVtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgaXNTdGF0ZWZ1bCwgLy8gcmVzdWx0IG9mIGJpdHdpc2UgZmxhZyBjb21wYXJpc29uXG5pc1NTUiA9IGZhbHNlKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7fTtcbiAgICBjb25zdCBhdHRycyA9IHt9O1xuICAgIGRlZihhdHRycywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xuICAgIGluc3RhbmNlLnByb3BzRGVmYXVsdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycyk7XG4gICAgLy8gZW5zdXJlIGFsbCBkZWNsYXJlZCBwcm9wIGtleXMgYXJlIHByZXNlbnRcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAoaXNTdGF0ZWZ1bCkge1xuICAgICAgICAvLyBzdGF0ZWZ1bFxuICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS50eXBlLnByb3BzKSB7XG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIG9wdGlvbmFsIHByb3BzLCBwcm9wcyA9PT0gYXR0cnNcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIGRlY2xhcmVkIHByb3BzXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IHByb3BzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlLmF0dHJzID0gYXR0cnM7XG59XG5mdW5jdGlvbiBpc0luSG1yQ29udGV4dChpbnN0YW5jZSkge1xuICAgIHdoaWxlIChpbnN0YW5jZSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5fX2htcklkKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UucGFyZW50O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcmF3UHJldlByb3BzLCBvcHRpbWl6ZWQpIHtcbiAgICBjb25zdCB7IHByb3BzLCBhdHRycywgdm5vZGU6IHsgcGF0Y2hGbGFnIH0gfSA9IGluc3RhbmNlO1xuICAgIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICBjb25zdCBbb3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAvLyBhbHdheXMgZm9yY2UgZnVsbCBkaWZmIGluIGRldlxuICAgIC8vIC0gIzE5NDIgaWYgaG1yIGlzIGVuYWJsZWQgd2l0aCBzZmMgY29tcG9uZW50XG4gICAgLy8gLSB2aXRlIzg3MiBub24tc2ZjIGNvbXBvbmVudCB1c2VkIGJ5IHNmYyBjb21wb25lbnRcbiAgICAhKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0luSG1yQ29udGV4dChpbnN0YW5jZSkpICYmXG4gICAgICAgIChvcHRpbWl6ZWQgfHwgcGF0Y2hGbGFnID4gMCkgJiZcbiAgICAgICAgIShwYXRjaEZsYWcgJiAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi8pKSB7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBhdGNoRmxhZ3MuUFJPUFMgKi8pIHtcbiAgICAgICAgICAgIC8vIENvbXBpbGVyLWdlbmVyYXRlZCBwcm9wcyAmIG5vIGtleXMgY2hhbmdlLCBqdXN0IHNldCB0aGUgdXBkYXRlZFxuICAgICAgICAgICAgLy8gdGhlIHByb3BzLlxuICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IGluc3RhbmNlLnZub2RlLmR5bmFtaWNQcm9wcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgdGhlIHByb3Aga2V5IGlzIGEgZGVjbGFyZWQgZW1pdCBldmVudCBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGlmIChpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBST1BTIGZsYWcgZ3VhcmFudGVlcyByYXdQcm9wcyB0byBiZSBub24tbnVsbFxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAvLyBhdHRyIC8gcHJvcHMgc2VwYXJhdGlvbiB3YXMgZG9uZSBvbiBpbml0IGFuZCB3aWxsIGJlIGNvbnNpc3RlbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjb2RlIHBhdGgsIHNvIGp1c3QgY2hlY2sgaWYgYXR0cnMgaGF2ZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihhdHRycywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBhdHRyc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxpemVkS2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBjYW1lbGl6ZWRLZXksIHZhbHVlLCBpbnN0YW5jZSwgZmFsc2UgLyogaXNBYnNlbnQgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGZ1bGwgcHJvcHMgdXBkYXRlLlxuICAgICAgICBpZiAoc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKSkge1xuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiBjYXNlIG9mIGR5bmFtaWMgcHJvcHMsIGNoZWNrIGlmIHdlIG5lZWQgdG8gZGVsZXRlIGtleXMgZnJvbVxuICAgICAgICAvLyB0aGUgcHJvcHMgb2JqZWN0XG4gICAgICAgIGxldCBrZWJhYktleTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3Q3VycmVudFByb3BzKSB7XG4gICAgICAgICAgICBpZiAoIXJhd1Byb3BzIHx8XG4gICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgICAgICAgICAgICghaGFzT3duKHJhd1Byb3BzLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhlIG9yaWdpbmFsIHByb3BzIHdhcyBwYXNzZWQgaW4gYXMga2ViYWItY2FzZVxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgY29udmVydGVkIHRvIGNhbWVsQ2FzZSAoIzk1NSlcbiAgICAgICAgICAgICAgICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1ByZXZQcm9wcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgKHJhd1ByZXZQcm9wc1trZXldICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3Iga2ViYWItY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCB1bmRlZmluZWQsIGluc3RhbmNlLCB0cnVlIC8qIGlzQWJzZW50ICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGZ1bmN0aW9uYWwgY29tcG9uZW50IHcvbyBwcm9wcyBkZWNsYXJhdGlvbiwgcHJvcHMgYW5kXG4gICAgICAgIC8vIGF0dHJzIHBvaW50IHRvIHRoZSBzYW1lIG9iamVjdCBzbyBpdCBzaG91bGQgYWxyZWFkeSBoYXZlIGJlZW4gdXBkYXRlZC5cbiAgICAgICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fFxuICAgICAgICAgICAgICAgICAgICAoIWhhc093bihyYXdQcm9wcywga2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFmYWxzZSApKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gdHJpZ2dlciB1cGRhdGVzIGZvciAkYXR0cnMgaW4gY2FzZSBpdCdzIHVzZWQgaW4gY29tcG9uZW50IHNsb3RzXG4gICAgaWYgKGhhc0F0dHJzQ2hhbmdlZCkge1xuICAgICAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLywgJyRhdHRycycpO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKSB7XG4gICAgY29uc3QgW29wdGlvbnMsIG5lZWRDYXN0S2V5c10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGxldCByYXdDYXN0VmFsdWVzO1xuICAgIGlmIChyYXdQcm9wcykge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gcmF3UHJvcHMpIHtcbiAgICAgICAgICAgIC8vIGtleSwgcmVmIGFyZSByZXNlcnZlZCBhbmQgbmV2ZXIgcGFzc2VkIGRvd25cbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgICAgICAvLyBwcm9wIG9wdGlvbiBuYW1lcyBhcmUgY2FtZWxpemVkIGR1cmluZyBub3JtYWxpemF0aW9uLCBzbyB0byBzdXBwb3J0XG4gICAgICAgICAgICAvLyBrZWJhYiAtPiBjYW1lbCBjb252ZXJzaW9uIGhlcmUgd2UgbmVlZCB0byBjYW1lbGl6ZSB0aGUga2V5LlxuICAgICAgICAgICAgbGV0IGNhbWVsS2V5O1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsIChjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSkge1xuICAgICAgICAgICAgICAgIGlmICghbmVlZENhc3RLZXlzIHx8ICFuZWVkQ2FzdEtleXMuaW5jbHVkZXMoY2FtZWxLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgKHJhd0Nhc3RWYWx1ZXMgfHwgKHJhd0Nhc3RWYWx1ZXMgPSB7fSkpW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gYXR0cnMpIHx8IHZhbHVlICE9PSBhdHRyc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5lZWRDYXN0S2V5cykge1xuICAgICAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICAgIGNvbnN0IGNhc3RWYWx1ZXMgPSByYXdDYXN0VmFsdWVzIHx8IEVNUFRZX09CSjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZWVkQ2FzdEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IG5lZWRDYXN0S2V5c1tpXTtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCBjYXN0VmFsdWVzW2tleV0sIGluc3RhbmNlLCAhaGFzT3duKGNhc3RWYWx1ZXMsIGtleSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXNBdHRyc0NoYW5nZWQ7XG59XG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSwgaXNBYnNlbnQpIHtcbiAgICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgaWYgKG9wdCAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGhhc0RlZmF1bHQgPSBoYXNPd24ob3B0LCAnZGVmYXVsdCcpO1xuICAgICAgICAvLyBkZWZhdWx0IHZhbHVlc1xuICAgICAgICBpZiAoaGFzRGVmYXVsdCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBvcHQuZGVmYXVsdDtcbiAgICAgICAgICAgIGlmIChvcHQudHlwZSAhPT0gRnVuY3Rpb24gJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwcm9wc0RlZmF1bHRzIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHByb3BzRGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XSA9IGRlZmF1bHRWYWx1ZS5jYWxsKG51bGwsIHByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBib29sZWFuIGNhc3RpbmdcbiAgICAgICAgaWYgKG9wdFswIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0ICovXSkge1xuICAgICAgICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdFsxIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0VHJ1ZSAqL10gJiZcbiAgICAgICAgICAgICAgICAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5wcm9wc0NhY2hlO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChjb21wKTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJhdyA9IGNvbXAucHJvcHM7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICAgIGNvbnN0IG5lZWRDYXN0S2V5cyA9IFtdO1xuICAgIC8vIGFwcGx5IG1peGluL2V4dGVuZHMgcHJvcHNcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XG4gICAgICAgIGNvbnN0IGV4dGVuZFByb3BzID0gKHJhdykgPT4ge1xuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBbcHJvcHMsIGtleXNdID0gbm9ybWFsaXplUHJvcHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcHJvcHMpO1xuICAgICAgICAgICAgaWYgKGtleXMpXG4gICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2goLi4ua2V5cyk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcbiAgICAgICAgICAgIGV4dGVuZFByb3BzKGNvbXAuZXh0ZW5kcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xuICAgICAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgICAgICAgIGNhY2hlLnNldChjb21wLCBFTVBUWV9BUlIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFTVBUWV9BUlI7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID0gRU1QVFlfT0JKO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHJhdykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChyYXcpKSB7XG4gICAgICAgICAgICB3YXJuKGBpbnZhbGlkIHByb3BzIG9wdGlvbnNgLCByYXcpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhdykge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSAobm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9XG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogT2JqZWN0LmFzc2lnbih7fSwgb3B0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFswIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0ICovXSA9IGJvb2xlYW5JbmRleCA+IC0xO1xuICAgICAgICAgICAgICAgICAgICBwcm9wWzEgLyogQm9vbGVhbkZsYWdzLnNob3VsZENhc3RUcnVlICovXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwcm9wIG5lZWRzIGJvb2xlYW4gY2FzdGluZyBvciBkZWZhdWx0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChib29sZWFuSW5kZXggPiAtMSB8fCBoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2gobm9ybWFsaXplZEtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzID0gW25vcm1hbGl6ZWQsIG5lZWRDYXN0S2V5c107XG4gICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICAgIGNhY2hlLnNldChjb21wLCByZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcbiAgICBpZiAoa2V5WzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHByb3AgbmFtZTogXCIke2tleX1cIiBpcyBhIHJlc2VydmVkIHByb3BlcnR5LmApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyB1c2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgdHlwZSBjb25zdHJ1Y3RvcnNcbi8vIHNvIHRoYXQgaXQgd29ya3MgYWNyb3NzIHZtcyAvIGlmcmFtZXMuXG5mdW5jdGlvbiBnZXRUeXBlKGN0b3IpIHtcbiAgICBjb25zdCBtYXRjaCA9IGN0b3IgJiYgY3Rvci50b1N0cmluZygpLm1hdGNoKC9eXFxzKihmdW5jdGlvbnxjbGFzcykgKFxcdyspLyk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMl0gOiBjdG9yID09PSBudWxsID8gJ251bGwnIDogJyc7XG59XG5mdW5jdGlvbiBpc1NhbWVUeXBlKGEsIGIpIHtcbiAgICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKTtcbn1cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gICAgaWYgKGlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdGVkVHlwZXMuZmluZEluZGV4KHQgPT4gaXNTYW1lVHlwZSh0LCB0eXBlKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRUeXBlcykpIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTE7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhyYXdQcm9wcywgcHJvcHMsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgcmVzb2x2ZWRWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgICAgIGlmIChvcHQgPT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB2YWxpZGF0ZVByb3Aoa2V5LCByZXNvbHZlZFZhbHVlc1trZXldLCBvcHQsICFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiYgIWhhc093bihyYXdQcm9wcywgaHlwaGVuYXRlKGtleSkpKTtcbiAgICB9XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcChuYW1lLCB2YWx1ZSwgcHJvcCwgaXNBYnNlbnQpIHtcbiAgICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IgfSA9IHByb3A7XG4gICAgLy8gcmVxdWlyZWQhXG4gICAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XG4gICAgICAgIHdhcm4oJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG1pc3NpbmcgYnV0IG9wdGlvbmFsXG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB0eXBlIGNoZWNrXG4gICAgaWYgKHR5cGUgIT0gbnVsbCAmJiB0eXBlICE9PSB0cnVlKSB7XG4gICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gaXNBcnJheSh0eXBlKSA/IHR5cGUgOiBbdHlwZV07XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICAgICAgLy8gdmFsdWUgaXMgdmFsaWQgYXMgbG9uZyBhcyBvbmUgb2YgdGhlIHNwZWNpZmllZCB0eXBlcyBtYXRjaFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgICAgICAgaXNWYWxpZCA9IHZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgd2FybihnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjdXN0b20gdmFsaWRhdG9yXG4gICAgaWYgKHZhbGlkYXRvciAmJiAhdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgICB3YXJuKCdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyk7XG4gICAgfVxufVxuY29uc3QgaXNTaW1wbGVUeXBlID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdTdHJpbmcsTnVtYmVyLEJvb2xlYW4sRnVuY3Rpb24sU3ltYm9sLEJpZ0ludCcpO1xuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlKSB7XG4gICAgbGV0IHZhbGlkO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gICAgaWYgKGlzU2ltcGxlVHlwZShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICAgICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgICAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdudWxsJykge1xuICAgICAgICB2YWxpZCA9IHZhbHVlID09PSBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHZhbGlkLFxuICAgICAgICBleHBlY3RlZFR5cGVcbiAgICB9O1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLmAgK1xuICAgICAgICBgIEV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignIHwgJyl9YDtcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICAgIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gICAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gICAgY29uc3QgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gICAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYCB3aXRoIHZhbHVlICR7ZXhwZWN0ZWRWYWx1ZX1gO1xuICAgIH1cbiAgICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICAgICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICAgIH1cbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcbiAgICBjb25zdCBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGVsZW0gPT4gdHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKTtcbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gaXNCb29sZWFuKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5zb21lKGVsZW0gPT4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbicpO1xufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSAnXycgfHwga2V5ID09PSAnJHN0YWJsZSc7XG5jb25zdCBub3JtYWxpemVTbG90VmFsdWUgPSAodmFsdWUpID0+IGlzQXJyYXkodmFsdWUpXG4gICAgPyB2YWx1ZS5tYXAobm9ybWFsaXplVk5vZGUpXG4gICAgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcbmNvbnN0IG5vcm1hbGl6ZVNsb3QgPSAoa2V5LCByYXdTbG90LCBjdHgpID0+IHtcbiAgICBpZiAocmF3U2xvdC5fbikge1xuICAgICAgICAvLyBhbHJlYWR5IG5vcm1hbGl6ZWQgLSAjNTM1M1xuICAgICAgICByZXR1cm4gcmF3U2xvdDtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHdpdGhDdHgoKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHdhcm4oYFNsb3QgXCIke2tleX1cIiBpbnZva2VkIG91dHNpZGUgb2YgdGhlIHJlbmRlciBmdW5jdGlvbjogYCArXG4gICAgICAgICAgICAgICAgYHRoaXMgd2lsbCBub3QgdHJhY2sgZGVwZW5kZW5jaWVzIHVzZWQgaW4gdGhlIHNsb3QuIGAgK1xuICAgICAgICAgICAgICAgIGBJbnZva2UgdGhlIHNsb3QgZnVuY3Rpb24gaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybWFsaXplU2xvdFZhbHVlKHJhd1Nsb3QoLi4uYXJncykpO1xuICAgIH0sIGN0eCk7XG4gICAgbm9ybWFsaXplZC5fYyA9IGZhbHNlO1xuICAgIHJldHVybiBub3JtYWxpemVkO1xufTtcbmNvbnN0IG5vcm1hbGl6ZU9iamVjdFNsb3RzID0gKHJhd1Nsb3RzLCBzbG90cywgaW5zdGFuY2UpID0+IHtcbiAgICBjb25zdCBjdHggPSByYXdTbG90cy5fY3R4O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Nsb3RzKSB7XG4gICAgICAgIGlmIChpc0ludGVybmFsS2V5KGtleSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdTbG90c1trZXldO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICEoZmFsc2UgKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3Igc2xvdCBcIiR7a2V5fVwiLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICBzbG90c1trZXldID0gKCkgPT4gbm9ybWFsaXplZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBub3JtYWxpemVWTm9kZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgIWlzS2VlcEFsaXZlKGluc3RhbmNlLnZub2RlKSAmJlxuICAgICAgICAhKGZhbHNlICkpIHtcbiAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBkZWZhdWx0IHNsb3QuIGAgK1xuICAgICAgICAgICAgYFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmApO1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcbiAgICBpbnN0YW5jZS5zbG90cy5kZWZhdWx0ID0gKCkgPT4gbm9ybWFsaXplZDtcbn07XG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XG4gICAgaWYgKGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAvLyB1c2VycyBjYW4gZ2V0IHRoZSBzaGFsbG93IHJlYWRvbmx5IHZlcnNpb24gb2YgdGhlIHNsb3RzIG9iamVjdCB0aHJvdWdoIGB0aGlzLiRzbG90c2AsXG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgYXZvaWQgdGhlIHByb3h5IG9iamVjdCBwb2xsdXRpbmcgdGhlIHNsb3RzIG9mIHRoZSBpbnRlcm5hbCBpbnN0YW5jZVxuICAgICAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB0b1JhdyhjaGlsZHJlbik7XG4gICAgICAgICAgICAvLyBtYWtlIGNvbXBpbGVyIG1hcmtlciBub24tZW51bWVyYWJsZVxuICAgICAgICAgICAgZGVmKGNoaWxkcmVuLCAnXycsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIChpbnN0YW5jZS5zbG90cyA9IHt9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLnNsb3RzID0ge307XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlZihpbnN0YW5jZS5zbG90cywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xufTtcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xuICAgIGxldCBuZWVkRGVsZXRpb25DaGVjayA9IHRydWU7XG4gICAgbGV0IGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IEVNUFRZX09CSjtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLykge1xuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIGNvbXBpbGVkIHNsb3RzLlxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gUGFyZW50IHdhcyBITVIgdXBkYXRlZCBzbyBzbG90IGNvbnRlbnQgbWF5IGhhdmUgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICAvLyBmb3JjZSB1cGRhdGUgc2xvdHMgYW5kIG1hcmsgaW5zdGFuY2UgZm9yIGhtciBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpbWl6ZWQgJiYgdHlwZSA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovKSB7XG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgQU5EIHN0YWJsZS5cbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSwgYW5kIHNraXAgc3RhbGUgc2xvdHMgcmVtb3ZhbC5cbiAgICAgICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgYnV0IGR5bmFtaWMgKHYtaWYvdi1mb3Igb24gc2xvdHMpIC0gdXBkYXRlIHNsb3RzLCBidXQgc2tpcFxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6YXRpb24uXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgLy8gIzI4OTNcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlbmRlcmluZyB0aGUgb3B0aW1pemVkIHNsb3RzIGJ5IG1hbnVhbGx5IHdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZGVsZXRlIHRoZSBgc2xvdHMuX2AgZmxhZyBpZiBuZWNlc3NhcnkgdG8gbWFrZSBzdWJzZXF1ZW50IHVwZGF0ZXMgcmVsaWFibGUsXG4gICAgICAgICAgICAgICAgLy8gaS5lLiBsZXQgdGhlIGByZW5kZXJTbG90YCBjcmVhdGUgdGhlIGJhaWxlZCBGcmFnbWVudFxuICAgICAgICAgICAgICAgIGlmICghb3B0aW1pemVkICYmIHR5cGUgPT09IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqLykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHMuXztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9ICFjaGlsZHJlbi4kc3RhYmxlO1xuICAgICAgICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIHNsb3RzKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgLy8gbm9uIHNsb3Qgb2JqZWN0IGNoaWxkcmVuIChkaXJlY3QgdmFsdWUpIHBhc3NlZCB0byBhIGNvbXBvbmVudFxuICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xuICAgIH1cbiAgICAvLyBkZWxldGUgc3RhbGUgc2xvdHNcbiAgICBpZiAobmVlZERlbGV0aW9uQ2hlY2spIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbEtleShrZXkpICYmICEoa2V5IGluIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwcENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBwOiBudWxsLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGlzTmF0aXZlVGFnOiBOTyxcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcbiAgICAgICAgICAgIGdsb2JhbFByb3BlcnRpZXM6IHt9LFxuICAgICAgICAgICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiB7fSxcbiAgICAgICAgICAgIGVycm9ySGFuZGxlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgd2FybkhhbmRsZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uczoge31cbiAgICAgICAgfSxcbiAgICAgICAgbWl4aW5zOiBbXSxcbiAgICAgICAgY29tcG9uZW50czoge30sXG4gICAgICAgIGRpcmVjdGl2ZXM6IHt9LFxuICAgICAgICBwcm92aWRlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgICAgb3B0aW9uc0NhY2hlOiBuZXcgV2Vha01hcCgpLFxuICAgICAgICBwcm9wc0NhY2hlOiBuZXcgV2Vha01hcCgpLFxuICAgICAgICBlbWl0c0NhY2hlOiBuZXcgV2Vha01hcCgpXG4gICAgfTtcbn1cbmxldCB1aWQkMSA9IDA7XG5mdW5jdGlvbiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUFwcChyb290Q29tcG9uZW50LCByb290UHJvcHMgPSBudWxsKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihyb290Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgcm9vdENvbXBvbmVudCA9IE9iamVjdC5hc3NpZ24oe30sIHJvb3RDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHJvb3QgcHJvcHMgcGFzc2VkIHRvIGFwcC5tb3VudCgpIG11c3QgYmUgYW4gb2JqZWN0LmApO1xuICAgICAgICAgICAgcm9vdFByb3BzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGFwcCA9IChjb250ZXh0LmFwcCA9IHtcbiAgICAgICAgICAgIF91aWQ6IHVpZCQxKyssXG4gICAgICAgICAgICBfY29tcG9uZW50OiByb290Q29tcG9uZW50LFxuICAgICAgICAgICAgX3Byb3BzOiByb290UHJvcHMsXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxuICAgICAgICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICBfaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgZ2V0IGNvbmZpZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jb25maWc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0IGNvbmZpZyh2KSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1c2UocGx1Z2luLCAuLi5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaGFzKHBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYFBsdWdpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGx1Z2luICYmIGlzRnVuY3Rpb24ocGx1Z2luLmluc3RhbGwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocGx1Z2luKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW4oYXBwLCAuLi5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEEgcGx1Z2luIG11c3QgZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IHdpdGggYW4gXCJpbnN0YWxsXCIgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgZnVuY3Rpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWl4aW4obWl4aW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRleHQubWl4aW5zLmluY2x1ZGVzKG1peGluKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtaXhpbi5uYW1lID8gYDogJHttaXhpbi5uYW1lfWAgOiAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbnMgYXJlIG9ubHkgYXZhaWxhYmxlIGluIGJ1aWxkcyBzdXBwb3J0aW5nIE9wdGlvbnMgQVBJJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbnRleHQuY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYERpcmVjdGl2ZSBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW91bnQocm9vdENvbnRhaW5lciwgaXNIeWRyYXRlLCBpc1NWRykge1xuICAgICAgICAgICAgICAgIGlmICghaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICM1NTcxXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgVGhlcmUgaXMgYWxyZWFkeSBhbiBhcHAgaW5zdGFuY2UgbW91bnRlZCBvbiB0aGUgaG9zdCBjb250YWluZXIuXFxuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCBJZiB5b3Ugd2FudCB0byBtb3VudCBhbm90aGVyIGFwcCBvbiB0aGUgc2FtZSBob3N0IGNvbnRhaW5lcixgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIHlvdSBuZWVkIHRvIHVubW91bnQgdGhlIHByZXZpb3VzIGFwcCBieSBjYWxsaW5nIFxcYGFwcC51bm1vdW50KClcXGAgZmlyc3QuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShyb290Q29tcG9uZW50LCByb290UHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBhcHAgY29udGV4dCBvbiB0aGUgcm9vdCBWTm9kZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGJlIHNldCBvbiB0aGUgcm9vdCBpbnN0YW5jZSBvbiBpbml0aWFsIG1vdW50LlxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5hcHBDb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgLy8gSE1SIHJvb3QgcmVsb2FkXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVsb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcihjbG9uZVZOb2RlKHZub2RlKSwgcm9vdENvbnRhaW5lciwgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIeWRyYXRlICYmIGh5ZHJhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGUodm5vZGUsIHJvb3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKHZub2RlLCByb290Q29udGFpbmVyLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXBwLl9jb250YWluZXIgPSByb290Q29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fID0gYXBwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRFeHBvc2VQcm94eSh2bm9kZS5jb21wb25lbnQpIHx8IHZub2RlLmNvbXBvbmVudC5wcm94eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEFwcCBoYXMgYWxyZWFkeSBiZWVuIG1vdW50ZWQuXFxuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IHdhbnQgdG8gcmVtb3VudCB0aGUgc2FtZSBhcHAsIG1vdmUgeW91ciBhcHAgY3JlYXRpb24gbG9naWMgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgaW50byBhIGZhY3RvcnkgZnVuY3Rpb24gYW5kIGNyZWF0ZSBmcmVzaCBhcHAgaW5zdGFuY2VzIGZvciBlYWNoIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYG1vdW50IC0gZS5nLiBcXGBjb25zdCBjcmVhdGVNeUFwcCA9ICgpID0+IGNyZWF0ZUFwcChBcHApXFxgYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVubW91bnQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXIobnVsbCwgYXBwLl9jb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc1VubW91bnRBcHAoYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXBwLl9jb250YWluZXIuX192dWVfYXBwX187XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDYW5ub3QgdW5tb3VudCBhbiBhcHAgdGhhdCBpcyBub3QgbW91bnRlZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgaW4gY29udGV4dC5wcm92aWRlcykge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgYWxyZWFkeSBwcm92aWRlcyBwcm9wZXJ0eSB3aXRoIGtleSBcIiR7U3RyaW5nKGtleSl9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYEl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgbmV3IHZhbHVlLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LnByb3ZpZGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFwcDtcbiAgICB9O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGZvciBoYW5kbGluZyBhIHRlbXBsYXRlIHJlZlxuICovXG5mdW5jdGlvbiBzZXRSZWYocmF3UmVmLCBvbGRSYXdSZWYsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSwgaXNVbm1vdW50ID0gZmFsc2UpIHtcbiAgICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XG4gICAgICAgIHJhd1JlZi5mb3JFYWNoKChyLCBpKSA9PiBzZXRSZWYociwgb2xkUmF3UmVmICYmIChpc0FycmF5KG9sZFJhd1JlZikgPyBvbGRSYXdSZWZbaV0gOiBvbGRSYXdSZWYpLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0FzeW5jV3JhcHBlcih2bm9kZSkgJiYgIWlzVW5tb3VudCkge1xuICAgICAgICAvLyB3aGVuIG1vdW50aW5nIGFzeW5jIGNvbXBvbmVudHMsIG5vdGhpbmcgbmVlZHMgdG8gYmUgZG9uZSxcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgdGVtcGxhdGUgcmVmIGlzIGZvcndhcmRlZCB0byBpbm5lciBjb21wb25lbnRcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZWZWYWx1ZSA9IHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU2hhcGVGbGFncy5TVEFURUZVTF9DT01QT05FTlQgKi9cbiAgICAgICAgPyBnZXRFeHBvc2VQcm94eSh2bm9kZS5jb21wb25lbnQpIHx8IHZub2RlLmNvbXBvbmVudC5wcm94eVxuICAgICAgICA6IHZub2RlLmVsO1xuICAgIGNvbnN0IHZhbHVlID0gaXNVbm1vdW50ID8gbnVsbCA6IHJlZlZhbHVlO1xuICAgIGNvbnN0IHsgaTogb3duZXIsIHI6IHJlZiB9ID0gcmF3UmVmO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIW93bmVyKSB7XG4gICAgICAgIHdhcm4oYE1pc3NpbmcgcmVmIG93bmVyIGNvbnRleHQuIHJlZiBjYW5ub3QgYmUgdXNlZCBvbiBob2lzdGVkIHZub2Rlcy4gYCArXG4gICAgICAgICAgICBgQSB2bm9kZSB3aXRoIHJlZiBtdXN0IGJlIGNyZWF0ZWQgaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24uYCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb2xkUmVmID0gb2xkUmF3UmVmICYmIG9sZFJhd1JlZi5yO1xuICAgIGNvbnN0IHJlZnMgPSBvd25lci5yZWZzID09PSBFTVBUWV9PQkogPyAob3duZXIucmVmcyA9IHt9KSA6IG93bmVyLnJlZnM7XG4gICAgY29uc3Qgc2V0dXBTdGF0ZSA9IG93bmVyLnNldHVwU3RhdGU7XG4gICAgLy8gZHluYW1pYyByZWYgY2hhbmdlZC4gdW5zZXQgb2xkIHJlZlxuICAgIGlmIChvbGRSZWYgIT0gbnVsbCAmJiBvbGRSZWYgIT09IHJlZikge1xuICAgICAgICBpZiAoaXNTdHJpbmcob2xkUmVmKSkge1xuICAgICAgICAgICAgcmVmc1tvbGRSZWZdID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgb2xkUmVmKSkge1xuICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbb2xkUmVmXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNSZWYob2xkUmVmKSkge1xuICAgICAgICAgICAgb2xkUmVmLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZWYpKSB7XG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhyZWYsIG93bmVyLCAxMiAvKiBFcnJvckNvZGVzLkZVTkNUSU9OX1JFRiAqLywgW3ZhbHVlLCByZWZzXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBfaXNTdHJpbmcgPSBpc1N0cmluZyhyZWYpO1xuICAgICAgICBjb25zdCBfaXNSZWYgPSBpc1JlZihyZWYpO1xuICAgICAgICBpZiAoX2lzU3RyaW5nIHx8IF9pc1JlZikge1xuICAgICAgICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJhd1JlZi5mKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gX2lzU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGhhc093bihzZXR1cFN0YXRlLCByZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXR1cFN0YXRlW3JlZl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJlZnNbcmVmXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWYudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1VubW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXkoZXhpc3RpbmcpICYmIHJlbW92ZShleGlzdGluZywgcmVmVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGV4aXN0aW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyZWZdID0gW3JlZlZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihzZXR1cFN0YXRlLCByZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSByZWZzW3JlZl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZi52YWx1ZSA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnNbcmF3UmVmLmtdID0gcmVmLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFleGlzdGluZy5pbmNsdWRlcyhyZWZWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5wdXNoKHJlZlZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfaXNTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmc1tyZWZdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX2lzUmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmspXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZzW3Jhd1JlZi5rXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTonLCByZWYsIGAoJHt0eXBlb2YgcmVmfSlgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZG9TZXQuaWQgPSAtMTtcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZG9TZXQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvU2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKCdJbnZhbGlkIHRlbXBsYXRlIHJlZiB0eXBlOicsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5sZXQgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gL3N2Zy8udGVzdChjb250YWluZXIubmFtZXNwYWNlVVJJKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xuY29uc3QgaXNDb21tZW50ID0gKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDggLyogRE9NTm9kZVR5cGVzLkNPTU1FTlQgKi87XG4vLyBOb3RlOiBoeWRyYXRpb24gaXMgRE9NLXNwZWNpZmljXG4vLyBCdXQgd2UgaGF2ZSB0byBwbGFjZSBpdCBpbiBjb3JlIGR1ZSB0byB0aWdodCBjb3VwbGluZyB3aXRoIGNvcmUgLSBzcGxpdHRpbmdcbi8vIGl0IG91dCBjcmVhdGVzIGEgdG9uIG9mIHVubmVjZXNzYXJ5IGNvbXBsZXhpdHkuXG4vLyBIeWRyYXRpb24gYWxzbyBkZXBlbmRzIG9uIHNvbWUgcmVuZGVyZXIgaW50ZXJuYWwgbG9naWMgd2hpY2ggbmVlZHMgdG8gYmVcbi8vIHBhc3NlZCBpbiB2aWEgYXJndW1lbnRzLlxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gICAgY29uc3QgeyBtdDogbW91bnRDb21wb25lbnQsIHA6IHBhdGNoLCBvOiB7IHBhdGNoUHJvcCwgY3JlYXRlVGV4dCwgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHJlbW92ZSwgaW5zZXJ0LCBjcmVhdGVDb21tZW50IH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICAgIGNvbnN0IGh5ZHJhdGUgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xuICAgICAgICBpZiAoIWNvbnRhaW5lci5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEF0dGVtcHRpbmcgdG8gaHlkcmF0ZSBleGlzdGluZyBtYXJrdXAgYnV0IGNvbnRhaW5lciBpcyBlbXB0eS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBQZXJmb3JtaW5nIGZ1bGwgbW91bnQgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIpO1xuICAgICAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYXNNaXNtYXRjaCA9IGZhbHNlO1xuICAgICAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xuICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgICAgIGlmIChoYXNNaXNtYXRjaCAmJiAhZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgZXJyb3Igc2hvdWxkIHNob3cgdXAgaW4gcHJvZHVjdGlvblxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5gKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaHlkcmF0ZU5vZGUgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgaXNGcmFnbWVudFN0YXJ0ID0gaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snO1xuICAgICAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2gobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudFN0YXJ0KTtcbiAgICAgICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZywgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcbiAgICAgICAgbGV0IGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICB2bm9kZS5lbCA9IG5vZGU7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgPT09IC0yIC8qIFBhdGNoRmxhZ3MuQkFJTCAqLykge1xuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXh0Tm9kZSA9IG51bGw7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUZXh0OlxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAzIC8qIERPTU5vZGVUeXBlcy5URVhUICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICM1NzI4IGVtcHR5IHRleHQgbm9kZSBpbnNpZGUgYSBzbG90IGNhbiBjYXVzZSBoeWRyYXRpb24gZmFpbHVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBzZXJ2ZXIgcmVuZGVyZWQgSFRNTCB3b24ndCBjb250YWluIGEgdGV4dCBub2RlXG4gICAgICAgICAgICAgICAgICAgIGlmICh2bm9kZS5jaGlsZHJlbiA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCgodm5vZGUuZWwgPSBjcmVhdGVUZXh0KCcnKSksIHBhcmVudE5vZGUobm9kZSksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgIT09IHZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gdGV4dCBtaXNtYXRjaDpgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbi0gQ2xpZW50OiAke0pTT04uc3RyaW5naWZ5KG5vZGUuZGF0YSl9YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIFNlcnZlcjogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudDpcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCAvKiBET01Ob2RlVHlwZXMuQ09NTUVOVCAqLyB8fCBpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxuICAgICAgICAgICAgICAgIGlmIChpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW50aXJlIHRlbXBsYXRlIGlzIHN0YXRpYyBidXQgU1NSZWQgYXMgYSBmcmFnbWVudFxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSA9PT0gMSAvKiBET01Ob2RlVHlwZXMuRUxFTUVOVCAqLyB8fCBkb21UeXBlID09PSAzIC8qIERPTU5vZGVUeXBlcy5URVhUICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBhbmNob3IsIGFkb3B0IGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3RhdGljIHZub2RlIGhhcyBpdHMgY29udGVudCBzdHJpcHBlZCBkdXJpbmcgYnVpbGQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkb3B0IGl0IGZyb20gdGhlIHNlcnZlci1yZW5kZXJlZCBIVE1MLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWVkVG9BZG9wdENvbnRlbnQgPSAhdm5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkVG9BZG9wdENvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuY2hpbGRyZW4gKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUubm9kZVR5cGUgPT09IDEgLyogRE9NTm9kZVR5cGVzLkVMRU1FTlQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbmV4dE5vZGUub3V0ZXJIVE1MXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5leHROb2RlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdm5vZGUuc3RhdGljQ291bnQgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNGcmFnbWVudFN0YXJ0ID8gbmV4dFNpYmxpbmcobmV4dE5vZGUpIDogbmV4dE5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGcmFnbWVudDpcbiAgICAgICAgICAgICAgICBpZiAoIWlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUZyYWdtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDEgLyogRE9NTm9kZVR5cGVzLkVMRU1FTlQgKi8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLnR5cGUudG9Mb3dlckNhc2UoKSAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHNldHRpbmcgdXAgdGhlIHJlbmRlciBlZmZlY3QsIGlmIHRoZSBpbml0aWFsIHZub2RlIGFscmVhZHlcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzIC5lbCBzZXQsIHRoZSBjb21wb25lbnQgd2lsbCBwZXJmb3JtIGh5ZHJhdGlvbiBpbnN0ZWFkIG9mIG1vdW50XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIGl0cyBzdWItdHJlZS5cbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBtb3VudENvbXBvbmVudCh2bm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGJlIGFzeW5jLCBzbyBpbiB0aGUgY2FzZSBvZiBmcmFnbWVudHMgd2UgY2Fubm90IHJlbHlcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gY29tcG9uZW50J3MgcmVuZGVyZWQgb3V0cHV0IHRvIGRldGVybWluZSB0aGUgZW5kIG9mIHRoZSBmcmFnbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBpbnN0ZWFkLCB3ZSBkbyBhIGxvb2thaGVhZCB0byBmaW5kIHRoZSBlbmQgYW5jaG9yIG5vZGUuXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaXNGcmFnbWVudFN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvcihub2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gIzQyOTMgdGVsZXBvcnQgYXMgY29tcG9uZW50IHJvb3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NvbW1lbnQobmV4dE5vZGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZS5kYXRhID09PSAndGVsZXBvcnQgZW5kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gIzM3ODdcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgY29tcG9uZW50IGlzIGFzeW5jLCBpdCBtYXkgZ2V0IG1vdmVkIC8gdW5tb3VudGVkIGJlZm9yZSBpdHNcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5uZXIgY29tcG9uZW50IGlzIGxvYWRlZCwgc28gd2UgbmVlZCB0byBnaXZlIGl0IGEgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgdGhhdCBtYXRjaGVzIGl0cyBhZG9wdGVkIERPTS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN1YlRyZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKEZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlLmFuY2hvciA9IG5leHROb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbmV4dE5vZGUucHJldmlvdXNTaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY29udGFpbmVyLmxhc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm5vZGVUeXBlID09PSAzID8gY3JlYXRlVGV4dFZOb2RlKCcnKSA6IGNyZWF0ZVZOb2RlKCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWUuZWwgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50LnN1YlRyZWUgPSBzdWJUcmVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogRE9NTm9kZVR5cGVzLkNPTU1FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZUNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIocGFyZW50Tm9kZShub2RlKSksIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBIb3N0Vk5vZGUgdHlwZTonLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG51bGwsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHROb2RlO1xuICAgIH07XG4gICAgY29uc3QgaHlkcmF0ZUVsZW1lbnQgPSAoZWwsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISF2bm9kZS5keW5hbWljQ2hpbGRyZW47XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHBhdGNoRmxhZywgc2hhcGVGbGFnLCBkaXJzIH0gPSB2bm9kZTtcbiAgICAgICAgLy8gIzQwMDYgZm9yIGZvcm0gZWxlbWVudHMgd2l0aCBub24tc3RyaW5nIHYtbW9kZWwgdmFsdWUgYmluZGluZ3NcbiAgICAgICAgLy8gZS5nLiA8b3B0aW9uIDp2YWx1ZT1cIm9ialwiPiwgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIDp0cnVlLXZhbHVlPVwiMVwiPlxuICAgICAgICBjb25zdCBmb3JjZVBhdGNoVmFsdWUgPSAodHlwZSA9PT0gJ2lucHV0JyAmJiBkaXJzKSB8fCB0eXBlID09PSAnb3B0aW9uJztcbiAgICAgICAgLy8gc2tpcCBwcm9wcyAmIGNoaWxkcmVuIGlmIHRoaXMgaXMgaG9pc3RlZCBzdGF0aWMgbm9kZXNcbiAgICAgICAgLy8gIzU0MDUgaW4gZGV2LCBhbHdheXMgaHlkcmF0ZSBjaGlsZHJlbiBmb3IgSE1SXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgZm9yY2VQYXRjaFZhbHVlIHx8IHBhdGNoRmxhZyAhPT0gLTEgLyogUGF0Y2hGbGFncy5IT0lTVEVEICovKSB7XG4gICAgICAgICAgICBpZiAoZGlycykge1xuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHByb3BzXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2VQYXRjaFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgICAgICFvcHRpbWl6ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgKDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLyB8IDMyIC8qIFBhdGNoRmxhZ3MuSFlEUkFURV9FVkVOVFMgKi8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGZvcmNlUGF0Y2hWYWx1ZSAmJiBrZXkuZW5kc1dpdGgoJ3ZhbHVlJykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlzT24oa2V5KSAmJiAhaXNSZXNlcnZlZFByb3Aoa2V5KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgZmFsc2UsIHVuZGVmaW5lZCwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgY2xpY2sgbGlzdGVuZXJzICh3aGljaCBpcyBtb3N0IG9mdGVuKSB0byBhdm9pZFxuICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRpbmcgdGhyb3VnaCBwcm9wcy5cbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hQcm9wKGVsLCAnb25DbGljaycsIG51bGwsIHByb3BzLm9uQ2xpY2ssIGZhbHNlLCB1bmRlZmluZWQsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdm5vZGUgLyBkaXJlY3RpdmUgaG9va3NcbiAgICAgICAgICAgIGxldCB2bm9kZUhvb2tzO1xuICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xuICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2tzLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fCBkaXJzKSB7XG4gICAgICAgICAgICAgICAgcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2bm9kZUhvb2tzICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2tzLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XG4gICAgICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hpbGRyZW5cbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovICYmXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpZiBlbGVtZW50IGhhcyBpbm5lckhUTUwgLyB0ZXh0Q29udGVudFxuICAgICAgICAgICAgICAgICEocHJvcHMgJiYgKHByb3BzLmlubmVySFRNTCB8fCBwcm9wcy50ZXh0Q29udGVudCkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4oZWwuZmlyc3RDaGlsZCwgdm5vZGUsIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggaW4gPCR7dm5vZGUudHlwZX0+OiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgbW9yZSBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgU1NSZWQgRE9NIGNvbnRhaW5zIG1vcmUgbm9kZXMgdGhhbiBpdCBzaG91bGQuIFJlbW92ZSB0aGVtLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKGN1cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQgIT09IHZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gdGV4dCBjb250ZW50IG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjpcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBDbGllbnQ6ICR7ZWwudGV4dENvbnRlbnR9XFxuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYC0gU2VydmVyOiAke3Zub2RlLmNoaWxkcmVufWApO1xuICAgICAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XG4gICAgfTtcbiAgICBjb25zdCBoeWRyYXRlQ2hpbGRyZW4gPSAobm9kZSwgcGFyZW50Vk5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhcGFyZW50Vk5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudFZOb2RlLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBsID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2bm9kZSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5baV1cbiAgICAgICAgICAgICAgICA6IChjaGlsZHJlbltpXSA9IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XG4gICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBoeWRyYXRlTm9kZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodm5vZGUudHlwZSA9PT0gVGV4dCAmJiAhdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXNXYXJuZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke2NvbnRhaW5lci50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PjogYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgZmV3ZXIgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhlIFNTUmVkIERPTSBkaWRuJ3QgY29udGFpbiBlbm91Z2ggbm9kZXMuIE1vdW50IHRoZSBtaXNzaW5nIG9uZXMuXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIGNvbnN0IGh5ZHJhdGVGcmFnbWVudCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgeyBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSB2bm9kZTtcbiAgICAgICAgaWYgKGZyYWdtZW50U2xvdFNjb3BlSWRzKSB7XG4gICAgICAgICAgICBzbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHNcbiAgICAgICAgICAgICAgICA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpXG4gICAgICAgICAgICAgICAgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xuICAgICAgICBjb25zdCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKG5leHRTaWJsaW5nKG5vZGUpLCB2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIGlmIChuZXh0ICYmIGlzQ29tbWVudChuZXh0KSAmJiBuZXh0LmRhdGEgPT09ICddJykge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKCh2bm9kZS5hbmNob3IgPSBuZXh0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBmcmFnbWVudCBkaWRuJ3QgaHlkcmF0ZSBzdWNjZXNzZnVsbHksIHNpbmNlIHdlIGRpZG4ndCBnZXQgYSBlbmQgYW5jaG9yXG4gICAgICAgICAgICAvLyBiYWNrLiBUaGlzIHNob3VsZCBoYXZlIGxlZCB0byBub2RlL2NoaWxkcmVuIG1pc21hdGNoIHdhcm5pbmdzLlxuICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGFuY2hvciBpcyBtaXNzaW5nLCB3ZSBuZWVkIHRvIGNyZWF0ZSBvbmUgYW5kIGluc2VydCBpdFxuICAgICAgICAgICAgaW5zZXJ0KCh2bm9kZS5hbmNob3IgPSBjcmVhdGVDb21tZW50KGBdYCkpLCBjb250YWluZXIsIG5leHQpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1pc21hdGNoID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIGlzRnJhZ21lbnQpID0+IHtcbiAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBub2RlIG1pc21hdGNoOlxcbi0gQ2xpZW50IHZub2RlOmAsIHZub2RlLnR5cGUsIGBcXG4tIFNlcnZlciByZW5kZXJlZCBET006YCwgbm9kZSwgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBET01Ob2RlVHlwZXMuVEVYVCAqL1xuICAgICAgICAgICAgICAgID8gYCh0ZXh0KWBcbiAgICAgICAgICAgICAgICA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJ1xuICAgICAgICAgICAgICAgICAgICA/IGAoc3RhcnQgb2YgZnJhZ21lbnQpYFxuICAgICAgICAgICAgICAgICAgICA6IGBgKTtcbiAgICAgICAgdm5vZGUuZWwgPSBudWxsO1xuICAgICAgICBpZiAoaXNGcmFnbWVudCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4Y2Vzc2l2ZSBmcmFnbWVudCBub2Rlc1xuICAgICAgICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgICAgIHJlbW92ZShub2RlKTtcbiAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbmV4dCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgICBjb25zdCBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3IgPSAobm9kZSkgPT4ge1xuICAgICAgICBsZXQgbWF0Y2ggPSAwO1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgaWYgKG5vZGUgJiYgaXNDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gJ1snKVxuICAgICAgICAgICAgICAgICAgICBtYXRjaCsrO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICddJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfTtcbiAgICByZXR1cm4gW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG5sZXQgc3VwcG9ydGVkO1xubGV0IHBlcmY7XG5mdW5jdGlvbiBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcbiAgICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICBwZXJmLm1hcmsoYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWApO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBkZXZ0b29sc1BlcmZTdGFydChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbmRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRUYWcgPSBgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YDtcbiAgICAgICAgY29uc3QgZW5kVGFnID0gc3RhcnRUYWcgKyBgOmVuZGA7XG4gICAgICAgIHBlcmYubWFyayhlbmRUYWcpO1xuICAgICAgICBwZXJmLm1lYXN1cmUoYDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfT4gJHt0eXBlfWAsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNQZXJmRW5kKGluc3RhbmNlLCB0eXBlLCBpc1N1cHBvcnRlZCgpID8gcGVyZi5ub3coKSA6IERhdGUubm93KCkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgIGlmIChzdXBwb3J0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgICAgIHN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIHBlcmYgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIG9ubHkgY2FsbGVkIGluIGVzbS1idW5kbGVyIGJ1aWxkcy5cbiAqIEl0IGlzIGNhbGxlZCB3aGVuIGEgcmVuZGVyZXIgaXMgY3JlYXRlZCwgaW4gYGJhc2VDcmVhdGVSZW5kZXJlcmAgc28gdGhhdFxuICogaW1wb3J0aW5nIHJ1bnRpbWUtY29yZSBpcyBzaWRlLWVmZmVjdHMgZnJlZS5cbiAqXG4gKiBpc3RhbmJ1bC1pZ25vcmUtbmV4dFxuICovXG5mdW5jdGlvbiBpbml0RmVhdHVyZUZsYWdzKCkge1xuICAgIGNvbnN0IG5lZWRXYXJuID0gW107XG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9PUFRJT05TX0FQSV9fICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuLnB1c2goYF9fVlVFX09QVElPTlNfQVBJX19gKTtcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX09QVElPTlNfQVBJX18gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIF9fVlVFX1BST0RfREVWVE9PTFNfXyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9QUk9EX0RFVlRPT0xTX19gKTtcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX1BST0RfREVWVE9PTFNfXyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBtdWx0aSA9IG5lZWRXYXJuLmxlbmd0aCA+IDE7XG4gICAgICAgIGNvbnNvbGUud2FybihgRmVhdHVyZSBmbGFnJHttdWx0aSA/IGBzYCA6IGBgfSAke25lZWRXYXJuLmpvaW4oJywgJyl9ICR7bXVsdGkgPyBgYXJlYCA6IGBpc2B9IG5vdCBleHBsaWNpdGx5IGRlZmluZWQuIFlvdSBhcmUgcnVubmluZyB0aGUgZXNtLWJ1bmRsZXIgYnVpbGQgb2YgVnVlLCBgICtcbiAgICAgICAgICAgIGB3aGljaCBleHBlY3RzIHRoZXNlIGNvbXBpbGUtdGltZSBmZWF0dXJlIGZsYWdzIHRvIGJlIGdsb2JhbGx5IGluamVjdGVkIGAgK1xuICAgICAgICAgICAgYHZpYSB0aGUgYnVuZGxlciBjb25maWcgaW4gb3JkZXIgdG8gZ2V0IGJldHRlciB0cmVlLXNoYWtpbmcgaW4gdGhlIGAgK1xuICAgICAgICAgICAgYHByb2R1Y3Rpb24gYnVuZGxlLlxcblxcbmAgK1xuICAgICAgICAgICAgYEZvciBtb3JlIGRldGFpbHMsIHNlZSBodHRwczovL2xpbmsudnVlanMub3JnL2ZlYXR1cmUtZmxhZ3MuYCk7XG4gICAgfVxufVxuXG5jb25zdCBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QgPSBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZVxuICAgIDtcbi8qKlxuICogVGhlIGNyZWF0ZVJlbmRlcmVyIGZ1bmN0aW9uIGFjY2VwdHMgdHdvIGdlbmVyaWMgYXJndW1lbnRzOlxuICogSG9zdE5vZGUgYW5kIEhvc3RFbGVtZW50LCBjb3JyZXNwb25kaW5nIHRvIE5vZGUgYW5kIEVsZW1lbnQgdHlwZXMgaW4gdGhlXG4gKiBob3N0IGVudmlyb25tZW50LiBGb3IgZXhhbXBsZSwgZm9yIHJ1bnRpbWUtZG9tLCBIb3N0Tm9kZSB3b3VsZCBiZSB0aGUgRE9NXG4gKiBgTm9kZWAgaW50ZXJmYWNlIGFuZCBIb3N0RWxlbWVudCB3b3VsZCBiZSB0aGUgRE9NIGBFbGVtZW50YCBpbnRlcmZhY2UuXG4gKlxuICogQ3VzdG9tIHJlbmRlcmVycyBjYW4gcGFzcyBpbiB0aGUgcGxhdGZvcm0gc3BlY2lmaWMgdHlwZXMgbGlrZSB0aGlzOlxuICpcbiAqIGBgYCBqc1xuICogY29uc3QgeyByZW5kZXIsIGNyZWF0ZUFwcCB9ID0gY3JlYXRlUmVuZGVyZXI8Tm9kZSwgRWxlbWVudD4oe1xuICogICBwYXRjaFByb3AsXG4gKiAgIC4uLm5vZGVPcHNcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIob3B0aW9ucykge1xuICAgIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucyk7XG59XG4vLyBTZXBhcmF0ZSBBUEkgZm9yIGNyZWF0aW5nIGh5ZHJhdGlvbi1lbmFibGVkIHJlbmRlcmVyLlxuLy8gSHlkcmF0aW9uIGxvZ2ljIGlzIG9ubHkgdXNlZCB3aGVuIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgbWFraW5nIGl0XG4vLyB0cmVlLXNoYWthYmxlLlxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIob3B0aW9ucykge1xuICAgIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKTtcbn1cbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRm5zKSB7XG4gICAgLy8gY29tcGlsZS10aW1lIGZlYXR1cmUgZmxhZ3MgY2hlY2tcbiAgICB7XG4gICAgICAgIGluaXRGZWF0dXJlRmxhZ3MoKTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0R2xvYmFsVGhpcygpO1xuICAgIHRhcmdldC5fX1ZVRV9fID0gdHJ1ZTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBzZXREZXZ0b29sc0hvb2sodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18sIHRhcmdldCk7XG4gICAgfVxuICAgIGNvbnN0IHsgaW5zZXJ0OiBob3N0SW5zZXJ0LCByZW1vdmU6IGhvc3RSZW1vdmUsIHBhdGNoUHJvcDogaG9zdFBhdGNoUHJvcCwgY3JlYXRlRWxlbWVudDogaG9zdENyZWF0ZUVsZW1lbnQsIGNyZWF0ZVRleHQ6IGhvc3RDcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50OiBob3N0Q3JlYXRlQ29tbWVudCwgc2V0VGV4dDogaG9zdFNldFRleHQsIHNldEVsZW1lbnRUZXh0OiBob3N0U2V0RWxlbWVudFRleHQsIHBhcmVudE5vZGU6IGhvc3RQYXJlbnROb2RlLCBuZXh0U2libGluZzogaG9zdE5leHRTaWJsaW5nLCBzZXRTY29wZUlkOiBob3N0U2V0U2NvcGVJZCA9IE5PT1AsIGluc2VydFN0YXRpY0NvbnRlbnQ6IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50IH0gPSBvcHRpb25zO1xuICAgIC8vIE5vdGU6IGZ1bmN0aW9ucyBpbnNpZGUgdGhpcyBjbG9zdXJlIHNob3VsZCB1c2UgYGNvbnN0IHh4eCA9ICgpID0+IHt9YFxuICAgIC8vIHN0eWxlIGluIG9yZGVyIHRvIHByZXZlbnQgYmVpbmcgaW5saW5lZCBieSBtaW5pZmllcnMuXG4gICAgY29uc3QgcGF0Y2ggPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciA9IG51bGwsIHBhcmVudENvbXBvbmVudCA9IG51bGwsIHBhcmVudFN1c3BlbnNlID0gbnVsbCwgaXNTVkcgPSBmYWxzZSwgc2xvdFNjb3BlSWRzID0gbnVsbCwgb3B0aW1pemVkID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcgPyBmYWxzZSA6ICEhbjIuZHluYW1pY0NoaWxkcmVuKSA9PiB7XG4gICAgICAgIGlmIChuMSA9PT0gbjIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBwYXRjaGluZyAmIG5vdCBzYW1lIHR5cGUsIHVubW91bnQgb2xkIHRyZWVcbiAgICAgICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICAgICAgYW5jaG9yID0gZ2V0TmV4dEhvc3ROb2RlKG4xKTtcbiAgICAgICAgICAgIHVubW91bnQobjEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgbjEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuMi5wYXRjaEZsYWcgPT09IC0yIC8qIFBhdGNoRmxhZ3MuQkFJTCAqLykge1xuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcgfSA9IG4yO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgICAgICAgICBwcm9jZXNzVGV4dChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudDpcbiAgICAgICAgICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0YXRpYzpcbiAgICAgICAgICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtb3VudFN0YXRpY05vZGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaFN0YXRpY05vZGUobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgICAgICAgICAgIHByb2Nlc3NGcmFnbWVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0VsZW1lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5wcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5wcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVk5vZGUgdHlwZTonLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgcmVmXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCAmJiBwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yIHx8IG4xLCAhbjIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KChuMi5lbCA9IGhvc3RDcmVhdGVUZXh0KG4yLmNoaWxkcmVuKSksIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xuICAgICAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGhvc3RTZXRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHByb2Nlc3NDb21tZW50Tm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KChuMi5lbCA9IGhvc3RDcmVhdGVDb21tZW50KG4yLmNoaWxkcmVuIHx8ICcnKSksIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gc3VwcG9ydCBmb3IgZHluYW1pYyBjb21tZW50c1xuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW91bnRTdGF0aWNOb2RlID0gKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpID0+IHtcbiAgICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQobjIuY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgbjIuZWwsIG4yLmFuY2hvcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXYgLyBITVIgb25seVxuICAgICAqL1xuICAgIGNvbnN0IHBhdGNoU3RhdGljTm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcbiAgICAgICAgLy8gc3RhdGljIG5vZGVzIGFyZSBvbmx5IHBhdGNoZWQgZHVyaW5nIGRldiBmb3IgSE1SXG4gICAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGhvc3ROZXh0U2libGluZyhuMS5hbmNob3IpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nXG4gICAgICAgICAgICByZW1vdmVTdGF0aWNOb2RlKG4xKTtcbiAgICAgICAgICAgIFtuMi5lbCwgbjIuYW5jaG9yXSA9IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50KG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgICAgICAgIG4yLmFuY2hvciA9IG4xLmFuY2hvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0sIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpID0+IHtcbiAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgZWwgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGhvc3RJbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIG5leHRTaWJsaW5nKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcbiAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoZWwpO1xuICAgICAgICAgICAgZWwgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgICB9O1xuICAgIGNvbnN0IHByb2Nlc3NFbGVtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IG4yLnR5cGUgPT09ICdzdmcnO1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgbW91bnRFbGVtZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGNoRWxlbWVudChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdW50RWxlbWVudCA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBsZXQgZWw7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHNoYXBlRmxhZywgdHJhbnNpdGlvbiwgZGlycyB9ID0gdm5vZGU7XG4gICAgICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudCh2bm9kZS50eXBlLCBpc1NWRywgcHJvcHMgJiYgcHJvcHMuaXMsIHByb3BzKTtcbiAgICAgICAgLy8gbW91bnQgY2hpbGRyZW4gZmlyc3QsIHNpbmNlIHNvbWUgcHJvcHMgbWF5IHJlbHkgb24gY2hpbGQgY29udGVudFxuICAgICAgICAvLyBiZWluZyBhbHJlYWR5IHJlbmRlcmVkLCBlLmcuIGA8c2VsZWN0IHZhbHVlPmBcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIHZub2RlLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKHZub2RlLmNoaWxkcmVuLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcgJiYgdHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzY29wZUlkXG4gICAgICAgIHNldFNjb3BlSWQoZWwsIHZub2RlLCB2bm9kZS5zY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgIC8vIHByb3BzXG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAndmFsdWUnICYmICFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BlY2lhbCBjYXNlIGZvciBzZXR0aW5nIHZhbHVlIG9uIERPTSBlbGVtZW50czpcbiAgICAgICAgICAgICAqIC0gaXQgY2FuIGJlIG9yZGVyLXNlbnNpdGl2ZSAoZS5nLiBzaG91bGQgYmUgc2V0ICphZnRlciogbWluL21heCwgIzIzMjUsICM0MDI0KVxuICAgICAgICAgICAgICogLSBpdCBuZWVkcyB0byBiZSBmb3JjZWQgKCMxNDcxKVxuICAgICAgICAgICAgICogIzIzNTMgcHJvcG9zZXMgYWRkaW5nIGFub3RoZXIgcmVuZGVyZXIgb3B0aW9uIHRvIGNvbmZpZ3VyZSB0aGlzLCBidXRcbiAgICAgICAgICAgICAqIHRoZSBwcm9wZXJ0aWVzIGFmZmVjdHMgYXJlIHNvIGZpbml0ZSBpdCBpcyB3b3J0aCBzcGVjaWFsIGNhc2luZyBpdFxuICAgICAgICAgICAgICogaGVyZSB0byByZWR1Y2UgdGhlIGNvbXBsZXhpdHkuIChTcGVjaWFsIGNhc2luZyBpdCBhbHNvIHNob3VsZCBub3RcbiAgICAgICAgICAgICAqIGFmZmVjdCBub24tRE9NIHJlbmRlcmVycylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCd2YWx1ZScgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAndmFsdWUnLCBudWxsLCBwcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192bm9kZScsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdm5vZGUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192dWVQYXJlbnRDb21wb25lbnQnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZU1vdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gIzE1ODMgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIG5vdCByZXNvbHZlZCBjYXNlLCBlbnRlciBob29rIHNob3VsZCBjYWxsIHdoZW4gc3VzcGVuc2UgcmVzb2x2ZWRcbiAgICAgICAgLy8gIzE2ODkgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIHJlc29sdmVkIGNhc2UsIGp1c3QgY2FsbCBpdFxuICAgICAgICBjb25zdCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyA9ICghcGFyZW50U3VzcGVuc2UgfHwgKHBhcmVudFN1c3BlbnNlICYmICFwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSkgJiZcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZDtcbiAgICAgICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8XG4gICAgICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyB8fFxuICAgICAgICAgICAgZGlycykge1xuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFNjb3BlSWQgPSAoZWwsIHZub2RlLCBzY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCkgPT4ge1xuICAgICAgICBpZiAoc2NvcGVJZCkge1xuICAgICAgICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNjb3BlSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbG90U2NvcGVJZHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdFNjb3BlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNsb3RTY29wZUlkc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xuICAgICAgICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICBzdWJUcmVlLnBhdGNoRmxhZyA+IDAgJiZcbiAgICAgICAgICAgICAgICBzdWJUcmVlLnBhdGNoRmxhZyAmIDIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqLykge1xuICAgICAgICAgICAgICAgIHN1YlRyZWUgPVxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTaW5nbGVSb290KHN1YlRyZWUuY2hpbGRyZW4pIHx8IHN1YlRyZWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodm5vZGUgPT09IHN1YlRyZWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRWTm9kZSA9IHBhcmVudENvbXBvbmVudC52bm9kZTtcbiAgICAgICAgICAgICAgICBzZXRTY29wZUlkKGVsLCBwYXJlbnRWTm9kZSwgcGFyZW50Vk5vZGUuc2NvcGVJZCwgcGFyZW50Vk5vZGUuc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IChjaGlsZHJlbltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoY2hpbGRyZW5baV0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSkpO1xuICAgICAgICAgICAgcGF0Y2gobnVsbCwgY2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwYXRjaEVsZW1lbnQgPSAobjEsIG4yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSAobjIuZWwgPSBuMS5lbCk7XG4gICAgICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBkaXJzIH0gPSBuMjtcbiAgICAgICAgLy8gIzE0MjYgdGFrZSB0aGUgb2xkIHZub2RlJ3MgcGF0Y2ggZmxhZyBpbnRvIGFjY291bnQgc2luY2UgdXNlciBtYXkgY2xvbmUgYVxuICAgICAgICAvLyBjb21waWxlci1nZW5lcmF0ZWQgdm5vZGUsIHdoaWNoIGRlLW9wdHMgdG8gRlVMTF9QUk9QU1xuICAgICAgICBwYXRjaEZsYWcgfD0gbjEucGF0Y2hGbGFnICYgMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovO1xuICAgICAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICAgICAgY29uc3QgbmV3UHJvcHMgPSBuMi5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIC8vIGRpc2FibGUgcmVjdXJzZSBpbiBiZWZvcmVVcGRhdGUgaG9va3NcbiAgICAgICAgcGFyZW50Q29tcG9uZW50ICYmIHRvZ2dsZVJlY3Vyc2UocGFyZW50Q29tcG9uZW50LCBmYWxzZSk7XG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcbiAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlycykge1xuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgdHJ1ZSk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xuICAgICAgICAgICAgLy8gSE1SIHVwZGF0ZWQsIGZvcmNlIGZ1bGwgZGlmZlxuICAgICAgICAgICAgcGF0Y2hGbGFnID0gMDtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcmVDaGlsZHJlblNWRyA9IGlzU1ZHICYmIG4yLnR5cGUgIT09ICdmb3JlaWduT2JqZWN0JztcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcsIHNsb3RTY29wZUlkcyk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQudHlwZS5fX2htcklkKSB7XG4gICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcbiAgICAgICAgICAgIC8vIGZ1bGwgZGlmZlxuICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGVsLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRywgc2xvdFNjb3BlSWRzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgICAgICAgIC8vIHRoZSBwcmVzZW5jZSBvZiBhIHBhdGNoRmxhZyBtZWFucyB0aGlzIGVsZW1lbnQncyByZW5kZXIgY29kZSB3YXNcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIgYW5kIGNhbiB0YWtlIHRoZSBmYXN0IHBhdGguXG4gICAgICAgICAgICAvLyBpbiB0aGlzIHBhdGggb2xkIG5vZGUgYW5kIG5ldyBub2RlIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgdGhlIHNhbWUgc2hhcGVcbiAgICAgICAgICAgIC8vIChpLmUuIGF0IHRoZSBleGFjdCBzYW1lIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UgdGVtcGxhdGUpXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovKSB7XG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCBwcm9wcyBjb250YWluIGR5bmFtaWMga2V5cywgZnVsbCBkaWZmIG5lZWRlZFxuICAgICAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNsYXNzXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBjbGFzcyBiaW5kaW5ncy5cbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMiAvKiBQYXRjaEZsYWdzLkNMQVNTICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRQcm9wcy5jbGFzcyAhPT0gbmV3UHJvcHMuY2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICdjbGFzcycsIG51bGwsIG5ld1Byb3BzLmNsYXNzLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gc3R5bGVcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIHN0eWxlIGJpbmRpbmdzXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQgLyogUGF0Y2hGbGFncy5TVFlMRSAqLykge1xuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnc3R5bGUnLCBvbGRQcm9wcy5zdHlsZSwgbmV3UHJvcHMuc3R5bGUsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcHJvcHNcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIHByb3AvYXR0ciBiaW5kaW5nc1xuICAgICAgICAgICAgICAgIC8vIG90aGVyIHRoYW4gY2xhc3MgYW5kIHN0eWxlLiBUaGUga2V5cyBvZiBkeW5hbWljIHByb3AvYXR0cnMgYXJlIHNhdmVkIGZvclxuICAgICAgICAgICAgICAgIC8vIGZhc3RlciBpdGVyYXRpb24uXG4gICAgICAgICAgICAgICAgLy8gTm90ZSBkeW5hbWljIGtleXMgbGlrZSA6W2Zvb109XCJiYXJcIiB3aWxsIGNhdXNlIHRoaXMgb3B0aW1pemF0aW9uIHRvXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBvdXQgYW5kIGdvIHRocm91Z2ggYSBmdWxsIGRpZmYgYmVjYXVzZSB3ZSBuZWVkIHRvIHVuc2V0IHRoZSBvbGQga2V5XG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDggLyogUGF0Y2hGbGFncy5QUk9QUyAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmxhZyBpcyBwcmVzZW50IHRoZW4gZHluYW1pY1Byb3BzIG11c3QgYmUgbm9uLW51bGxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IG4yLmR5bmFtaWNQcm9wcztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICMxNDcxIGZvcmNlIHBhdGNoIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiB8fCBrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCBuMS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRleHRcbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIG9ubHkgZHluYW1pYyB0ZXh0IGNoaWxkcmVuLlxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEgLyogUGF0Y2hGbGFncy5URVhUICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4xLmNoaWxkcmVuICE9PSBuMi5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCAmJiBkeW5hbWljQ2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdW5vcHRpbWl6ZWQsIGZ1bGwgZGlmZlxuICAgICAgICAgICAgcGF0Y2hQcm9wcyhlbCwgbjIsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZVVwZGF0ZWQpIHx8IGRpcnMpIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcbiAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sobjIsIG4xLCBwYXJlbnRDb21wb25lbnQsICd1cGRhdGVkJyk7XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRoZSBmYXN0IHBhdGggZm9yIGJsb2Nrcy5cbiAgICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcykgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuICAgICAgICAgICAgY29uc3QgbmV3Vk5vZGUgPSBuZXdDaGlsZHJlbltpXTtcbiAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgY29udGFpbmVyIChwYXJlbnQgZWxlbWVudCkgZm9yIHRoZSBwYXRjaC5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IFxuICAgICAgICAgICAgLy8gb2xkVk5vZGUgbWF5IGJlIGFuIGVycm9yZWQgYXN5bmMgc2V0dXAoKSBjb21wb25lbnQgaW5zaWRlIFN1c3BlbnNlXG4gICAgICAgICAgICAvLyB3aGljaCB3aWxsIG5vdCBoYXZlIGEgbW91bnRlZCBlbGVtZW50XG4gICAgICAgICAgICBvbGRWTm9kZS5lbCAmJlxuICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBGcmFnbWVudCwgd2UgbmVlZCB0byBwcm92aWRlIHRoZSBhY3R1YWwgcGFyZW50XG4gICAgICAgICAgICAgICAgLy8gb2YgdGhlIEZyYWdtZW50IGl0c2VsZiBzbyBpdCBjYW4gbW92ZSBpdHMgY2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgKG9sZFZOb2RlLnR5cGUgPT09IEZyYWdtZW50IHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgZGlmZmVyZW50IG5vZGVzLCB0aGVyZSBpcyBnb2luZyB0byBiZSBhIHJlcGxhY2VtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIGFsc28gcmVxdWlyZXMgdGhlIGNvcnJlY3QgcGFyZW50IGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAhaXNTYW1lVk5vZGVUeXBlKG9sZFZOb2RlLCBuZXdWTm9kZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIGNvbXBvbmVudCwgaXQgY291bGQgY29udGFpbiBhbnl0aGluZy5cbiAgICAgICAgICAgICAgICAgICAgb2xkVk5vZGUuc2hhcGVGbGFnICYgKDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8gfCA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSlcbiAgICAgICAgICAgICAgICA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKVxuICAgICAgICAgICAgICAgIDogLy8gSW4gb3RoZXIgY2FzZXMsIHRoZSBwYXJlbnQgY29udGFpbmVyIGlzIG5vdCBhY3R1YWxseSB1c2VkIHNvIHdlXG4gICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgcGFzcyB0aGUgYmxvY2sgZWxlbWVudCBoZXJlIHRvIGF2b2lkIGEgRE9NIHBhcmVudE5vZGUgY2FsbC5cbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tDb250YWluZXI7XG4gICAgICAgICAgICBwYXRjaChvbGRWTm9kZSwgbmV3Vk5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBhdGNoUHJvcHMgPSAoZWwsIHZub2RlLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKSA9PiB7XG4gICAgICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChvbGRQcm9wcyAhPT0gRU1QVFlfT0JKKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpICYmICEoa2V5IGluIG5ld1Byb3BzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBvbGRQcm9wc1trZXldLCBudWxsLCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdQcm9wcykge1xuICAgICAgICAgICAgICAgIC8vIGVtcHR5IHN0cmluZyBpcyBub3QgdmFsaWQgcHJvcFxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAvLyBkZWZlciBwYXRjaGluZyB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2ICYmIGtleSAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBuZXdQcm9wcykge1xuICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICd2YWx1ZScsIG9sZFByb3BzLnZhbHVlLCBuZXdQcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHByb2Nlc3NGcmFnbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTdGFydEFuY2hvciA9IChuMi5lbCA9IG4xID8gbjEuZWwgOiBob3N0Q3JlYXRlVGV4dCgnJykpO1xuICAgICAgICBjb25zdCBmcmFnbWVudEVuZEFuY2hvciA9IChuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KCcnKSk7XG4gICAgICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSBuMjtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgLy8gIzU1MjMgZGV2IHJvb3QgZnJhZ21lbnQgbWF5IGluaGVyaXQgZGlyZWN0aXZlc1xuICAgICAgICAgICAgKGlzSG1yVXBkYXRpbmcgfHwgcGF0Y2hGbGFnICYgMjA0OCAvKiBQYXRjaEZsYWdzLkRFVl9ST09UX0ZSQUdNRU5UICovKSkge1xuICAgICAgICAgICAgLy8gSE1SIHVwZGF0ZWQgLyBEZXYgcm9vdCBmcmFnbWVudCAody8gY29tbWVudHMpLCBmb3JjZSBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIHNsb3QgZnJhZ21lbnQgd2l0aCA6c2xvdHRlZCBzY29wZSBpZHNcbiAgICAgICAgaWYgKGZyYWdtZW50U2xvdFNjb3BlSWRzKSB7XG4gICAgICAgICAgICBzbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHNcbiAgICAgICAgICAgICAgICA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpXG4gICAgICAgICAgICAgICAgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcbiAgICAgICAgfVxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudFN0YXJ0QW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KGZyYWdtZW50RW5kQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICAvLyBhIGZyYWdtZW50IGNhbiBvbmx5IGhhdmUgYXJyYXkgY2hpbGRyZW5cbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgYXJlIGVpdGhlciBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyLCBvciBpbXBsaWNpdGx5IGNyZWF0ZWRcbiAgICAgICAgICAgIC8vIGZyb20gYXJyYXlzLlxuICAgICAgICAgICAgbW91bnRDaGlsZHJlbihuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBmcmFnbWVudEVuZEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgPiAwICYmXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgNjQgLyogUGF0Y2hGbGFncy5TVEFCTEVfRlJBR01FTlQgKi8gJiZcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gJiZcbiAgICAgICAgICAgICAgICAvLyAjMjcxNSB0aGUgcHJldmlvdXMgZnJhZ21lbnQgY291bGQndmUgYmVlbiBhIEJBSUxlZCBvbmUgYXMgYSByZXN1bHRcbiAgICAgICAgICAgICAgICAvLyBvZiByZW5kZXJTbG90KCkgd2l0aCBubyB2YWxpZCBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIC8vIGEgc3RhYmxlIGZyYWdtZW50ICh0ZW1wbGF0ZSByb290IG9yIDx0ZW1wbGF0ZSB2LWZvcj4pIGRvZXNuJ3QgbmVlZCB0b1xuICAgICAgICAgICAgICAgIC8vIHBhdGNoIGNoaWxkcmVuIG9yZGVyLCBidXQgaXQgbWF5IGNvbnRhaW4gZHluYW1pY0NoaWxkcmVuLlxuICAgICAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQudHlwZS5fX2htcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgLy8gIzIwODAgaWYgdGhlIHN0YWJsZSBmcmFnbWVudCBoYXMgYSBrZXksIGl0J3MgYSA8dGVtcGxhdGUgdi1mb3I+IHRoYXQgbWF5XG4gICAgICAgICAgICAgICAgLy8gIGdldCBtb3ZlZCBhcm91bmQuIE1ha2Ugc3VyZSBhbGwgcm9vdCBsZXZlbCB2bm9kZXMgaW5oZXJpdCBlbC5cbiAgICAgICAgICAgICAgICAvLyAjMjEzNCBvciBpZiBpdCdzIGEgY29tcG9uZW50IHJvb3QsIGl0IG1heSBhbHNvIGdldCBtb3ZlZCBhcm91bmRcbiAgICAgICAgICAgICAgICAvLyBhcyB0aGUgY29tcG9uZW50IGlzIGJlaW5nIG1vdmVkLlxuICAgICAgICAgICAgICAgIG4yLmtleSAhPSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIChwYXJlbnRDb21wb25lbnQgJiYgbjIgPT09IHBhcmVudENvbXBvbmVudC5zdWJUcmVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgdHJ1ZSAvKiBzaGFsbG93ICovKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBrZXllZCAvIHVua2V5ZWQsIG9yIG1hbnVhbCBmcmFnbWVudHMuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGtleWVkICYgdW5rZXllZCwgc2luY2UgdGhleSBhcmUgY29tcGlsZXIgZ2VuZXJhdGVkIGZyb20gdi1mb3IsXG4gICAgICAgICAgICAgICAgLy8gZWFjaCBjaGlsZCBpcyBndWFyYW50ZWVkIHRvIGJlIGEgYmxvY2sgc28gdGhlIGZyYWdtZW50IHdpbGwgbmV2ZXJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGR5bmFtaWNDaGlsZHJlbi5cbiAgICAgICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgY29udGFpbmVyLCBmcmFnbWVudEVuZEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcHJvY2Vzc0NvbXBvbmVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgbjIuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG4yLnNoYXBlRmxhZyAmIDUxMiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9LRVBUX0FMSVZFICovKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5hY3RpdmF0ZShuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdW50Q29tcG9uZW50ID0gKGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSAoaW5pdGlhbFZOb2RlLmNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKGluaXRpYWxWTm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSkpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChpbml0aWFsVk5vZGUpO1xuICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgbW91bnRgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbmplY3QgcmVuZGVyZXIgaW50ZXJuYWxzIGZvciBrZWVwQWxpdmVcbiAgICAgICAgaWYgKGlzS2VlcEFsaXZlKGluaXRpYWxWTm9kZSkpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmN0eC5yZW5kZXJlciA9IGludGVybmFscztcbiAgICAgICAgfVxuICAgICAgICAvLyByZXNvbHZlIHByb3BzIGFuZCBzbG90cyBmb3Igc2V0dXAgY29udGV4dFxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0dXAoKSBpcyBhc3luYy4gVGhpcyBjb21wb25lbnQgcmVsaWVzIG9uIGFzeW5jIGxvZ2ljIHRvIGJlIHJlc29sdmVkXG4gICAgICAgIC8vIGJlZm9yZSBwcm9jZWVkaW5nXG4gICAgICAgIGlmIChpbnN0YW5jZS5hc3luY0RlcCkge1xuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucmVnaXN0ZXJEZXAoaW5zdGFuY2UsIHNldHVwUmVuZGVyRWZmZWN0KTtcbiAgICAgICAgICAgIC8vIEdpdmUgaXQgYSBwbGFjZWhvbGRlciBpZiB0aGlzIGlzIG5vdCBoeWRyYXRpb25cbiAgICAgICAgICAgIC8vIFRPRE8gaGFuZGxlIHNlbGYtZGVmaW5lZCBmYWxsYmFja1xuICAgICAgICAgICAgaWYgKCFpbml0aWFsVk5vZGUuZWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChpbnN0YW5jZS5zdWJUcmVlID0gY3JlYXRlVk5vZGUoQ29tbWVudCkpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShudWxsLCBwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldHVwUmVuZGVyRWZmZWN0KGluc3RhbmNlLCBpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgbW91bnRgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdXBkYXRlQ29tcG9uZW50ID0gKG4xLCBuMiwgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudCk7XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXAgJiZcbiAgICAgICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIC8vIGFzeW5jICYgc3RpbGwgcGVuZGluZyAtIGp1c3QgdXBkYXRlIHByb3BzIGFuZCBzbG90c1xuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjb21wb25lbnQncyByZWFjdGl2ZSBlZmZlY3QgZm9yIHJlbmRlciBpc24ndCBzZXQtdXAgeWV0XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG4yLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsIHVwZGF0ZVxuICAgICAgICAgICAgICAgIGluc3RhbmNlLm5leHQgPSBuMjtcbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBjaGlsZCBjb21wb25lbnQgaXMgYWxzbyBxdWV1ZWQsIHJlbW92ZSBpdCB0byBhdm9pZFxuICAgICAgICAgICAgICAgIC8vIGRvdWJsZSB1cGRhdGluZyB0aGUgc2FtZSBjaGlsZCBjb21wb25lbnQgaW4gdGhlIHNhbWUgZmx1c2guXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZUpvYihpbnN0YW5jZS51cGRhdGUpO1xuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlLnVwZGF0ZSBpcyB0aGUgcmVhY3RpdmUgZWZmZWN0LlxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gdXBkYXRlIG5lZWRlZC4ganVzdCBjb3B5IG92ZXIgcHJvcGVydGllc1xuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgICAgICAgIGluc3RhbmNlLnZub2RlID0gbjI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldHVwUmVuZGVyRWZmZWN0ID0gKGluc3RhbmNlLCBpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCBjb21wb25lbnRVcGRhdGVGbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVsLCBwcm9wcyB9ID0gaW5pdGlhbFZOb2RlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYm0sIG0sIHBhcmVudCB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNBc3luY1dyYXBwZXJWTm9kZSA9IGlzQXN5bmNXcmFwcGVyKGluaXRpYWxWTm9kZSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8vIGJlZm9yZU1vdW50IGhvb2tcbiAgICAgICAgICAgICAgICBpZiAoYm0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvblZub2RlQmVmb3JlTW91bnRcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBpbml0aWFsVk5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgaHlkcmF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgaGFzIGFkb3B0ZWQgaG9zdCBub2RlIC0gcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHlkcmF0ZVN1YlRyZWUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVOb2RlKGVsLCBpbnN0YW5jZS5zdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlclZOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUudHlwZS5fX2FzeW5jTG9hZGVyKCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdGU6IHdlIGFyZSBtb3ZpbmcgdGhlIHJlbmRlciBjYWxsIGludG8gYW4gYXN5bmMgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBtZWFucyBpdCB3b24ndCB0cmFjayBkZXBlbmRlbmNpZXMgLSBidXQgaXQncyBvayBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIHNlcnZlci1yZW5kZXJlZCBhc3luYyB3cmFwcGVyIGlzIGFscmVhZHkgaW4gcmVzb2x2ZWQgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpdCB3aWxsIG5ldmVyIG5lZWQgdG8gY2hhbmdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gIWluc3RhbmNlLmlzVW5tb3VudGVkICYmIGh5ZHJhdGVTdWJUcmVlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZVN1YlRyZWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViVHJlZSA9IChpbnN0YW5jZS5zdWJUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBzdWJUcmVlLCBjb250YWluZXIsIGFuY2hvciwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZS5lbCA9IHN1YlRyZWUuZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChtLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVNb3VudGVkXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NvcGVkSW5pdGlhbFZOb2RlID0gaW5pdGlhbFZOb2RlO1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBzY29wZWRJbml0aWFsVk5vZGUpLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFjdGl2YXRlZCBob29rIGZvciBrZWVwLWFsaXZlIHJvb3RzLlxuICAgICAgICAgICAgICAgIC8vICMxNzQyIGFjdGl2YXRlZCBob29rIG11c3QgYmUgYWNjZXNzZWQgYWZ0ZXIgZmlyc3QgcmVuZGVyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIGhvb2sgbWF5IGJlIGluamVjdGVkIGJ5IGEgY2hpbGQga2VlcC1hbGl2ZVxuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsVk5vZGUuc2hhcGVGbGFnICYgMjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovIHx8XG4gICAgICAgICAgICAgICAgICAgIChwYXJlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXN5bmNXcmFwcGVyKHBhcmVudC52bm9kZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC52bm9kZS5zaGFwZUZsYWcgJiAyNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGluc3RhbmNlLmEsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gIzI0NTg6IGRlZmVyZW5jZSBtb3VudC1vbmx5IG9iamVjdCBwYXJhbWV0ZXJzIHRvIHByZXZlbnQgbWVtbGVha3NcbiAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUgPSBjb250YWluZXIgPSBhbmNob3IgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0cmlnZ2VyZWQgYnkgbXV0YXRpb24gb2YgY29tcG9uZW50J3Mgb3duIHN0YXRlIChuZXh0OiBudWxsKVxuICAgICAgICAgICAgICAgIC8vIE9SIHBhcmVudCBjYWxsaW5nIHByb2Nlc3NDb21wb25lbnQgKG5leHQ6IFZOb2RlKVxuICAgICAgICAgICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBsZXQgb3JpZ2luTmV4dCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuZXh0IHx8IGluc3RhbmNlLnZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRGlzYWxsb3cgY29tcG9uZW50IGVmZmVjdCByZWN1cnNpb24gZHVyaW5nIHByZS1saWZlY3ljbGUgaG9va3MuXG4gICAgICAgICAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQuZWwgPSB2bm9kZS5lbDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHZub2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBiZWZvcmVVcGRhdGUgaG9va1xuICAgICAgICAgICAgICAgIGlmIChidSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhidSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVVcGRhdGVcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSBuZXh0VHJlZTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhdGNoKHByZXZUcmVlLCBuZXh0VHJlZSwgXG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIHRlbGVwb3J0XG4gICAgICAgICAgICAgICAgaG9zdFBhcmVudE5vZGUocHJldlRyZWUuZWwpLCBcbiAgICAgICAgICAgICAgICAvLyBhbmNob3IgbWF5IGhhdmUgY2hhbmdlZCBpZiBpdCdzIGluIGEgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICBnZXROZXh0SG9zdE5vZGUocHJldlRyZWUpLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0LmVsID0gbmV4dFRyZWUuZWw7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbk5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VsZi10cmlnZ2VyZWQgdXBkYXRlLiBJbiBjYXNlIG9mIEhPQywgdXBkYXRlIHBhcmVudCBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgZWwuIEhPQyBpcyBpbmRpY2F0ZWQgYnkgcGFyZW50IGluc3RhbmNlJ3Mgc3ViVHJlZSBwb2ludGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBjaGlsZCBjb21wb25lbnQncyB2bm9kZVxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlZCBob29rXG4gICAgICAgICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHUsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZVVwZGF0ZWRcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGNyZWF0ZSByZWFjdGl2ZSBlZmZlY3QgZm9yIHJlbmRlcmluZ1xuICAgICAgICBjb25zdCBlZmZlY3QgPSAoaW5zdGFuY2UuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGNvbXBvbmVudFVwZGF0ZUZuLCAoKSA9PiBxdWV1ZUpvYih1cGRhdGUpLCBpbnN0YW5jZS5zY29wZSAvLyB0cmFjayBpdCBpbiBjb21wb25lbnQncyBlZmZlY3Qgc2NvcGVcbiAgICAgICAgKSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZSA9IChpbnN0YW5jZS51cGRhdGUgPSAoKSA9PiBlZmZlY3QucnVuKCkpO1xuICAgICAgICB1cGRhdGUuaWQgPSBpbnN0YW5jZS51aWQ7XG4gICAgICAgIC8vIGFsbG93UmVjdXJzZVxuICAgICAgICAvLyAjMTgwMSwgIzIwNDMgY29tcG9uZW50IHJlbmRlciBlZmZlY3RzIHNob3VsZCBhbGxvdyByZWN1cnNpdmUgdXBkYXRlc1xuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBpbnN0YW5jZS5ydGNcbiAgICAgICAgICAgICAgICA/IGUgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRjLCBlKVxuICAgICAgICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgICAgICAgZWZmZWN0Lm9uVHJpZ2dlciA9IGluc3RhbmNlLnJ0Z1xuICAgICAgICAgICAgICAgID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGcsIGUpXG4gICAgICAgICAgICAgICAgOiB2b2lkIDA7XG4gICAgICAgICAgICB1cGRhdGUub3duZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyID0gKGluc3RhbmNlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBuZXh0Vk5vZGUuY29tcG9uZW50ID0gaW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IHByZXZQcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzO1xuICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG5leHRWTm9kZTtcbiAgICAgICAgaW5zdGFuY2UubmV4dCA9IG51bGw7XG4gICAgICAgIHVwZGF0ZVByb3BzKGluc3RhbmNlLCBuZXh0Vk5vZGUucHJvcHMsIHByZXZQcm9wcywgb3B0aW1pemVkKTtcbiAgICAgICAgdXBkYXRlU2xvdHMoaW5zdGFuY2UsIG5leHRWTm9kZS5jaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAvLyBwcm9wcyB1cGRhdGUgbWF5IGhhdmUgdHJpZ2dlcmVkIHByZS1mbHVzaCB3YXRjaGVycy5cbiAgICAgICAgLy8gZmx1c2ggdGhlbSBiZWZvcmUgdGhlIHJlbmRlciB1cGRhdGUuXG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnMoKTtcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgIH07XG4gICAgY29uc3QgcGF0Y2hDaGlsZHJlbiA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBwcmV2U2hhcGVGbGFnID0gbjEgPyBuMS5zaGFwZUZsYWcgOiAwO1xuICAgICAgICBjb25zdCBjMiA9IG4yLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICAgICAgLy8gZmFzdCBwYXRoXG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTI4IC8qIFBhdGNoRmxhZ3MuS0VZRURfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGJlIGVpdGhlciBmdWxseS1rZXllZCBvciBtaXhlZCAoc29tZSBrZXllZCBzb21lIG5vdClcbiAgICAgICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiBwYXRjaEZsYWcgbWVhbnMgY2hpbGRyZW4gYXJlIGd1YXJhbnRlZWQgdG8gYmUgYXJyYXlzXG4gICAgICAgICAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgMjU2IC8qIFBhdGNoRmxhZ3MuVU5LRVlFRF9GUkFHTUVOVCAqLykge1xuICAgICAgICAgICAgICAgIC8vIHVua2V5ZWRcbiAgICAgICAgICAgICAgICBwYXRjaFVua2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjaGlsZHJlbiBoYXMgMyBwb3NzaWJpbGl0aWVzOiB0ZXh0LCBhcnJheSBvciBubyBjaGlsZHJlbi5cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAvLyB0ZXh0IGNoaWxkcmVuIGZhc3QgcGF0aFxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjMiAhPT0gYzEpIHtcbiAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBjMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBwcmV2IGNoaWxkcmVuIHdhcyBhcnJheVxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHR3byBhcnJheXMsIGNhbm5vdCBhc3N1bWUgYW55dGhpbmcsIGRvIGZ1bGwgZGlmZlxuICAgICAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIG5ldyBjaGlsZHJlbiwganVzdCB1bm1vdW50IG9sZFxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHByZXYgY2hpbGRyZW4gd2FzIHRleHQgT1IgbnVsbFxuICAgICAgICAgICAgICAgIC8vIG5ldyBjaGlsZHJlbiBpcyBhcnJheSBPUiBudWxsXG4gICAgICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ldyBpZiBhcnJheVxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGF0Y2hVbmtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGMxID0gYzEgfHwgRU1QVFlfQVJSO1xuICAgICAgICBjMiA9IGMyIHx8IEVNUFRZX0FSUjtcbiAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gYzEubGVuZ3RoO1xuICAgICAgICBjb25zdCBuZXdMZW5ndGggPSBjMi5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvbW1vbkxlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCwgbmV3TGVuZ3RoKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb21tb25MZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XG4gICAgICAgICAgICBwYXRjaChjMVtpXSwgbmV4dENoaWxkLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZFxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlLCBmYWxzZSwgY29tbW9uTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG1vdW50IG5ld1xuICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgY29tbW9uTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gY2FuIGJlIGFsbC1rZXllZCBvciBtaXhlZFxuICAgIGNvbnN0IHBhdGNoS2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBjb25zdCBsMiA9IGMyLmxlbmd0aDtcbiAgICAgICAgbGV0IGUxID0gYzEubGVuZ3RoIC0gMTsgLy8gcHJldiBlbmRpbmcgaW5kZXhcbiAgICAgICAgbGV0IGUyID0gbDIgLSAxOyAvLyBuZXh0IGVuZGluZyBpbmRleFxuICAgICAgICAvLyAxLiBzeW5jIGZyb20gc3RhcnRcbiAgICAgICAgLy8gKGEgYikgY1xuICAgICAgICAvLyAoYSBiKSBkIGVcbiAgICAgICAgd2hpbGUgKGkgPD0gZTEgJiYgaSA8PSBlMikge1xuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtpXTtcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2ldID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgICAgICAgICBwYXRjaChuMSwgbjIsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIDIuIHN5bmMgZnJvbSBlbmRcbiAgICAgICAgLy8gYSAoYiBjKVxuICAgICAgICAvLyBkIGUgKGIgYylcbiAgICAgICAgd2hpbGUgKGkgPD0gZTEgJiYgaSA8PSBlMikge1xuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtlMV07XG4gICAgICAgICAgICBjb25zdCBuMiA9IChjMltlMl0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2UyXSlcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSkpO1xuICAgICAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUxLS07XG4gICAgICAgICAgICBlMi0tO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuIGNvbW1vbiBzZXF1ZW5jZSArIG1vdW50XG4gICAgICAgIC8vIChhIGIpXG4gICAgICAgIC8vIChhIGIpIGNcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gMSwgZTIgPSAyXG4gICAgICAgIC8vIChhIGIpXG4gICAgICAgIC8vIGMgKGEgYilcbiAgICAgICAgLy8gaSA9IDAsIGUxID0gLTEsIGUyID0gMFxuICAgICAgICBpZiAoaSA+IGUxKSB7XG4gICAgICAgICAgICBpZiAoaSA8PSBlMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQb3MgPSBlMiArIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dFBvcyA8IGwyID8gYzJbbmV4dFBvc10uZWwgOiBwYXJlbnRBbmNob3I7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPD0gZTIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgKGMyW2ldID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA0LiBjb21tb24gc2VxdWVuY2UgKyB1bm1vdW50XG4gICAgICAgIC8vIChhIGIpIGNcbiAgICAgICAgLy8gKGEgYilcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gMiwgZTIgPSAxXG4gICAgICAgIC8vIGEgKGIgYylcbiAgICAgICAgLy8gKGIgYylcbiAgICAgICAgLy8gaSA9IDAsIGUxID0gMCwgZTIgPSAtMVxuICAgICAgICBlbHNlIGlmIChpID4gZTIpIHtcbiAgICAgICAgICAgIHdoaWxlIChpIDw9IGUxKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChjMVtpXSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDUuIHVua25vd24gc2VxdWVuY2VcbiAgICAgICAgLy8gW2kgLi4uIGUxICsgMV06IGEgYiBbYyBkIGVdIGYgZ1xuICAgICAgICAvLyBbaSAuLi4gZTIgKyAxXTogYSBiIFtlIGQgYyBoXSBmIGdcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gNCwgZTIgPSA1XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgczEgPSBpOyAvLyBwcmV2IHN0YXJ0aW5nIGluZGV4XG4gICAgICAgICAgICBjb25zdCBzMiA9IGk7IC8vIG5leHQgc3RhcnRpbmcgaW5kZXhcbiAgICAgICAgICAgIC8vIDUuMSBidWlsZCBrZXk6aW5kZXggbWFwIGZvciBuZXdDaGlsZHJlblxuICAgICAgICAgICAgY29uc3Qga2V5VG9OZXdJbmRleE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IHMyOyBpIDw9IGUyOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXlUb05ld0luZGV4TWFwLmhhcyhuZXh0Q2hpbGQua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRHVwbGljYXRlIGtleXMgZm91bmQgZHVyaW5nIHVwZGF0ZTpgLCBKU09OLnN0cmluZ2lmeShuZXh0Q2hpbGQua2V5KSwgYE1ha2Ugc3VyZSBrZXlzIGFyZSB1bmlxdWUuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAga2V5VG9OZXdJbmRleE1hcC5zZXQobmV4dENoaWxkLmtleSwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNS4yIGxvb3AgdGhyb3VnaCBvbGQgY2hpbGRyZW4gbGVmdCB0byBiZSBwYXRjaGVkIGFuZCB0cnkgdG8gcGF0Y2hcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIG5vZGVzICYgcmVtb3ZlIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50XG4gICAgICAgICAgICBsZXQgajtcbiAgICAgICAgICAgIGxldCBwYXRjaGVkID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHRvQmVQYXRjaGVkID0gZTIgLSBzMiArIDE7XG4gICAgICAgICAgICBsZXQgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHVzZWQgdG8gdHJhY2sgd2hldGhlciBhbnkgbm9kZSBoYXMgbW92ZWRcbiAgICAgICAgICAgIGxldCBtYXhOZXdJbmRleFNvRmFyID0gMDtcbiAgICAgICAgICAgIC8vIHdvcmtzIGFzIE1hcDxuZXdJbmRleCwgb2xkSW5kZXg+XG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgb2xkSW5kZXggaXMgb2Zmc2V0IGJ5ICsxXG4gICAgICAgICAgICAvLyBhbmQgb2xkSW5kZXggPSAwIGlzIGEgc3BlY2lhbCB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBuZXcgbm9kZSBoYXNcbiAgICAgICAgICAgIC8vIG5vIGNvcnJlc3BvbmRpbmcgb2xkIG5vZGUuXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBkZXRlcm1pbmluZyBsb25nZXN0IHN0YWJsZSBzdWJzZXF1ZW5jZVxuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXhUb09sZEluZGV4TWFwID0gbmV3IEFycmF5KHRvQmVQYXRjaGVkKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b0JlUGF0Y2hlZDsgaSsrKVxuICAgICAgICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9IDA7XG4gICAgICAgICAgICBmb3IgKGkgPSBzMTsgaSA8PSBlMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkNoaWxkID0gYzFbaV07XG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoZWQgPj0gdG9CZVBhdGNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxsIG5ldyBjaGlsZHJlbiBoYXZlIGJlZW4gcGF0Y2hlZCBzbyB0aGlzIGNhbiBvbmx5IGJlIGEgcmVtb3ZhbFxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbmV3SW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZDaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGtleVRvTmV3SW5kZXhNYXAuZ2V0KHByZXZDaGlsZC5rZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8ga2V5LWxlc3Mgbm9kZSwgdHJ5IHRvIGxvY2F0ZSBhIGtleS1sZXNzIG5vZGUgb2YgdGhlIHNhbWUgdHlwZVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSBzMjsgaiA8PSBlMjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ogLSBzMl0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVWTm9kZVR5cGUocHJldkNoaWxkLCBjMltqXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW25ld0luZGV4IC0gczJdID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA+PSBtYXhOZXdJbmRleFNvRmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhOZXdJbmRleFNvRmFyID0gbmV3SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gocHJldkNoaWxkLCBjMltuZXdJbmRleF0sIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hlZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDUuMyBtb3ZlIGFuZCBtb3VudFxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2Ugb25seSB3aGVuIG5vZGVzIGhhdmUgbW92ZWRcbiAgICAgICAgICAgIGNvbnN0IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlID0gbW92ZWRcbiAgICAgICAgICAgICAgICA/IGdldFNlcXVlbmNlKG5ld0luZGV4VG9PbGRJbmRleE1hcClcbiAgICAgICAgICAgICAgICA6IEVNUFRZX0FSUjtcbiAgICAgICAgICAgIGogPSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgLy8gbG9vcGluZyBiYWNrd2FyZHMgc28gdGhhdCB3ZSBjYW4gdXNlIGxhc3QgcGF0Y2hlZCBub2RlIGFzIGFuY2hvclxuICAgICAgICAgICAgZm9yIChpID0gdG9CZVBhdGNoZWQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHMyICsgaTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltuZXh0SW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRJbmRleCArIDEgPCBsMiA/IGMyW25leHRJbmRleCArIDFdLmVsIDogcGFyZW50QW5jaG9yO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbW91bnQgbmV3XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaWY6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIHN0YWJsZSBzdWJzZXF1ZW5jZSAoZS5nLiBhIHJldmVyc2UpXG4gICAgICAgICAgICAgICAgICAgIC8vIE9SIGN1cnJlbnQgbm9kZSBpcyBub3QgYW1vbmcgdGhlIHN0YWJsZSBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaSAhPT0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2Vbal0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmUobmV4dENoaWxkLCBjb250YWluZXIsIGFuY2hvciwgMiAvKiBNb3ZlVHlwZS5SRU9SREVSICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW92ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwpID0+IHtcbiAgICAgICAgY29uc3QgeyBlbCwgdHlwZSwgdHJhbnNpdGlvbiwgY2hpbGRyZW4sIHNoYXBlRmxhZyB9ID0gdm5vZGU7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICBtb3ZlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgdm5vZGUuc3VzcGVuc2UubW92ZShjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICB0eXBlLm1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnRlcm5hbHMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBob3N0SW5zZXJ0KHZub2RlLmFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcbiAgICAgICAgICAgIG1vdmVTdGF0aWNOb2RlKHZub2RlLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2luZ2xlIG5vZGVzXG4gICAgICAgIGNvbnN0IG5lZWRUcmFuc2l0aW9uID0gbW92ZVR5cGUgIT09IDIgLyogTW92ZVR5cGUuUkVPUkRFUiAqLyAmJlxuICAgICAgICAgICAgc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gJiZcbiAgICAgICAgICAgIHRyYW5zaXRpb247XG4gICAgICAgIGlmIChuZWVkVHJhbnNpdGlvbikge1xuICAgICAgICAgICAgaWYgKG1vdmVUeXBlID09PSAwIC8qIE1vdmVUeXBlLkVOVEVSICovKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB0cmFuc2l0aW9uLmVudGVyKGVsKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSwgYWZ0ZXJMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdmUgPSAoKSA9PiBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZWF2ZShlbCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxheUxlYXZlKGVsLCByZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVubW91bnQgPSAodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHJlZiwgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgc2hhcGVGbGFnLCBwYXRjaEZsYWcsIGRpcnMgfSA9IHZub2RlO1xuICAgICAgICAvLyB1bnNldCByZWZcbiAgICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAyNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguZGVhY3RpdmF0ZSh2bm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2hvdWxkSW52b2tlRGlycyA9IHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmIGRpcnM7XG4gICAgICAgIGNvbnN0IHNob3VsZEludm9rZVZub2RlSG9vayA9ICFpc0FzeW5jV3JhcHBlcih2bm9kZSk7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2VWbm9kZUhvb2sgJiZcbiAgICAgICAgICAgICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlVW5tb3VudCkpIHtcbiAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICB1bm1vdW50Q29tcG9uZW50KHZub2RlLmNvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLnVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVubW91bnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUudHlwZS5yZW1vdmUodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCwgaW50ZXJuYWxzLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkeW5hbWljQ2hpbGRyZW4gJiZcbiAgICAgICAgICAgICAgICAvLyAjMTE1MzogZmFzdCBwYXRoIHNob3VsZCBub3QgYmUgdGFrZW4gZm9yIG5vbi1zdGFibGUgKHYtZm9yKSBmcmFnbWVudHNcbiAgICAgICAgICAgICAgICAodHlwZSAhPT0gRnJhZ21lbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBhdGNoRmxhZyA+IDAgJiYgcGF0Y2hGbGFnICYgNjQgLyogUGF0Y2hGbGFncy5TVEFCTEVfRlJBR01FTlQgKi8pKSkge1xuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCBmb3IgYmxvY2sgbm9kZXM6IG9ubHkgbmVlZCB0byB1bm1vdW50IGR5bmFtaWMgY2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGR5bmFtaWNDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHR5cGUgPT09IEZyYWdtZW50ICYmXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnICZcbiAgICAgICAgICAgICAgICAgICAgKDEyOCAvKiBQYXRjaEZsYWdzLktFWUVEX0ZSQUdNRU5UICovIHwgMjU2IC8qIFBhdGNoRmxhZ3MuVU5LRVlFRF9GUkFHTUVOVCAqLykpIHx8XG4gICAgICAgICAgICAgICAgKCFvcHRpbWl6ZWQgJiYgc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykpIHtcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNob3VsZEludm9rZVZub2RlSG9vayAmJlxuICAgICAgICAgICAgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVVbm1vdW50ZWQpKSB8fFxuICAgICAgICAgICAgc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgc2hvdWxkSW52b2tlRGlycyAmJlxuICAgICAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICd1bm1vdW50ZWQnKTtcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlID0gdm5vZGUgPT4ge1xuICAgICAgICBjb25zdCB7IHR5cGUsIGVsLCBhbmNob3IsIHRyYW5zaXRpb24gfSA9IHZub2RlO1xuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB2bm9kZS5wYXRjaEZsYWcgPiAwICYmXG4gICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnICYgMjA0OCAvKiBQYXRjaEZsYWdzLkRFVl9ST09UX0ZSQUdNRU5UICovICYmXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xuICAgICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFJlbW92ZShjaGlsZC5lbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVGcmFnbWVudChlbCwgYW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICAgICAgICByZW1vdmVTdGF0aWNOb2RlKHZub2RlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwZXJmb3JtUmVtb3ZlID0gKCkgPT4ge1xuICAgICAgICAgICAgaG9zdFJlbW92ZShlbCk7XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQgJiYgdHJhbnNpdGlvbi5hZnRlckxlYXZlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5hZnRlckxlYXZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyAmJlxuICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4gbGVhdmUoZWwsIHBlcmZvcm1SZW1vdmUpO1xuICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgICAgICAgICBkZWxheUxlYXZlKHZub2RlLmVsLCBwZXJmb3JtUmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZXJmb3JtUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUZyYWdtZW50ID0gKGN1ciwgZW5kKSA9PiB7XG4gICAgICAgIC8vIEZvciBmcmFnbWVudHMsIGRpcmVjdGx5IHJlbW92ZSBhbGwgY29udGFpbmVkIERPTSBub2Rlcy5cbiAgICAgICAgLy8gKGZyYWdtZW50IGNoaWxkIG5vZGVzIGNhbm5vdCBoYXZlIHRyYW5zaXRpb24pXG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICB3aGlsZSAoY3VyICE9PSBlbmQpIHtcbiAgICAgICAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoY3VyKTtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoY3VyKTtcbiAgICAgICAgICAgIGN1ciA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdFJlbW92ZShlbmQpO1xuICAgIH07XG4gICAgY29uc3QgdW5tb3VudENvbXBvbmVudCA9IChpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKSA9PiB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XG4gICAgICAgICAgICB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGJ1bSwgc2NvcGUsIHVwZGF0ZSwgc3ViVHJlZSwgdW0gfSA9IGluc3RhbmNlO1xuICAgICAgICAvLyBiZWZvcmVVbm1vdW50IGhvb2tcbiAgICAgICAgaWYgKGJ1bSkge1xuICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYnVtKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdG9wIGVmZmVjdHMgaW4gY29tcG9uZW50IHNjb3BlXG4gICAgICAgIHNjb3BlLnN0b3AoKTtcbiAgICAgICAgLy8gdXBkYXRlIG1heSBiZSBudWxsIGlmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgaXRzIGFzeW5jXG4gICAgICAgIC8vIHNldHVwIGhhcyByZXNvbHZlZC5cbiAgICAgICAgaWYgKHVwZGF0ZSkge1xuICAgICAgICAgICAgLy8gc28gdGhhdCBzY2hlZHVsZXIgd2lsbCBubyBsb25nZXIgaW52b2tlIGl0XG4gICAgICAgICAgICB1cGRhdGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB1bm1vdW50KHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHVubW91bnRlZCBob29rXG4gICAgICAgIGlmICh1bSkge1xuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHVtLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGluc3RhbmNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAvLyBBIGNvbXBvbmVudCB3aXRoIGFzeW5jIGRlcCBpbnNpZGUgYSBwZW5kaW5nIHN1c3BlbnNlIGlzIHVubW91bnRlZCBiZWZvcmVcbiAgICAgICAgLy8gaXRzIGFzeW5jIGRlcCByZXNvbHZlcy4gVGhpcyBzaG91bGQgcmVtb3ZlIHRoZSBkZXAgZnJvbSB0aGUgc3VzcGVuc2UsIGFuZFxuICAgICAgICAvLyBjYXVzZSB0aGUgc3VzcGVuc2UgdG8gcmVzb2x2ZSBpbW1lZGlhdGVseSBpZiB0aGF0IHdhcyB0aGUgbGFzdCBkZXAuXG4gICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZSAmJlxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJlxuICAgICAgICAgICAgIXBhcmVudFN1c3BlbnNlLmlzVW5tb3VudGVkICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCAmJlxuICAgICAgICAgICAgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLnN1c3BlbnNlSWQgPT09IHBhcmVudFN1c3BlbnNlLnBlbmRpbmdJZCkge1xuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xuICAgICAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVubW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UsIHN0YXJ0ID0gMCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdW5tb3VudChjaGlsZHJlbltpXSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGdldE5leHRIb3N0Tm9kZSA9IHZub2RlID0+IHtcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0SG9zdE5vZGUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHZub2RlLnN1c3BlbnNlLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG9zdE5leHRTaWJsaW5nKCh2bm9kZS5hbmNob3IgfHwgdm5vZGUuZWwpKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlciA9ICh2bm9kZSwgY29udGFpbmVyLCBpc1NWRykgPT4ge1xuICAgICAgICBpZiAodm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5fdm5vZGUpIHtcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNvbnRhaW5lci5fdm5vZGUsIG51bGwsIG51bGwsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGF0Y2goY29udGFpbmVyLl92bm9kZSB8fCBudWxsLCB2bm9kZSwgY29udGFpbmVyLCBudWxsLCBudWxsLCBudWxsLCBpc1NWRyk7XG4gICAgICAgIH1cbiAgICAgICAgZmx1c2hQcmVGbHVzaENicygpO1xuICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xuICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgfTtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB7XG4gICAgICAgIHA6IHBhdGNoLFxuICAgICAgICB1bTogdW5tb3VudCxcbiAgICAgICAgbTogbW92ZSxcbiAgICAgICAgcjogcmVtb3ZlLFxuICAgICAgICBtdDogbW91bnRDb21wb25lbnQsXG4gICAgICAgIG1jOiBtb3VudENoaWxkcmVuLFxuICAgICAgICBwYzogcGF0Y2hDaGlsZHJlbixcbiAgICAgICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgICAgIG46IGdldE5leHRIb3N0Tm9kZSxcbiAgICAgICAgbzogb3B0aW9uc1xuICAgIH07XG4gICAgbGV0IGh5ZHJhdGU7XG4gICAgbGV0IGh5ZHJhdGVOb2RlO1xuICAgIGlmIChjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAgICAgICAgW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXSA9IGNyZWF0ZUh5ZHJhdGlvbkZucyhpbnRlcm5hbHMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXIsXG4gICAgICAgIGh5ZHJhdGUsXG4gICAgICAgIGNyZWF0ZUFwcDogY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSlcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9nZ2xlUmVjdXJzZSh7IGVmZmVjdCwgdXBkYXRlIH0sIGFsbG93ZWQpIHtcbiAgICBlZmZlY3QuYWxsb3dSZWN1cnNlID0gdXBkYXRlLmFsbG93UmVjdXJzZSA9IGFsbG93ZWQ7XG59XG4vKipcbiAqICMxMTU2XG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIEhNUi1lbmFibGVkLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBzdGF0aWMgbm9kZXNcbiAqIGluc2lkZSBhIGJsb2NrIGFsc28gaW5oZXJpdCB0aGUgRE9NIGVsZW1lbnQgZnJvbSB0aGUgcHJldmlvdXMgdHJlZSBzbyB0aGF0XG4gKiBITVIgdXBkYXRlcyAod2hpY2ggYXJlIGZ1bGwgdXBkYXRlcykgY2FuIHJldHJpZXZlIHRoZSBlbGVtZW50IGZvciBwYXRjaGluZy5cbiAqXG4gKiAjMjA4MFxuICogSW5zaWRlIGtleWVkIGB0ZW1wbGF0ZWAgZnJhZ21lbnQgc3RhdGljIGNoaWxkcmVuLCBpZiBhIGZyYWdtZW50IGlzIG1vdmVkLFxuICogdGhlIGNoaWxkcmVuIHdpbGwgYWx3YXlzIGJlIG1vdmVkLiBUaGVyZWZvcmUsIGluIG9yZGVyIHRvIGVuc3VyZSBjb3JyZWN0IG1vdmVcbiAqIHBvc2l0aW9uLCBlbCBzaG91bGQgYmUgaW5oZXJpdGVkIGZyb20gcHJldmlvdXMgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCBzaGFsbG93ID0gZmFsc2UpIHtcbiAgICBjb25zdCBjaDEgPSBuMS5jaGlsZHJlbjtcbiAgICBjb25zdCBjaDIgPSBuMi5jaGlsZHJlbjtcbiAgICBpZiAoaXNBcnJheShjaDEpICYmIGlzQXJyYXkoY2gyKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoMS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBvbmx5IGNhbGxlZCBpbiB0aGUgb3B0aW1pemVkIHBhdGggc28gYXJyYXkgY2hpbGRyZW4gYXJlXG4gICAgICAgICAgICAvLyBndWFyYW50ZWVkIHRvIGJlIHZub2Rlc1xuICAgICAgICAgICAgY29uc3QgYzEgPSBjaDFbaV07XG4gICAgICAgICAgICBsZXQgYzIgPSBjaDJbaV07XG4gICAgICAgICAgICBpZiAoYzIuc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gJiYgIWMyLmR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGlmIChjMi5wYXRjaEZsYWcgPD0gMCB8fCBjMi5wYXRjaEZsYWcgPT09IDMyIC8qIFBhdGNoRmxhZ3MuSFlEUkFURV9FVkVOVFMgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgYzIgPSBjaDJbaV0gPSBjbG9uZUlmTW91bnRlZChjaDJbaV0pO1xuICAgICAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNoYWxsb3cpXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4oYzEsIGMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICM2ODUyIGFsc28gaW5oZXJpdCBmb3IgdGV4dCBub2Rlc1xuICAgICAgICAgICAgaWYgKGMyLnR5cGUgPT09IFRleHQpIHtcbiAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWxzbyBpbmhlcml0IGZvciBjb21tZW50IG5vZGVzLCBidXQgbm90IHBsYWNlaG9sZGVycyAoZS5nLiB2LWlmIHdoaWNoXG4gICAgICAgICAgICAvLyB3b3VsZCBoYXZlIHJlY2VpdmVkIC5lbCBkdXJpbmcgYmxvY2sgcGF0Y2gpXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XG4gICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfaW5jcmVhc2luZ19zdWJzZXF1ZW5jZVxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoYXJyKSB7XG4gICAgY29uc3QgcCA9IGFyci5zbGljZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFswXTtcbiAgICBsZXQgaSwgaiwgdSwgdiwgYztcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBhcnJJID0gYXJyW2ldO1xuICAgICAgICBpZiAoYXJySSAhPT0gMCkge1xuICAgICAgICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoYXJyW2pdIDwgYXJySSkge1xuICAgICAgICAgICAgICAgIHBbaV0gPSBqO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdSA9IDA7XG4gICAgICAgICAgICB2ID0gcmVzdWx0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB3aGlsZSAodSA8IHYpIHtcbiAgICAgICAgICAgICAgICBjID0gKHUgKyB2KSA+PiAxO1xuICAgICAgICAgICAgICAgIGlmIChhcnJbcmVzdWx0W2NdXSA8IGFyckkpIHtcbiAgICAgICAgICAgICAgICAgICAgdSA9IGMgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdiA9IGM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xuICAgICAgICAgICAgICAgIGlmICh1ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBwW2ldID0gcmVzdWx0W3UgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0W3VdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1ID0gcmVzdWx0Lmxlbmd0aDtcbiAgICB2ID0gcmVzdWx0W3UgLSAxXTtcbiAgICB3aGlsZSAodS0tID4gMCkge1xuICAgICAgICByZXN1bHRbdV0gPSB2O1xuICAgICAgICB2ID0gcFt2XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSAnJyk7XG5jb25zdCBpc1RhcmdldFNWRyA9ICh0YXJnZXQpID0+IHR5cGVvZiBTVkdFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0YXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50O1xuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBwcm9wcyAmJiBwcm9wcy50bztcbiAgICBpZiAoaXNTdHJpbmcodGFyZ2V0U2VsZWN0b3IpKSB7XG4gICAgICAgIGlmICghc2VsZWN0KSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXJyZW50IHJlbmRlcmVyIGRvZXMgbm90IHN1cHBvcnQgc3RyaW5nIHRhcmdldCBmb3IgVGVsZXBvcnRzLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYChtaXNzaW5nIHF1ZXJ5U2VsZWN0b3IgcmVuZGVyZXIgb3B0aW9uKWApO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIGxvY2F0ZSBUZWxlcG9ydCB0YXJnZXQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYE5vdGUgdGhlIHRhcmdldCBlbGVtZW50IG11c3QgZXhpc3QgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCAtIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGkuZS4gdGhlIHRhcmdldCBjYW5ub3QgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudCBpdHNlbGYsIGFuZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpZGVhbGx5IHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBlbnRpcmUgVnVlIGNvbXBvbmVudCB0cmVlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdGFyZ2V0U2VsZWN0b3IgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgVGVsZXBvcnQgdGFyZ2V0OiAke3RhcmdldFNlbGVjdG9yfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcbiAgICB9XG59O1xuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xuICAgIF9faXNUZWxlcG9ydDogdHJ1ZSxcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKSB7XG4gICAgICAgIGNvbnN0IHsgbWM6IG1vdW50Q2hpbGRyZW4sIHBjOiBwYXRjaENoaWxkcmVuLCBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbiwgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gaW50ZXJuYWxzO1xuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XG4gICAgICAgIGxldCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiB9ID0gbjI7XG4gICAgICAgIC8vICMzMzAyXG4gICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGluc2VydCBhbmNob3JzIGluIHRoZSBtYWluIHZpZXdcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKG4yLmVsID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBzdGFydCcpXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tbWVudCgndGVsZXBvcnQgZW5kJylcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgaW5zZXJ0KG1haW5BbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dCgnJykpO1xuICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGluc2VydCh0YXJnZXRBbmNob3IsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gIzI2NTIgd2UgY291bGQgYmUgdGVsZXBvcnRpbmcgZnJvbSBhIG5vbi1TVkcgdHJlZSBpbnRvIGFuIFNWRyB0cmVlXG4gICAgICAgICAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBpc1RhcmdldFNWRyh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbW91bnQgPSAoY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUZWxlcG9ydCAqYWx3YXlzKiBoYXMgQXJyYXkgY2hpbGRyZW4uIFRoaXMgaXMgZW5mb3JjZWQgaW4gYm90aCB0aGVcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlciBhbmQgdm5vZGUgY2hpbGRyZW4gbm9ybWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgbW91bnQoY29udGFpbmVyLCBtYWluQW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBjb250ZW50XG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSBuMS5hbmNob3IpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKG4yLnRhcmdldCA9IG4xLnRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gbjEudGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHdhc0Rpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4xLnByb3BzKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250YWluZXIgPSB3YXNEaXNhYmxlZCA/IGNvbnRhaW5lciA6IHRhcmdldDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBbmNob3IgPSB3YXNEaXNhYmxlZCA/IG1haW5BbmNob3IgOiB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIHdoZW4gdGhlIHRlbGVwb3J0IGhhcHBlbnMgdG8gYmUgYSBibG9jayByb290XG4gICAgICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBjdXJyZW50Q29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgICAgICAgICAvLyBldmVuIGluIGJsb2NrIHRyZWUgbW9kZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgcm9vdC1sZXZlbCBub2Rlc1xuICAgICAgICAgICAgICAgIC8vIGluIHRoZSB0ZWxlcG9ydCBpbmhlcml0IHByZXZpb3VzIERPTSByZWZlcmVuY2VzIHNvIHRoYXQgdGhleSBjYW5cbiAgICAgICAgICAgICAgICAvLyBiZSBtb3ZlZCBpbiBmdXR1cmUgcGF0Y2hlcy5cbiAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGN1cnJlbnRDb250YWluZXIsIGN1cnJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlZCAtPiBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gbWFpbiBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCBjb250YWluZXIsIG1haW5BbmNob3IsIGludGVybmFscywgMSAvKiBUZWxlcG9ydE1vdmVUeXBlcy5UT0dHTEUgKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIG5leHRUYXJnZXQsIG51bGwsIGludGVybmFscywgMCAvKiBUZWxlcG9ydE1vdmVUeXBlcy5UQVJHRVRfQ0hBTkdFICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3YXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkaXNhYmxlZCAtPiBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byB0ZWxlcG9ydCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCB0YXJnZXQsIHRhcmdldEFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlRPR0dMRSAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUNzc1ZhcnMobjIpO1xuICAgIH0sXG4gICAgcmVtb3ZlKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIHsgdW06IHVubW91bnQsIG86IHsgcmVtb3ZlOiBob3N0UmVtb3ZlIH0gfSwgZG9SZW1vdmUpIHtcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuLCBhbmNob3IsIHRhcmdldEFuY2hvciwgdGFyZ2V0LCBwcm9wcyB9ID0gdm5vZGU7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUodGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhbiB1bm1vdW50ZWQgdGVsZXBvcnQgc2hvdWxkIGFsd2F5cyByZW1vdmUgaXRzIGNoaWxkcmVuIGlmIG5vdCBkaXNhYmxlZFxuICAgICAgICBpZiAoZG9SZW1vdmUgfHwgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KGNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlLCAhIWNoaWxkLmR5bmFtaWNDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3ZlOiBtb3ZlVGVsZXBvcnQsXG4gICAgaHlkcmF0ZTogaHlkcmF0ZVRlbGVwb3J0XG59O1xuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMiAvKiBUZWxlcG9ydE1vdmVUeXBlcy5SRU9SREVSICovKSB7XG4gICAgLy8gbW92ZSB0YXJnZXQgYW5jaG9yIGlmIHRoaXMgaXMgYSB0YXJnZXQgY2hhbmdlLlxuICAgIGlmIChtb3ZlVHlwZSA9PT0gMCAvKiBUZWxlcG9ydE1vdmVUeXBlcy5UQVJHRVRfQ0hBTkdFICovKSB7XG4gICAgICAgIGluc2VydCh2bm9kZS50YXJnZXRBbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcbiAgICB9XG4gICAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XG4gICAgY29uc3QgaXNSZW9yZGVyID0gbW92ZVR5cGUgPT09IDIgLyogVGVsZXBvcnRNb3ZlVHlwZXMuUkVPUkRFUiAqLztcbiAgICAvLyBtb3ZlIG1haW4gdmlldyBhbmNob3IgaWYgdGhpcyBpcyBhIHJlLW9yZGVyLlxuICAgIGlmIChpc1Jlb3JkZXIpIHtcbiAgICAgICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gICAgfVxuICAgIC8vIGlmIHRoaXMgaXMgYSByZS1vcmRlciBhbmQgdGVsZXBvcnQgaXMgZW5hYmxlZCAoY29udGVudCBpcyBpbiB0YXJnZXQpXG4gICAgLy8gZG8gbm90IG1vdmUgY2hpbGRyZW4uIFNvIHRoZSBvcHBvc2l0ZSBpczogb25seSBtb3ZlIGNoaWxkcmVuIGlmIHRoaXNcbiAgICAvLyBpcyBub3QgYSByZW9yZGVyLCBvciB0aGUgdGVsZXBvcnQgaXMgZGlzYWJsZWRcbiAgICBpZiAoIWlzUmVvcmRlciB8fCBpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XG4gICAgICAgIC8vIFRlbGVwb3J0IGhhcyBlaXRoZXIgQXJyYXkgY2hpbGRyZW4gb3Igbm8gY2hpbGRyZW4uXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbW92ZShjaGlsZHJlbltpXSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIDIgLyogTW92ZVR5cGUuUkVPUkRFUiAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cbiAgICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgICAgIGluc2VydChhbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7IG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IgfSB9LCBoeWRyYXRlQ2hpbGRyZW4pIHtcbiAgICBjb25zdCB0YXJnZXQgPSAodm5vZGUudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldCh2bm9kZS5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgLy8gaWYgbXVsdGlwbGUgdGVsZXBvcnRzIHJlbmRlcmVkIHRvIHRoZSBzYW1lIHRhcmdldCBlbGVtZW50LCB3ZSBuZWVkIHRvXG4gICAgICAgIC8vIHBpY2sgdXAgZnJvbSB3aGVyZSB0aGUgbGFzdCB0ZWxlcG9ydCBmaW5pc2hlZCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBub2RlXG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0YXJnZXQuX2xwYSB8fCB0YXJnZXQuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgIGlmIChpc1RlbGVwb3J0RGlzYWJsZWQodm5vZGUucHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKG5leHRTaWJsaW5nKG5vZGUpLCB2bm9kZSwgcGFyZW50Tm9kZShub2RlKSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICAvLyBsb29rYWhlYWQgdW50aWwgd2UgZmluZCB0aGUgdGFyZ2V0IGFuY2hvclxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbm5vdCByZWx5IG9uIHJldHVybiB2YWx1ZSBvZiBoeWRyYXRlQ2hpbGRyZW4oKSBiZWNhdXNlIHRoZXJlXG4gICAgICAgICAgICAgICAgLy8gY291bGQgYmUgbmVzdGVkIHRlbGVwb3J0c1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRBbmNob3IgPSB0YXJnZXROb2RlO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0YXJnZXRBbmNob3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QW5jaG9yID0gbmV4dFNpYmxpbmcodGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEFuY2hvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QW5jaG9yLm5vZGVUeXBlID09PSA4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBbmNob3IuZGF0YSA9PT0gJ3RlbGVwb3J0IGFuY2hvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldEFuY2hvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5fbHBhID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUudGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh5ZHJhdGVDaGlsZHJlbih0YXJnZXROb2RlLCB2bm9kZSwgdGFyZ2V0LCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlQ3NzVmFycyh2bm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZS5hbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yKTtcbn1cbi8vIEZvcmNlLWNhc3RlZCBwdWJsaWMgdHlwaW5nIGZvciBoIGFuZCBUU1ggcHJvcHMgaW5mZXJlbmNlXG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcbmZ1bmN0aW9uIHVwZGF0ZUNzc1ZhcnModm5vZGUpIHtcbiAgICAvLyBwcmVzZW5jZSBvZiAudXQgbWV0aG9kIGluZGljYXRlcyBvd25lciBjb21wb25lbnQgdXNlcyBjc3MgdmFycy5cbiAgICAvLyBjb2RlIHBhdGggaGVyZSBjYW4gYXNzdW1lIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgY29uc3QgY3R4ID0gdm5vZGUuY3R4O1xuICAgIGlmIChjdHggJiYgY3R4LnV0KSB7XG4gICAgICAgIGxldCBub2RlID0gdm5vZGUuY2hpbGRyZW5bMF0uZWw7XG4gICAgICAgIHdoaWxlIChub2RlICE9PSB2bm9kZS50YXJnZXRBbmNob3IpIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKVxuICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXYtb3duZXInLCBjdHgudWlkKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGN0eC51dCgpO1xuICAgIH1cbn1cblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ0ZyYWdtZW50JyA6IHVuZGVmaW5lZCk7XG5jb25zdCBUZXh0ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdUZXh0JyA6IHVuZGVmaW5lZCk7XG5jb25zdCBDb21tZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdDb21tZW50JyA6IHVuZGVmaW5lZCk7XG5jb25zdCBTdGF0aWMgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ1N0YXRpYycgOiB1bmRlZmluZWQpO1xuLy8gU2luY2Ugdi1pZiBhbmQgdi1mb3IgYXJlIHRoZSB0d28gcG9zc2libGUgd2F5cyBub2RlIHN0cnVjdHVyZSBjYW4gZHluYW1pY2FsbHlcbi8vIGNoYW5nZSwgb25jZSB3ZSBjb25zaWRlciB2LWlmIGJyYW5jaGVzIGFuZCBlYWNoIHYtZm9yIGZyYWdtZW50IGEgYmxvY2ssIHdlXG4vLyBjYW4gZGl2aWRlIGEgdGVtcGxhdGUgaW50byBuZXN0ZWQgYmxvY2tzLCBhbmQgd2l0aGluIGVhY2ggYmxvY2sgdGhlIG5vZGVcbi8vIHN0cnVjdHVyZSB3b3VsZCBiZSBzdGFibGUuIFRoaXMgYWxsb3dzIHVzIHRvIHNraXAgbW9zdCBjaGlsZHJlbiBkaWZmaW5nXG4vLyBhbmQgb25seSB3b3JyeSBhYm91dCB0aGUgZHluYW1pYyBub2RlcyAoaW5kaWNhdGVkIGJ5IHBhdGNoIGZsYWdzKS5cbmNvbnN0IGJsb2NrU3RhY2sgPSBbXTtcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xuLyoqXG4gKiBPcGVuIGEgYmxvY2suXG4gKiBUaGlzIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBgY3JlYXRlQmxvY2tgLiBJdCBjYW5ub3QgYmUgcGFydCBvZiBgY3JlYXRlQmxvY2tgXG4gKiBiZWNhdXNlIHRoZSBjaGlsZHJlbiBvZiB0aGUgYmxvY2sgYXJlIGV2YWx1YXRlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYCBpdHNlbGZcbiAqIGlzIGNhbGxlZC4gVGhlIGdlbmVyYXRlZCBjb2RlIHR5cGljYWxseSBsb29rcyBsaWtlIHRoaXM6XG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAqICAgcmV0dXJuIChvcGVuQmxvY2soKSxjcmVhdGVCbG9jaygnZGl2JywgbnVsbCwgWy4uLl0pKVxuICogfVxuICogYGBgXG4gKiBkaXNhYmxlVHJhY2tpbmcgaXMgdHJ1ZSB3aGVuIGNyZWF0aW5nIGEgdi1mb3IgZnJhZ21lbnQgYmxvY2ssIHNpbmNlIGEgdi1mb3JcbiAqIGZyYWdtZW50IGFsd2F5cyBkaWZmcyBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gb3BlbkJsb2NrKGRpc2FibGVUcmFja2luZyA9IGZhbHNlKSB7XG4gICAgYmxvY2tTdGFjay5wdXNoKChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pKTtcbn1cbmZ1bmN0aW9uIGNsb3NlQmxvY2soKSB7XG4gICAgYmxvY2tTdGFjay5wb3AoKTtcbiAgICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcbn1cbi8vIFdoZXRoZXIgd2Ugc2hvdWxkIGJlIHRyYWNraW5nIGR5bmFtaWMgY2hpbGQgbm9kZXMgaW5zaWRlIGEgYmxvY2suXG4vLyBPbmx5IHRyYWNrcyB3aGVuIHRoaXMgdmFsdWUgaXMgPiAwXG4vLyBXZSBhcmUgbm90IHVzaW5nIGEgc2ltcGxlIGJvb2xlYW4gYmVjYXVzZSB0aGlzIHZhbHVlIG1heSBuZWVkIHRvIGJlXG4vLyBpbmNyZW1lbnRlZC9kZWNyZW1lbnRlZCBieSBuZXN0ZWQgdXNhZ2Ugb2Ygdi1vbmNlIChzZWUgYmVsb3cpXG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcbi8qKlxuICogQmxvY2sgdHJhY2tpbmcgc29tZXRpbWVzIG5lZWRzIHRvIGJlIGRpc2FibGVkLCBmb3IgZXhhbXBsZSBkdXJpbmcgdGhlXG4gKiBjcmVhdGlvbiBvZiBhIHRyZWUgdGhhdCBuZWVkcyB0byBiZSBjYWNoZWQgYnkgdi1vbmNlLiBUaGUgY29tcGlsZXIgZ2VuZXJhdGVzXG4gKiBjb2RlIGxpa2UgdGhpczpcbiAqXG4gKiBgYGAganNcbiAqIF9jYWNoZVsxXSB8fCAoXG4gKiAgIHNldEJsb2NrVHJhY2tpbmcoLTEpLFxuICogICBfY2FjaGVbMV0gPSBjcmVhdGVWTm9kZSguLi4pLFxuICogICBzZXRCbG9ja1RyYWNraW5nKDEpLFxuICogICBfY2FjaGVbMV1cbiAqIClcbiAqIGBgYFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldEJsb2NrVHJhY2tpbmcodmFsdWUpIHtcbiAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgKz0gdmFsdWU7XG59XG5mdW5jdGlvbiBzZXR1cEJsb2NrKHZub2RlKSB7XG4gICAgLy8gc2F2ZSBjdXJyZW50IGJsb2NrIGNoaWxkcmVuIG9uIHRoZSBibG9jayB2bm9kZVxuICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9XG4gICAgICAgIGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgPyBjdXJyZW50QmxvY2sgfHwgRU1QVFlfQVJSIDogbnVsbDtcbiAgICAvLyBjbG9zZSBibG9ja1xuICAgIGNsb3NlQmxvY2soKTtcbiAgICAvLyBhIGJsb2NrIGlzIGFsd2F5cyBnb2luZyB0byBiZSBwYXRjaGVkLCBzbyB0cmFjayBpdCBhcyBhIGNoaWxkIG9mIGl0c1xuICAgIC8vIHBhcmVudCBibG9ja1xuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudEJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHNoYXBlRmxhZykge1xuICAgIHJldHVybiBzZXR1cEJsb2NrKGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcsIHRydWUgLyogaXNCbG9jayAqLykpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBibG9jayByb290IHZub2RlLiBUYWtlcyB0aGUgc2FtZSBleGFjdCBhcmd1bWVudHMgYXMgYGNyZWF0ZVZOb2RlYC5cbiAqIEEgYmxvY2sgcm9vdCBrZWVwcyB0cmFjayBvZiBkeW5hbWljIG5vZGVzIHdpdGhpbiB0aGUgYmxvY2sgaW4gdGhlXG4gKiBgZHluYW1pY0NoaWxkcmVuYCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzKSB7XG4gICAgcmV0dXJuIHNldHVwQmxvY2soY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgdHJ1ZSAvKiBpc0Jsb2NrOiBwcmV2ZW50IGEgYmxvY2sgZnJvbSB0cmFja2luZyBpdHNlbGYgKi8pKTtcbn1cbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5fX3ZfaXNWTm9kZSA9PT0gdHJ1ZSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgbjIuc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLyAmJlxuICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuaGFzKG4yLnR5cGUpKSB7XG4gICAgICAgIC8vICM3MDQyLCBlbnN1cmUgdGhlIHZub2RlIGJlaW5nIHVubW91bnRlZCBkdXJpbmcgSE1SXG4gICAgICAgIC8vIGJpdHdpc2Ugb3BlcmF0aW9ucyB0byByZW1vdmUga2VlcCBhbGl2ZSBmbGFnc1xuICAgICAgICBuMS5zaGFwZUZsYWcgJj0gfjI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcbiAgICAgICAgbjIuc2hhcGVGbGFnICY9IH41MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLztcbiAgICAgICAgLy8gSE1SIG9ubHk6IGlmIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gaG90LXVwZGF0ZWQsIGZvcmNlIGEgcmVsb2FkLlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuMS50eXBlID09PSBuMi50eXBlICYmIG4xLmtleSA9PT0gbjIua2V5O1xufVxubGV0IHZub2RlQXJnc1RyYW5zZm9ybWVyO1xuLyoqXG4gKiBJbnRlcm5hbCBBUEkgZm9yIHJlZ2lzdGVyaW5nIGFuIGFyZ3VtZW50cyB0cmFuc2Zvcm0gZm9yIGNyZWF0ZVZOb2RlXG4gKiB1c2VkIGZvciBjcmVhdGluZyBzdHVicyBpbiB0aGUgdGVzdC11dGlsc1xuICogSXQgaXMgKmludGVybmFsKiBidXQgbmVlZHMgdG8gYmUgZXhwb3NlZCBmb3IgdGVzdC11dGlscyB0byBwaWNrIHVwIHByb3BlclxuICogdHlwaW5nc1xuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1WTm9kZUFyZ3ModHJhbnNmb3JtZXIpIHtcbiAgICB2bm9kZUFyZ3NUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xufVxuY29uc3QgY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA9ICguLi5hcmdzKSA9PiB7XG4gICAgcmV0dXJuIF9jcmVhdGVWTm9kZSguLi4odm5vZGVBcmdzVHJhbnNmb3JtZXJcbiAgICAgICAgPyB2bm9kZUFyZ3NUcmFuc2Zvcm1lcihhcmdzLCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpXG4gICAgICAgIDogYXJncykpO1xufTtcbmNvbnN0IEludGVybmFsT2JqZWN0S2V5ID0gYF9fdkludGVybmFsYDtcbmNvbnN0IG5vcm1hbGl6ZUtleSA9ICh7IGtleSB9KSA9PiBrZXkgIT0gbnVsbCA/IGtleSA6IG51bGw7XG5jb25zdCBub3JtYWxpemVSZWYgPSAoeyByZWYsIHJlZl9rZXksIHJlZl9mb3IgfSkgPT4ge1xuICAgIHJldHVybiAocmVmICE9IG51bGxcbiAgICAgICAgPyBpc1N0cmluZyhyZWYpIHx8IGlzUmVmKHJlZikgfHwgaXNGdW5jdGlvbihyZWYpXG4gICAgICAgICAgICA/IHsgaTogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCByOiByZWYsIGs6IHJlZl9rZXksIGY6ICEhcmVmX2ZvciB9XG4gICAgICAgICAgICA6IHJlZlxuICAgICAgICA6IG51bGwpO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcyA9IG51bGwsIGNoaWxkcmVuID0gbnVsbCwgcGF0Y2hGbGFnID0gMCwgZHluYW1pY1Byb3BzID0gbnVsbCwgc2hhcGVGbGFnID0gdHlwZSA9PT0gRnJhZ21lbnQgPyAwIDogMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8sIGlzQmxvY2tOb2RlID0gZmFsc2UsIG5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uID0gZmFsc2UpIHtcbiAgICBjb25zdCB2bm9kZSA9IHtcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXG4gICAgICAgIF9fdl9za2lwOiB0cnVlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAga2V5OiBwcm9wcyAmJiBub3JtYWxpemVLZXkocHJvcHMpLFxuICAgICAgICByZWY6IHByb3BzICYmIG5vcm1hbGl6ZVJlZihwcm9wcyksXG4gICAgICAgIHNjb3BlSWQ6IGN1cnJlbnRTY29wZUlkLFxuICAgICAgICBzbG90U2NvcGVJZHM6IG51bGwsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICAgIHN1c3BlbnNlOiBudWxsLFxuICAgICAgICBzc0NvbnRlbnQ6IG51bGwsXG4gICAgICAgIHNzRmFsbGJhY2s6IG51bGwsXG4gICAgICAgIGRpcnM6IG51bGwsXG4gICAgICAgIHRyYW5zaXRpb246IG51bGwsXG4gICAgICAgIGVsOiBudWxsLFxuICAgICAgICBhbmNob3I6IG51bGwsXG4gICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiBudWxsLFxuICAgICAgICBzdGF0aWNDb3VudDogMCxcbiAgICAgICAgc2hhcGVGbGFnLFxuICAgICAgICBwYXRjaEZsYWcsXG4gICAgICAgIGR5bmFtaWNQcm9wcyxcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuOiBudWxsLFxuICAgICAgICBhcHBDb250ZXh0OiBudWxsLFxuICAgICAgICBjdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZVxuICAgIH07XG4gICAgaWYgKG5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uKSB7XG4gICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbik7XG4gICAgICAgIC8vIG5vcm1hbGl6ZSBzdXNwZW5zZSBjaGlsZHJlblxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgICAgICAvLyBjb21waWxlZCBlbGVtZW50IHZub2RlIC0gaWYgY2hpbGRyZW4gaXMgcGFzc2VkLCBvbmx5IHBvc3NpYmxlIHR5cGVzIGFyZVxuICAgICAgICAvLyBzdHJpbmcgb3IgQXJyYXkuXG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSBpc1N0cmluZyhjaGlsZHJlbilcbiAgICAgICAgICAgID8gOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi9cbiAgICAgICAgICAgIDogMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLztcbiAgICB9XG4gICAgLy8gdmFsaWRhdGUga2V5XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB2bm9kZS5rZXkgIT09IHZub2RlLmtleSkge1xuICAgICAgICB3YXJuKGBWTm9kZSBjcmVhdGVkIHdpdGggaW52YWxpZCBrZXkgKE5hTikuIFZOb2RlIHR5cGU6YCwgdm5vZGUudHlwZSk7XG4gICAgfVxuICAgIC8vIHRyYWNrIHZub2RlIGZvciBibG9jayB0cmVlXG4gICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiZcbiAgICAgICAgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXG4gICAgICAgICFpc0Jsb2NrTm9kZSAmJlxuICAgICAgICAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcbiAgICAgICAgY3VycmVudEJsb2NrICYmXG4gICAgICAgIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXG4gICAgICAgIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxuICAgICAgICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cbiAgICAgICAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxuICAgICAgICAodm5vZGUucGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSAmJlxuICAgICAgICAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcbiAgICAgICAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cbiAgICAgICAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovKSB7XG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlO1xufVxuY29uc3QgY3JlYXRlVk5vZGUgPSAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA6IF9jcmVhdGVWTm9kZSk7XG5mdW5jdGlvbiBfY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIGlzQmxvY2tOb2RlID0gZmFsc2UpIHtcbiAgICBpZiAoIXR5cGUgfHwgdHlwZSA9PT0gTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0eXBlKSB7XG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHZub2RlIHR5cGUgd2hlbiBjcmVhdGluZyB2bm9kZTogJHt0eXBlfS5gKTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlID0gQ29tbWVudDtcbiAgICB9XG4gICAgaWYgKGlzVk5vZGUodHlwZSkpIHtcbiAgICAgICAgLy8gY3JlYXRlVk5vZGUgcmVjZWl2aW5nIGFuIGV4aXN0aW5nIHZub2RlLiBUaGlzIGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgICAvLyA8Y29tcG9uZW50IDppcz1cInZub2RlXCIvPlxuICAgICAgICAvLyAjMjA3OCBtYWtlIHN1cmUgdG8gbWVyZ2UgcmVmcyBkdXJpbmcgdGhlIGNsb25lIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmcgaXRcbiAgICAgICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh0eXBlLCBwcm9wcywgdHJ1ZSAvKiBtZXJnZVJlZjogdHJ1ZSAqLyk7XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4oY2xvbmVkLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgIWlzQmxvY2tOb2RlICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgICAgICAgaWYgKGNsb25lZC5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEJsb2NrW2N1cnJlbnRCbG9jay5pbmRleE9mKHR5cGUpXSA9IGNsb25lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKGNsb25lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xvbmVkLnBhdGNoRmxhZyB8PSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi87XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuICAgIC8vIGNsYXNzIGNvbXBvbmVudCBub3JtYWxpemF0aW9uLlxuICAgIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XG4gICAgICAgIHR5cGUgPSB0eXBlLl9fdmNjT3B0cztcbiAgICB9XG4gICAgLy8gY2xhc3MgJiBzdHlsZSBub3JtYWxpemF0aW9uLlxuICAgIGlmIChwcm9wcykge1xuICAgICAgICAvLyBmb3IgcmVhY3RpdmUgb3IgcHJveHkgb2JqZWN0cywgd2UgbmVlZCB0byBjbG9uZSBpdCB0byBlbmFibGUgbXV0YXRpb24uXG4gICAgICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcbiAgICAgICAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XG4gICAgICAgIGlmIChrbGFzcyAmJiAhaXNTdHJpbmcoa2xhc3MpKSB7XG4gICAgICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3Qoc3R5bGUpKSB7XG4gICAgICAgICAgICAvLyByZWFjdGl2ZSBzdGF0ZSBvYmplY3RzIG5lZWQgdG8gYmUgY2xvbmVkIHNpbmNlIHRoZXkgYXJlIGxpa2VseSB0byBiZVxuICAgICAgICAgICAgLy8gbXV0YXRlZFxuICAgICAgICAgICAgaWYgKGlzUHJveHkoc3R5bGUpICYmICFpc0FycmF5KHN0eWxlKSkge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gZXh0ZW5kKHt9LCBzdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlbmNvZGUgdGhlIHZub2RlIHR5cGUgaW5mb3JtYXRpb24gaW50byBhIGJpdG1hcFxuICAgIGNvbnN0IHNoYXBlRmxhZyA9IGlzU3RyaW5nKHR5cGUpXG4gICAgICAgID8gMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi9cbiAgICAgICAgOiBpc1N1c3BlbnNlKHR5cGUpXG4gICAgICAgICAgICA/IDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovXG4gICAgICAgICAgICA6IGlzVGVsZXBvcnQodHlwZSlcbiAgICAgICAgICAgICAgICA/IDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi9cbiAgICAgICAgICAgICAgICA6IGlzT2JqZWN0KHR5cGUpXG4gICAgICAgICAgICAgICAgICAgID8gNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqL1xuICAgICAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24odHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMiAvKiBTaGFwZUZsYWdzLkZVTkNUSU9OQUxfQ09NUE9ORU5UICovXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovICYmIGlzUHJveHkodHlwZSkpIHtcbiAgICAgICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xuICAgICAgICB3YXJuKGBWdWUgcmVjZWl2ZWQgYSBDb21wb25lbnQgd2hpY2ggd2FzIG1hZGUgYSByZWFjdGl2ZSBvYmplY3QuIFRoaXMgY2FuIGAgK1xuICAgICAgICAgICAgYGxlYWQgdG8gdW5uZWNlc3NhcnkgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQsIGFuZCBzaG91bGQgYmUgYXZvaWRlZCBieSBgICtcbiAgICAgICAgICAgIGBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgYCArXG4gICAgICAgICAgICBgaW5zdGVhZCBvZiBcXGByZWZcXGAuYCwgYFxcbkNvbXBvbmVudCB0aGF0IHdhcyBtYWRlIHJlYWN0aXZlOiBgLCB0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcsIGlzQmxvY2tOb2RlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcykge1xuICAgIGlmICghcHJvcHMpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiBpc1Byb3h5KHByb3BzKSB8fCBJbnRlcm5hbE9iamVjdEtleSBpbiBwcm9wc1xuICAgICAgICA/IGV4dGVuZCh7fSwgcHJvcHMpXG4gICAgICAgIDogcHJvcHM7XG59XG5mdW5jdGlvbiBjbG9uZVZOb2RlKHZub2RlLCBleHRyYVByb3BzLCBtZXJnZVJlZiA9IGZhbHNlKSB7XG4gICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IE5PVCB1c2luZyBzcHJlYWQgb3IgZXh0ZW5kIHRvIGF2b2lkIHRoZSBydW50aW1lXG4gICAgLy8ga2V5IGVudW1lcmF0aW9uIGNvc3QuXG4gICAgY29uc3QgeyBwcm9wcywgcmVmLCBwYXRjaEZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgICBjb25zdCBtZXJnZWRQcm9wcyA9IGV4dHJhUHJvcHMgPyBtZXJnZVByb3BzKHByb3BzIHx8IHt9LCBleHRyYVByb3BzKSA6IHByb3BzO1xuICAgIGNvbnN0IGNsb25lZCA9IHtcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXG4gICAgICAgIF9fdl9za2lwOiB0cnVlLFxuICAgICAgICB0eXBlOiB2bm9kZS50eXBlLFxuICAgICAgICBwcm9wczogbWVyZ2VkUHJvcHMsXG4gICAgICAgIGtleTogbWVyZ2VkUHJvcHMgJiYgbm9ybWFsaXplS2V5KG1lcmdlZFByb3BzKSxcbiAgICAgICAgcmVmOiBleHRyYVByb3BzICYmIGV4dHJhUHJvcHMucmVmXG4gICAgICAgICAgICA/IC8vICMyMDc4IGluIHRoZSBjYXNlIG9mIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIiByZWY9XCJleHRyYVwiLz5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXRzZWxmIGFscmVhZHkgaGFzIGEgcmVmLCBjbG9uZVZOb2RlIHdpbGwgbmVlZCB0byBtZXJnZVxuICAgICAgICAgICAgICAgIC8vIHRoZSByZWZzIHNvIHRoZSBzaW5nbGUgdm5vZGUgY2FuIGJlIHNldCBvbiBtdWx0aXBsZSByZWZzXG4gICAgICAgICAgICAgICAgbWVyZ2VSZWYgJiYgcmVmXG4gICAgICAgICAgICAgICAgICAgID8gaXNBcnJheShyZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlZi5jb25jYXQobm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXG4gICAgICAgICAgICA6IHJlZixcbiAgICAgICAgc2NvcGVJZDogdm5vZGUuc2NvcGVJZCxcbiAgICAgICAgc2xvdFNjb3BlSWRzOiB2bm9kZS5zbG90U2NvcGVJZHMsXG4gICAgICAgIGNoaWxkcmVuOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGF0Y2hGbGFnID09PSAtMSAvKiBQYXRjaEZsYWdzLkhPSVNURUQgKi8gJiYgaXNBcnJheShjaGlsZHJlbilcbiAgICAgICAgICAgID8gY2hpbGRyZW4ubWFwKGRlZXBDbG9uZVZOb2RlKVxuICAgICAgICAgICAgOiBjaGlsZHJlbixcbiAgICAgICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXG4gICAgICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxuICAgICAgICBzdGF0aWNDb3VudDogdm5vZGUuc3RhdGljQ291bnQsXG4gICAgICAgIHNoYXBlRmxhZzogdm5vZGUuc2hhcGVGbGFnLFxuICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xuICAgICAgICAvLyBleGlzdGluZyBwYXRjaCBmbGFnIHRvIGJlIHJlbGlhYmxlIGFuZCBuZWVkIHRvIGFkZCB0aGUgRlVMTF9QUk9QUyBmbGFnLlxuICAgICAgICAvLyBub3RlOiBwcmVzZXJ2ZSBmbGFnIGZvciBmcmFnbWVudHMgc2luY2UgdGhleSB1c2UgdGhlIGZsYWcgZm9yIGNoaWxkcmVuXG4gICAgICAgIC8vIGZhc3QgcGF0aHMgb25seS5cbiAgICAgICAgcGF0Y2hGbGFnOiBleHRyYVByb3BzICYmIHZub2RlLnR5cGUgIT09IEZyYWdtZW50XG4gICAgICAgICAgICA/IHBhdGNoRmxhZyA9PT0gLTEgLy8gaG9pc3RlZCBub2RlXG4gICAgICAgICAgICAgICAgPyAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi9cbiAgICAgICAgICAgICAgICA6IHBhdGNoRmxhZyB8IDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqL1xuICAgICAgICAgICAgOiBwYXRjaEZsYWcsXG4gICAgICAgIGR5bmFtaWNQcm9wczogdm5vZGUuZHluYW1pY1Byb3BzLFxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgYXBwQ29udGV4dDogdm5vZGUuYXBwQ29udGV4dCxcbiAgICAgICAgZGlyczogdm5vZGUuZGlycyxcbiAgICAgICAgdHJhbnNpdGlvbjogdm5vZGUudHJhbnNpdGlvbixcbiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIHRlY2huaWNhbGx5IG9ubHkgYmUgbm9uLW51bGwgb24gbW91bnRlZCBWTm9kZXMuIEhvd2V2ZXIsXG4gICAgICAgIC8vIHRoZXkgKnNob3VsZCogYmUgY29waWVkIGZvciBrZXB0LWFsaXZlIHZub2Rlcy4gU28gd2UganVzdCBhbHdheXMgY29weVxuICAgICAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXG4gICAgICAgIC8vIHRoZXkgd2lsbCBzaW1wbHkgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgIGNvbXBvbmVudDogdm5vZGUuY29tcG9uZW50LFxuICAgICAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXG4gICAgICAgIHNzQ29udGVudDogdm5vZGUuc3NDb250ZW50ICYmIGNsb25lVk5vZGUodm5vZGUuc3NDb250ZW50KSxcbiAgICAgICAgc3NGYWxsYmFjazogdm5vZGUuc3NGYWxsYmFjayAmJiBjbG9uZVZOb2RlKHZub2RlLnNzRmFsbGJhY2spLFxuICAgICAgICBlbDogdm5vZGUuZWwsXG4gICAgICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yLFxuICAgICAgICBjdHg6IHZub2RlLmN0eCxcbiAgICAgICAgY2U6IHZub2RlLmNlXG4gICAgfTtcbiAgICByZXR1cm4gY2xvbmVkO1xufVxuLyoqXG4gKiBEZXYgb25seSwgZm9yIEhNUiBvZiBob2lzdGVkIHZub2RlcyByZXVzZWQgaW4gdi1mb3JcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS9pc3N1ZXMvMjAyMlxuICovXG5mdW5jdGlvbiBkZWVwQ2xvbmVWTm9kZSh2bm9kZSkge1xuICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIGlmIChpc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgICBjbG9uZWQuY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmVkO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9ICcgJywgZmxhZyA9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcbiAgICAvLyBBIHN0YXRpYyB2bm9kZSBjYW4gY29udGFpbiBtdWx0aXBsZSBzdHJpbmdpZmllZCBlbGVtZW50cywgYW5kIHRoZSBudW1iZXJcbiAgICAvLyBvZiBlbGVtZW50cyBpcyBuZWNlc3NhcnkgZm9yIGh5ZHJhdGlvbi5cbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKFN0YXRpYywgbnVsbCwgY29udGVudCk7XG4gICAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xuICAgIHJldHVybiB2bm9kZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tbWVudFZOb2RlKHRleHQgPSAnJywgXG4vLyB3aGVuIHVzZWQgYXMgdGhlIHYtZWxzZSBicmFuY2gsIHRoZSBjb21tZW50IG5vZGUgbXVzdCBiZSBjcmVhdGVkIGFzIGFcbi8vIGJsb2NrIHRvIGVuc3VyZSBjb3JyZWN0IHVwZGF0ZXMuXG5hc0Jsb2NrID0gZmFsc2UpIHtcbiAgICByZXR1cm4gYXNCbG9ja1xuICAgICAgICA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCwgbnVsbCwgdGV4dCkpXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVWTm9kZShjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIC8vIGVtcHR5IHBsYWNlaG9sZGVyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgLy8gZnJhZ21lbnRcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKEZyYWdtZW50LCBudWxsLCBcbiAgICAgICAgLy8gIzM2NjYsIGF2b2lkIHJlZmVyZW5jZSBwb2xsdXRpb24gd2hlbiByZXVzaW5nIHZub2RlXG4gICAgICAgIGNoaWxkLnNsaWNlKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIGFscmVhZHkgdm5vZGUsIHRoaXMgc2hvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiBzaW5jZSBjb21waWxlZCB0ZW1wbGF0ZXNcbiAgICAgICAgLy8gYWx3YXlzIHByb2R1Y2UgYWxsLXZub2RlIGNoaWxkcmVuIGFycmF5c1xuICAgICAgICByZXR1cm4gY2xvbmVJZk1vdW50ZWQoY2hpbGQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gc3RyaW5ncyBhbmQgbnVtYmVyc1xuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgU3RyaW5nKGNoaWxkKSk7XG4gICAgfVxufVxuLy8gb3B0aW1pemVkIG5vcm1hbGl6YXRpb24gZm9yIHRlbXBsYXRlLWNvbXBpbGVkIHJlbmRlciBmbnNcbmZ1bmN0aW9uIGNsb25lSWZNb3VudGVkKGNoaWxkKSB7XG4gICAgcmV0dXJuIChjaGlsZC5lbCA9PT0gbnVsbCAmJiBjaGlsZC5wYXRjaEZsYWcgIT09IC0xIC8qIFBhdGNoRmxhZ3MuSE9JU1RFRCAqLykgfHxcbiAgICAgICAgY2hpbGQubWVtb1xuICAgICAgICA/IGNoaWxkXG4gICAgICAgIDogY2xvbmVWTm9kZShjaGlsZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pIHtcbiAgICBsZXQgdHlwZSA9IDA7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgdHlwZSA9IDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi87XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmICgxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyB8IDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pKSB7XG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgc2xvdCB0byBwbGFpbiBjaGlsZHJlbiBmb3IgcGxhaW4gZWxlbWVudCBhbmQgVGVsZXBvcnRcbiAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBjaGlsZHJlbi5kZWZhdWx0O1xuICAgICAgICAgICAgaWYgKHNsb3QpIHtcbiAgICAgICAgICAgICAgICAvLyBfYyBtYXJrZXIgaXMgYWRkZWQgYnkgd2l0aEN0eCgpIGluZGljYXRpbmcgdGhpcyBpcyBhIGNvbXBpbGVkIHNsb3RcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBzbG90KCkpO1xuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgKHNsb3QuX2QgPSB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSAzMiAvKiBTaGFwZUZsYWdzLlNMT1RTX0NISUxEUkVOICovO1xuICAgICAgICAgICAgY29uc3Qgc2xvdEZsYWcgPSBjaGlsZHJlbi5fO1xuICAgICAgICAgICAgaWYgKCFzbG90RmxhZyAmJiAhKEludGVybmFsT2JqZWN0S2V5IGluIGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLl9jdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzbG90RmxhZyA9PT0gMyAvKiBTbG90RmxhZ3MuRk9SV0FSREVEICovICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIC8vIGEgY2hpbGQgY29tcG9uZW50IHJlY2VpdmVzIGZvcndhcmRlZCBzbG90cyBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICAgICAgLy8gaXRzIHNsb3QgdHlwZSBpcyBkZXRlcm1pbmVkIGJ5IGl0cyBwYXJlbnQncyBzbG90IHR5cGUuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5zbG90cy5fID09PSAxIC8qIFNsb3RGbGFncy5TVEFCTEUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uXyA9IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqLztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAyIC8qIFNsb3RGbGFncy5EWU5BTUlDICovO1xuICAgICAgICAgICAgICAgICAgICB2bm9kZS5wYXRjaEZsYWcgfD0gMTAyNCAvKiBQYXRjaEZsYWdzLkRZTkFNSUNfU0xPVFMgKi87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgICAgIGNoaWxkcmVuID0geyBkZWZhdWx0OiBjaGlsZHJlbiwgX2N0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIH07XG4gICAgICAgIHR5cGUgPSAzMiAvKiBTaGFwZUZsYWdzLlNMT1RTX0NISUxEUkVOICovO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgICAvLyBmb3JjZSB0ZWxlcG9ydCBjaGlsZHJlbiB0byBhcnJheSBzbyBpdCBjYW4gYmUgbW92ZWQgYXJvdW5kXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICB0eXBlID0gMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLztcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHlwZSA9IDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZub2RlLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdm5vZGUuc2hhcGVGbGFnIHw9IHR5cGU7XG59XG5mdW5jdGlvbiBtZXJnZVByb3BzKC4uLmFyZ3MpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRvTWVyZ2UpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0LmNsYXNzICE9PSB0b01lcmdlLmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKFtyZXQuY2xhc3MsIHRvTWVyZ2UuY2xhc3NdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgICByZXQuc3R5bGUgPSBub3JtYWxpemVTdHlsZShbcmV0LnN0eWxlLCB0b01lcmdlLnN0eWxlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHJldFtrZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluY29taW5nID0gdG9NZXJnZVtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChpbmNvbWluZyAmJlxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZyAhPT0gaW5jb21pbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgIShpc0FycmF5KGV4aXN0aW5nKSAmJiBleGlzdGluZy5pbmNsdWRlcyhpbmNvbWluZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBpbmNvbWluZylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5jb21pbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldFtrZXldID0gdG9NZXJnZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDcgLyogRXJyb3JDb2Rlcy5WTk9ERV9IT09LICovLCBbXG4gICAgICAgIHZub2RlLFxuICAgICAgICBwcmV2Vk5vZGVcbiAgICBdKTtcbn1cblxuY29uc3QgZW1wdHlBcHBDb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xubGV0IHVpZCA9IDA7XG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSh2bm9kZSwgcGFyZW50LCBzdXNwZW5zZSkge1xuICAgIGNvbnN0IHR5cGUgPSB2bm9kZS50eXBlO1xuICAgIC8vIGluaGVyaXQgcGFyZW50IGFwcCBjb250ZXh0IC0gb3IgLSBpZiByb290LCBhZG9wdCBmcm9tIHJvb3Qgdm5vZGVcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gKHBhcmVudCA/IHBhcmVudC5hcHBDb250ZXh0IDogdm5vZGUuYXBwQ29udGV4dCkgfHwgZW1wdHlBcHBDb250ZXh0O1xuICAgIGNvbnN0IGluc3RhbmNlID0ge1xuICAgICAgICB1aWQ6IHVpZCsrLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBhcHBDb250ZXh0LFxuICAgICAgICByb290OiBudWxsLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBzdWJUcmVlOiBudWxsLFxuICAgICAgICBlZmZlY3Q6IG51bGwsXG4gICAgICAgIHVwZGF0ZTogbnVsbCxcbiAgICAgICAgc2NvcGU6IG5ldyBFZmZlY3RTY29wZSh0cnVlIC8qIGRldGFjaGVkICovKSxcbiAgICAgICAgcmVuZGVyOiBudWxsLFxuICAgICAgICBwcm94eTogbnVsbCxcbiAgICAgICAgZXhwb3NlZDogbnVsbCxcbiAgICAgICAgZXhwb3NlUHJveHk6IG51bGwsXG4gICAgICAgIHdpdGhQcm94eTogbnVsbCxcbiAgICAgICAgcHJvdmlkZXM6IHBhcmVudCA/IHBhcmVudC5wcm92aWRlcyA6IE9iamVjdC5jcmVhdGUoYXBwQ29udGV4dC5wcm92aWRlcyksXG4gICAgICAgIGFjY2Vzc0NhY2hlOiBudWxsLFxuICAgICAgICByZW5kZXJDYWNoZTogW10sXG4gICAgICAgIC8vIGxvY2FsIHJlc29sdmVkIGFzc2V0c1xuICAgICAgICBjb21wb25lbnRzOiBudWxsLFxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgICAgICAvLyByZXNvbHZlZCBwcm9wcyBhbmQgZW1pdHMgb3B0aW9uc1xuICAgICAgICBwcm9wc09wdGlvbnM6IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcbiAgICAgICAgZW1pdHNPcHRpb25zOiBub3JtYWxpemVFbWl0c09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgICAgIC8vIGVtaXRcbiAgICAgICAgZW1pdDogbnVsbCxcbiAgICAgICAgZW1pdHRlZDogbnVsbCxcbiAgICAgICAgLy8gcHJvcHMgZGVmYXVsdCB2YWx1ZVxuICAgICAgICBwcm9wc0RlZmF1bHRzOiBFTVBUWV9PQkosXG4gICAgICAgIC8vIGluaGVyaXRBdHRyc1xuICAgICAgICBpbmhlcml0QXR0cnM6IHR5cGUuaW5oZXJpdEF0dHJzLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBjdHg6IEVNUFRZX09CSixcbiAgICAgICAgZGF0YTogRU1QVFlfT0JKLFxuICAgICAgICBwcm9wczogRU1QVFlfT0JKLFxuICAgICAgICBhdHRyczogRU1QVFlfT0JKLFxuICAgICAgICBzbG90czogRU1QVFlfT0JKLFxuICAgICAgICByZWZzOiBFTVBUWV9PQkosXG4gICAgICAgIHNldHVwU3RhdGU6IEVNUFRZX09CSixcbiAgICAgICAgc2V0dXBDb250ZXh0OiBudWxsLFxuICAgICAgICAvLyBzdXNwZW5zZSByZWxhdGVkXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXG4gICAgICAgIGFzeW5jRGVwOiBudWxsLFxuICAgICAgICBhc3luY1Jlc29sdmVkOiBmYWxzZSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlIGhvb2tzXG4gICAgICAgIC8vIG5vdCB1c2luZyBlbnVtcyBoZXJlIGJlY2F1c2UgaXQgcmVzdWx0cyBpbiBjb21wdXRlZCBwcm9wZXJ0aWVzXG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcbiAgICAgICAgaXNEZWFjdGl2YXRlZDogZmFsc2UsXG4gICAgICAgIGJjOiBudWxsLFxuICAgICAgICBjOiBudWxsLFxuICAgICAgICBibTogbnVsbCxcbiAgICAgICAgbTogbnVsbCxcbiAgICAgICAgYnU6IG51bGwsXG4gICAgICAgIHU6IG51bGwsXG4gICAgICAgIHVtOiBudWxsLFxuICAgICAgICBidW06IG51bGwsXG4gICAgICAgIGRhOiBudWxsLFxuICAgICAgICBhOiBudWxsLFxuICAgICAgICBydGc6IG51bGwsXG4gICAgICAgIHJ0YzogbnVsbCxcbiAgICAgICAgZWM6IG51bGwsXG4gICAgICAgIHNwOiBudWxsXG4gICAgfTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGluc3RhbmNlLmN0eCA9IGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UuY3R4ID0geyBfOiBpbnN0YW5jZSB9O1xuICAgIH1cbiAgICBpbnN0YW5jZS5yb290ID0gcGFyZW50ID8gcGFyZW50LnJvb3QgOiBpbnN0YW5jZTtcbiAgICBpbnN0YW5jZS5lbWl0ID0gZW1pdC5iaW5kKG51bGwsIGluc3RhbmNlKTtcbiAgICAvLyBhcHBseSBjdXN0b20gZWxlbWVudCBzcGVjaWFsIGhhbmRsaW5nXG4gICAgaWYgKHZub2RlLmNlKSB7XG4gICAgICAgIHZub2RlLmNlKGluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxubGV0IGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XG5jb25zdCBnZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuY29uc3Qgc2V0Q3VycmVudEluc3RhbmNlID0gKGluc3RhbmNlKSA9PiB7XG4gICAgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgaW5zdGFuY2Uuc2NvcGUub24oKTtcbn07XG5jb25zdCB1bnNldEN1cnJlbnRJbnN0YW5jZSA9ICgpID0+IHtcbiAgICBjdXJyZW50SW5zdGFuY2UgJiYgY3VycmVudEluc3RhbmNlLnNjb3BlLm9mZigpO1xuICAgIGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XG59O1xuY29uc3QgaXNCdWlsdEluVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcpO1xuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbmZpZykge1xuICAgIGNvbnN0IGFwcElzTmF0aXZlVGFnID0gY29uZmlnLmlzTmF0aXZlVGFnIHx8IE5PO1xuICAgIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgYXBwSXNOYXRpdmVUYWcobmFtZSkpIHtcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCBpZDogJyArIG5hbWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLztcbn1cbmxldCBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcbmZ1bmN0aW9uIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUiA9IGZhbHNlKSB7XG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gaXNTU1I7XG4gICAgY29uc3QgeyBwcm9wcywgY2hpbGRyZW4gfSA9IGluc3RhbmNlLnZub2RlO1xuICAgIGNvbnN0IGlzU3RhdGVmdWwgPSBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKTtcbiAgICBpbml0UHJvcHMoaW5zdGFuY2UsIHByb3BzLCBpc1N0YXRlZnVsLCBpc1NTUik7XG4gICAgaW5pdFNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBpc1N0YXRlZnVsXG4gICAgICAgID8gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xuICAgIHJldHVybiBzZXR1cFJlc3VsdDtcbn1cbmZ1bmN0aW9uIHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpZiAoQ29tcG9uZW50Lm5hbWUpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShDb21wb25lbnQubmFtZSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wb25lbnQuY29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWVzW2ldLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXBvbmVudC5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5kaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wb25lbnQuY29tcGlsZXJPcHRpb25zICYmIGlzUnVudGltZU9ubHkoKSkge1xuICAgICAgICAgICAgd2FybihgXCJjb21waWxlck9wdGlvbnNcIiBpcyBvbmx5IHN1cHBvcnRlZCB3aGVuIHVzaW5nIGEgYnVpbGQgb2YgVnVlIHRoYXQgYCArXG4gICAgICAgICAgICAgICAgYGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyLiBTaW5jZSB5b3UgYXJlIHVzaW5nIGEgcnVudGltZS1vbmx5IGAgK1xuICAgICAgICAgICAgICAgIGBidWlsZCwgdGhlIG9wdGlvbnMgc2hvdWxkIGJlIHBhc3NlZCB2aWEgeW91ciBidWlsZCB0b29sIGNvbmZpZyBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIDAuIGNyZWF0ZSByZW5kZXIgcHJveHkgcHJvcGVydHkgYWNjZXNzIGNhY2hlXG4gICAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8vIDEuIGNyZWF0ZSBwdWJsaWMgaW5zdGFuY2UgLyByZW5kZXIgcHJveHlcbiAgICAvLyBhbHNvIG1hcmsgaXQgcmF3IHNvIGl0J3MgbmV2ZXIgb2JzZXJ2ZWRcbiAgICBpbnN0YW5jZS5wcm94eSA9IG1hcmtSYXcobmV3IFByb3h5KGluc3RhbmNlLmN0eCwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKSk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgfVxuICAgIC8vIDIuIGNhbGwgc2V0dXAoKVxuICAgIGNvbnN0IHsgc2V0dXAgfSA9IENvbXBvbmVudDtcbiAgICBpZiAoc2V0dXApIHtcbiAgICAgICAgY29uc3Qgc2V0dXBDb250ZXh0ID0gKGluc3RhbmNlLnNldHVwQ29udGV4dCA9XG4gICAgICAgICAgICBzZXR1cC5sZW5ndGggPiAxID8gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSA6IG51bGwpO1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHNldHVwLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovLCBbKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnByb3BzKSA6IGluc3RhbmNlLnByb3BzLCBzZXR1cENvbnRleHRdKTtcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHNldHVwUmVzdWx0KSkge1xuICAgICAgICAgICAgc2V0dXBSZXN1bHQudGhlbih1bnNldEN1cnJlbnRJbnN0YW5jZSwgdW5zZXRDdXJyZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKGlzU1NSKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm9taXNlIHNvIHNlcnZlci1yZW5kZXJlciBjYW4gd2FpdCBvbiBpdFxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzb2x2ZWRSZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0LCBpc1NTUik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFzeW5jIHNldHVwIHJldHVybmVkIFByb21pc2UuXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBoZXJlIGFuZCB3YWl0IGZvciByZS1lbnRyeS5cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCA9IHNldHVwUmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWluc3RhbmNlLnN1c3BlbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBDb21wb25lbnQubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ0Fub255bW91cyc7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCA8JHtuYW1lfT46IHNldHVwIGZ1bmN0aW9uIHJldHVybmVkIGEgcHJvbWlzZSwgYnV0IG5vIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYDxTdXNwZW5zZT4gYm91bmRhcnkgd2FzIGZvdW5kIGluIHRoZSBwYXJlbnQgY29tcG9uZW50IHRyZWUuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYEEgY29tcG9uZW50IHdpdGggYXN5bmMgc2V0dXAoKSBtdXN0IGJlIG5lc3RlZCBpbiBhIDxTdXNwZW5zZT4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgaW4gb3JkZXIgdG8gYmUgcmVuZGVyZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xuICAgIGlmIChpc0Z1bmN0aW9uKHNldHVwUmVzdWx0KSkge1xuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBhbiBpbmxpbmUgcmVuZGVyIGZ1bmN0aW9uXG4gICAgICAgIGlmIChpbnN0YW5jZS50eXBlLl9fc3NySW5saW5lUmVuZGVyKSB7XG4gICAgICAgICAgICAvLyB3aGVuIHRoZSBmdW5jdGlvbidzIG5hbWUgaXMgYHNzclJlbmRlcmAgKGNvbXBpbGVkIGJ5IFNGQyBpbmxpbmUgbW9kZSksXG4gICAgICAgICAgICAvLyBzZXQgaXQgYXMgc3NyUmVuZGVyIGluc3RlYWQuXG4gICAgICAgICAgICBpbnN0YW5jZS5zc3JSZW5kZXIgPSBzZXR1cFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNldHVwUmVzdWx0KSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzVk5vZGUoc2V0dXBSZXN1bHQpKSB7XG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCBub3QgcmV0dXJuIFZOb2RlcyBkaXJlY3RseSAtIGAgK1xuICAgICAgICAgICAgICAgIGByZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBiaW5kaW5ncy5cbiAgICAgICAgLy8gYXNzdW1pbmcgYSByZW5kZXIgZnVuY3Rpb24gY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBpcyBwcmVzZW50LlxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2Uuc2V0dXBTdGF0ZSA9IHByb3h5UmVmcyhzZXR1cFJlc3VsdCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzZXR1cFJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuIFJlY2VpdmVkOiAke3NldHVwUmVzdWx0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHNldHVwUmVzdWx0fWApO1xuICAgIH1cbiAgICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IpO1xufVxubGV0IGNvbXBpbGU7XG5sZXQgaW5zdGFsbFdpdGhQcm94eTtcbi8qKlxuICogRm9yIHJ1bnRpbWUtZG9tIHRvIHJlZ2lzdGVyIHRoZSBjb21waWxlci5cbiAqIE5vdGUgdGhlIGV4cG9ydGVkIG1ldGhvZCB1c2VzIGFueSB0byBhdm9pZCBkLnRzIHJlbHlpbmcgb24gdGhlIGNvbXBpbGVyIHR5cGVzLlxuICovXG5mdW5jdGlvbiByZWdpc3RlclJ1bnRpbWVDb21waWxlcihfY29tcGlsZSkge1xuICAgIGNvbXBpbGUgPSBfY29tcGlsZTtcbiAgICBpbnN0YWxsV2l0aFByb3h5ID0gaSA9PiB7XG4gICAgICAgIGlmIChpLnJlbmRlci5fcmMpIHtcbiAgICAgICAgICAgIGkud2l0aFByb3h5ID0gbmV3IFByb3h5KGkuY3R4LCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8vIGRldiBvbmx5XG5jb25zdCBpc1J1bnRpbWVPbmx5ID0gKCkgPT4gIWNvbXBpbGU7XG5mdW5jdGlvbiBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IsIHNraXBPcHRpb25zKSB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICAvLyB0ZW1wbGF0ZSAvIHJlbmRlciBmdW5jdGlvbiBub3JtYWxpemF0aW9uXG4gICAgLy8gY291bGQgYmUgYWxyZWFkeSBzZXQgd2hlbiByZXR1cm5lZCBmcm9tIHNldHVwKClcbiAgICBpZiAoIWluc3RhbmNlLnJlbmRlcikge1xuICAgICAgICAvLyBvbmx5IGRvIG9uLXRoZS1mbHkgY29tcGlsZSBpZiBub3QgaW4gU1NSIC0gU1NSIG9uLXRoZS1mbHkgY29tcGlsYXRpb25cbiAgICAgICAgLy8gaXMgZG9uZSBieSBzZXJ2ZXItcmVuZGVyZXJcbiAgICAgICAgaWYgKCFpc1NTUiAmJiBjb21waWxlICYmICFDb21wb25lbnQucmVuZGVyKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IENvbXBvbmVudC50ZW1wbGF0ZSB8fFxuICAgICAgICAgICAgICAgIHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKS50ZW1wbGF0ZTtcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IGlzQ3VzdG9tRWxlbWVudCwgY29tcGlsZXJPcHRpb25zIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRlbGltaXRlcnMsIGNvbXBpbGVyT3B0aW9uczogY29tcG9uZW50Q29tcGlsZXJPcHRpb25zIH0gPSBDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZmluYWxDb21waWxlck9wdGlvbnMgPSBleHRlbmQoZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXJzXG4gICAgICAgICAgICAgICAgfSwgY29tcGlsZXJPcHRpb25zKSwgY29tcG9uZW50Q29tcGlsZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBDb21wb25lbnQucmVuZGVyID0gY29tcGlsZSh0ZW1wbGF0ZSwgZmluYWxDb21waWxlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gKENvbXBvbmVudC5yZW5kZXIgfHwgTk9PUCk7XG4gICAgICAgIC8vIGZvciBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrcywgdGhlIHJlbmRlclxuICAgICAgICAvLyBwcm94eSB1c2VkIG5lZWRzIGEgZGlmZmVyZW50IGBoYXNgIGhhbmRsZXIgd2hpY2ggaXMgbW9yZSBwZXJmb3JtYW50IGFuZFxuICAgICAgICAvLyBhbHNvIG9ubHkgYWxsb3dzIGEgd2hpdGVsaXN0IG9mIGdsb2JhbHMgdG8gZmFsbHRocm91Z2guXG4gICAgICAgIGlmIChpbnN0YWxsV2l0aFByb3h5KSB7XG4gICAgICAgICAgICBpbnN0YWxsV2l0aFByb3h5KGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzdXBwb3J0IGZvciAyLnggb3B0aW9uc1xuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICEoZmFsc2UgKSkge1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICB9XG4gICAgLy8gd2FybiBtaXNzaW5nIHRlbXBsYXRlL3JlbmRlclxuICAgIC8vIHRoZSBydW50aW1lIGNvbXBpbGF0aW9uIG9mIHRlbXBsYXRlIGluIFNTUiBpcyBkb25lIGJ5IHNlcnZlci1yZW5kZXJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFDb21wb25lbnQucmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCAmJiAhaXNTU1IpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghY29tcGlsZSAmJiBDb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBwcm92aWRlZCB0ZW1wbGF0ZSBvcHRpb24gYnV0IGAgK1xuICAgICAgICAgICAgICAgIGBydW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArXG4gICAgICAgICAgICAgICAgKGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYFxuICAgICAgICAgICAgICAgICAgICApIC8qIHNob3VsZCBub3QgaGFwcGVuICovKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpcyBtaXNzaW5nIHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dHJzUHJveHkoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KGluc3RhbmNlLmF0dHJzLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sICckYXR0cnMnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsZXRlUHJvcGVydHkoKSB7XG4gICAgICAgICAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sICckYXR0cnMnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgY29uc3QgZXhwb3NlID0gZXhwb3NlZCA9PiB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICAgICAgICAgICAgd2FybihgZXhwb3NlKCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UgcGVyIHNldHVwKCkuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhwb3NlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGV4cG9zZWRUeXBlID0gdHlwZW9mIGV4cG9zZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGV4cG9zZWRUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShleHBvc2VkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3NlZFR5cGUgPSAnYXJyYXknO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmKGV4cG9zZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvc2VkVHlwZSA9ICdyZWYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChleHBvc2VkVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgZXhwb3NlKCkgc2hvdWxkIGJlIHBhc3NlZCBhIHBsYWluIG9iamVjdCwgcmVjZWl2ZWQgJHtleHBvc2VkVHlwZX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmV4cG9zZWQgPSBleHBvc2VkIHx8IHt9O1xuICAgIH07XG4gICAgbGV0IGF0dHJzO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgLy8gV2UgdXNlIGdldHRlcnMgaW4gZGV2IGluIGNhc2UgbGlicyBsaWtlIHRlc3QtdXRpbHMgb3ZlcndyaXRlIGluc3RhbmNlXG4gICAgICAgIC8vIHByb3BlcnRpZXMgKG92ZXJ3cml0ZXMgc2hvdWxkIG5vdCBiZSBkb25lIGluIHByb2QpXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnMgfHwgKGF0dHJzID0gY3JlYXRlQXR0cnNQcm94eShpbnN0YW5jZSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBzbG90cygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnNsb3RzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgZW1pdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiBpbnN0YW5jZS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHBvc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycyB8fCAoYXR0cnMgPSBjcmVhdGVBdHRyc1Byb3h5KGluc3RhbmNlKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2xvdHM6IGluc3RhbmNlLnNsb3RzLFxuICAgICAgICAgICAgZW1pdDogaW5zdGFuY2UuZW1pdCxcbiAgICAgICAgICAgIGV4cG9zZVxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEV4cG9zZVByb3h5KGluc3RhbmNlKSB7XG4gICAgaWYgKGluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIChpbnN0YW5jZS5leHBvc2VQcm94eSB8fFxuICAgICAgICAgICAgKGluc3RhbmNlLmV4cG9zZVByb3h5ID0gbmV3IFByb3h5KHByb3h5UmVmcyhtYXJrUmF3KGluc3RhbmNlLmV4cG9zZWQpKSwge1xuICAgICAgICAgICAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSBpbiBwdWJsaWNQcm9wZXJ0aWVzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFzKHRhcmdldCwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkgaW4gdGFyZ2V0IHx8IGtleSBpbiBwdWJsaWNQcm9wZXJ0aWVzTWFwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSk7XG4gICAgfVxufVxuY29uc3QgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbmNvbnN0IGNsYXNzaWZ5ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoY2xhc3NpZnlSRSwgYyA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgJycpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQsIGluY2x1ZGVJbmZlcnJlZCA9IHRydWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihDb21wb25lbnQpXG4gICAgICAgID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lXG4gICAgICAgIDogQ29tcG9uZW50Lm5hbWUgfHwgKGluY2x1ZGVJbmZlcnJlZCAmJiBDb21wb25lbnQuX19uYW1lKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XG4gICAgbGV0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCk7XG4gICAgaWYgKCFuYW1lICYmIENvbXBvbmVudC5fX2ZpbGUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBDb21wb25lbnQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmFtZSAmJiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wYXJlbnQpIHtcbiAgICAgICAgLy8gdHJ5IHRvIGluZmVyIHRoZSBuYW1lIGJhc2VkIG9uIHJldmVyc2UgcmVzb2x1dGlvblxuICAgICAgICBjb25zdCBpbmZlckZyb21SZWdpc3RyeSA9IChyZWdpc3RyeSkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cnlba2V5XSA9PT0gQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBuYW1lID1cbiAgICAgICAgICAgIGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmNvbXBvbmVudHMgfHxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQudHlwZS5jb21wb25lbnRzKSB8fCBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5hcHBDb250ZXh0LmNvbXBvbmVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZSA/IGNsYXNzaWZ5KG5hbWUpIDogaXNSb290ID8gYEFwcGAgOiBgQW5vbnltb3VzYDtcbn1cbmZ1bmN0aW9uIGlzQ2xhc3NDb21wb25lbnQodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgJiYgJ19fdmNjT3B0cycgaW4gdmFsdWU7XG59XG5cbmNvbnN0IGNvbXB1dGVkID0gKChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucykgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcbn0pO1xuXG4vLyBkZXYgb25seVxuY29uc3Qgd2FyblJ1bnRpbWVVc2FnZSA9IChtZXRob2QpID0+IHdhcm4oYCR7bWV0aG9kfSgpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgYCArXG4gICAgYDxzY3JpcHQgc2V0dXA+IG9mIGEgc2luZ2xlIGZpbGUgY29tcG9uZW50LiBJdHMgYXJndW1lbnRzIHNob3VsZCBiZSBgICtcbiAgICBgY29tcGlsZWQgYXdheSBhbmQgcGFzc2luZyBpdCBhdCBydW50aW1lIGhhcyBubyBlZmZlY3QuYCk7XG4vLyBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gZGVmaW5lUHJvcHMoKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVQcm9wc2ApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiBkZWZpbmVFbWl0cygpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBWdWUgYDxzY3JpcHQgc2V0dXA+YCBjb21waWxlciBtYWNybyBmb3IgZGVjbGFyaW5nIGEgY29tcG9uZW50J3MgZXhwb3NlZFxuICogaW5zdGFuY2UgcHJvcGVydGllcyB3aGVuIGl0IGlzIGFjY2Vzc2VkIGJ5IGEgcGFyZW50IGNvbXBvbmVudCB2aWEgdGVtcGxhdGVcbiAqIHJlZnMuXG4gKlxuICogYDxzY3JpcHQgc2V0dXA+YCBjb21wb25lbnRzIGFyZSBjbG9zZWQgYnkgZGVmYXVsdCAtIGkuZS4gdmFyaWFibGVzIGluc2lkZVxuICogdGhlIGA8c2NyaXB0IHNldHVwPmAgc2NvcGUgaXMgbm90IGV4cG9zZWQgdG8gcGFyZW50IHVubGVzcyBleHBsaWNpdGx5IGV4cG9zZWRcbiAqIHZpYSBgZGVmaW5lRXhwb3NlYC5cbiAqXG4gKiBUaGlzIGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgPHNjcmlwdCBzZXR1cD5gLCBpcyBjb21waWxlZCBhd2F5IGluIHRoZVxuICogb3V0cHV0IGFuZCBzaG91bGQgKipub3QqKiBiZSBhY3R1YWxseSBjYWxsZWQgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lRXhwb3NlKGV4cG9zZWQpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUV4cG9zZWApO1xuICAgIH1cbn1cbi8qKlxuICogVnVlIGA8c2NyaXB0IHNldHVwPmAgY29tcGlsZXIgbWFjcm8gZm9yIHByb3ZpZGluZyBwcm9wcyBkZWZhdWx0IHZhbHVlcyB3aGVuXG4gKiB1c2luZyB0eXBlLWJhc2VkIGBkZWZpbmVQcm9wc2AgZGVjbGFyYXRpb24uXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqIGBgYHRzXG4gKiB3aXRoRGVmYXVsdHMoZGVmaW5lUHJvcHM8e1xuICogICBzaXplPzogbnVtYmVyXG4gKiAgIGxhYmVscz86IHN0cmluZ1tdXG4gKiB9PigpLCB7XG4gKiAgIHNpemU6IDMsXG4gKiAgIGxhYmVsczogKCkgPT4gWydkZWZhdWx0IGxhYmVsJ11cbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBUaGlzIGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgPHNjcmlwdCBzZXR1cD5gLCBpcyBjb21waWxlZCBhd2F5IGluIHRoZSBvdXRwdXRcbiAqIGFuZCBzaG91bGQgKipub3QqKiBiZSBhY3R1YWxseSBjYWxsZWQgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHByb3BzLCBkZWZhdWx0cykge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FyblJ1bnRpbWVVc2FnZShgd2l0aERlZmF1bHRzYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXNlU2xvdHMoKSB7XG4gICAgcmV0dXJuIGdldENvbnRleHQoKS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xuICAgIHJldHVybiBnZXRDb250ZXh0KCkuYXR0cnM7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICAgIGNvbnN0IGkgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpKSB7XG4gICAgICAgIHdhcm4oYHVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gICAgfVxuICAgIHJldHVybiBpLnNldHVwQ29udGV4dCB8fCAoaS5zZXR1cENvbnRleHQgPSBjcmVhdGVTZXR1cENvbnRleHQoaSkpO1xufVxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyBkZWZhdWx0IGRlY2xhcmF0aW9ucy4gSW1wb3J0ZWQgYnkgY29tcGlsZWQgY29kZVxuICogb25seS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRzKHJhdywgZGVmYXVsdHMpIHtcbiAgICBjb25zdCBwcm9wcyA9IGlzQXJyYXkocmF3KVxuICAgICAgICA/IHJhdy5yZWR1Y2UoKG5vcm1hbGl6ZWQsIHApID0+ICgobm9ybWFsaXplZFtwXSA9IHt9KSwgbm9ybWFsaXplZCksIHt9KVxuICAgICAgICA6IHJhdztcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWZhdWx0cykge1xuICAgICAgICBjb25zdCBvcHQgPSBwcm9wc1trZXldO1xuICAgICAgICBpZiAob3B0KSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShvcHQpIHx8IGlzRnVuY3Rpb24ob3B0KSkge1xuICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSB7IHR5cGU6IG9wdCwgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0LmRlZmF1bHQgPSBkZWZhdWx0c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHsgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgcHJvcHMgZGVmYXVsdCBrZXkgXCIke2tleX1cIiBoYXMgbm8gY29ycmVzcG9uZGluZyBkZWNsYXJhdGlvbi5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG59XG4vKipcbiAqIFVzZWQgdG8gY3JlYXRlIGEgcHJveHkgZm9yIHRoZSByZXN0IGVsZW1lbnQgd2hlbiBkZXN0cnVjdHVyaW5nIHByb3BzIHdpdGhcbiAqIGRlZmluZVByb3BzKCkuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUHJvcHNSZXN0UHJveHkocHJvcHMsIGV4Y2x1ZGVkS2V5cykge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmICghZXhjbHVkZWRLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsIGtleSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwcm9wc1trZXldXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBgPHNjcmlwdCBzZXR1cD5gIGhlbHBlciBmb3IgcGVyc2lzdGluZyB0aGUgY3VycmVudCBpbnN0YW5jZSBjb250ZXh0IG92ZXJcbiAqIGFzeW5jL2F3YWl0IGZsb3dzLlxuICpcbiAqIGBAdnVlL2NvbXBpbGVyLXNmY2AgY29udmVydHMgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgeCA9IGF3YWl0IGZvbygpXG4gKiBgYGBcbiAqXG4gKiBpbnRvOlxuICpcbiAqIGBgYHRzXG4gKiBsZXQgX190ZW1wLCBfX3Jlc3RvcmVcbiAqIGNvbnN0IHggPSAoKFtfX3RlbXAsIF9fcmVzdG9yZV0gPSB3aXRoQXN5bmNDb250ZXh0KCgpID0+IGZvbygpKSksX190ZW1wPWF3YWl0IF9fdGVtcCxfX3Jlc3RvcmUoKSxfX3RlbXApXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB3aXRoQXN5bmNDb250ZXh0KGdldEF3YWl0YWJsZSkge1xuICAgIGNvbnN0IGN0eCA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWN0eCkge1xuICAgICAgICB3YXJuKGB3aXRoQXN5bmNDb250ZXh0IGNhbGxlZCB3aXRob3V0IGFjdGl2ZSBjdXJyZW50IGluc3RhbmNlLiBgICtcbiAgICAgICAgICAgIGBUaGlzIGlzIGxpa2VseSBhIGJ1Zy5gKTtcbiAgICB9XG4gICAgbGV0IGF3YWl0YWJsZSA9IGdldEF3YWl0YWJsZSgpO1xuICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKGlzUHJvbWlzZShhd2FpdGFibGUpKSB7XG4gICAgICAgIGF3YWl0YWJsZSA9IGF3YWl0YWJsZS5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShjdHgpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBbYXdhaXRhYmxlLCAoKSA9PiBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KV07XG59XG5cbi8vIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gaCh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKSB7XG4gICAgY29uc3QgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGwgPT09IDIpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHByb3BzT3JDaGlsZHJlbikgJiYgIWlzQXJyYXkocHJvcHNPckNoaWxkcmVuKSkge1xuICAgICAgICAgICAgLy8gc2luZ2xlIHZub2RlIHdpdGhvdXQgcHJvcHNcbiAgICAgICAgICAgIGlmIChpc1ZOb2RlKHByb3BzT3JDaGlsZHJlbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgW3Byb3BzT3JDaGlsZHJlbl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcHJvcHMgd2l0aG91dCBjaGlsZHJlblxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBvbWl0IHByb3BzXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGwgPiAzKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKTtcbiAgICB9XG59XG5cbmNvbnN0IHNzckNvbnRleHRLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHNzckNvbnRleHRgIDogYGApO1xuY29uc3QgdXNlU1NSQ29udGV4dCA9ICgpID0+IHtcbiAgICB7XG4gICAgICAgIGNvbnN0IGN0eCA9IGluamVjdChzc3JDb250ZXh0S2V5KTtcbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYFNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgYCArXG4gICAgICAgICAgICAgICAgICAgIGB1c2VTU1JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdHg7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gaXNTaGFsbG93KHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzU2hhbGxvd1wiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfU0hBTExPVyAqL10pO1xufVxuXG5mdW5jdGlvbiBpbml0Q3VzdG9tRm9ybWF0dGVyKCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdnVlU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzNiYTc3NicgfTtcbiAgICBjb25zdCBudW1iZXJTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojMGIxYmM5JyB9O1xuICAgIGNvbnN0IHN0cmluZ1N0eWxlID0geyBzdHlsZTogJ2NvbG9yOiNiNjJlMjQnIH07XG4gICAgY29uc3Qga2V5d29yZFN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiM5ZDI4OGMnIH07XG4gICAgLy8gY3VzdG9tIGZvcm1hdHRlciBmb3IgQ2hyb21lXG4gICAgLy8gaHR0cHM6Ly93d3cubWF0dHpldW5lcnQuY29tLzIwMTYvMDIvMTkvY3VzdG9tLWNocm9tZS1kZXZ0b29scy1vYmplY3QtZm9ybWF0dGVycy5odG1sXG4gICAgY29uc3QgZm9ybWF0dGVyID0ge1xuICAgICAgICBoZWFkZXIob2JqKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFsc28gZm9ybWF0IENvbXBvbmVudFB1YmxpY0luc3RhbmNlICYgY3R4LnNsb3RzL2F0dHJzIGluIHNldHVwXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvYmouX19pc1Z1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJ2RpdicsIHZ1ZVN0eWxlLCBgVnVlSW5zdGFuY2VgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmKG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBnZW5SZWZGbGFnKG9iaildLFxuICAgICAgICAgICAgICAgICAgICAnPCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iai52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgIGA+YFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBpc1NoYWxsb3cob2JqKSA/ICdTaGFsbG93UmVhY3RpdmUnIDogJ1JlYWN0aXZlJ10sXG4gICAgICAgICAgICAgICAgICAgICc8JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICAgICAgICAgICAgYD4ke2lzUmVhZG9ubHkob2JqKSA/IGAgKHJlYWRvbmx5KWAgOiBgYH1gXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhZG9ubHkob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gJ1NoYWxsb3dSZWFkb25seScgOiAnUmVhZG9ubHknXSxcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxuICAgICAgICAgICAgICAgICAgICAnPidcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0JvZHkob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIG9iai5fX2lzVnVlO1xuICAgICAgICB9LFxuICAgICAgICBib2R5KG9iaikge1xuICAgICAgICAgICAgaWYgKG9iaiAmJiBvYmouX19pc1Z1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgLi4uZm9ybWF0SW5zdGFuY2Uob2JqLiQpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gZm9ybWF0SW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICAgICAgY29uc3QgYmxvY2tzID0gW107XG4gICAgICAgIGlmIChpbnN0YW5jZS50eXBlLnByb3BzICYmIGluc3RhbmNlLnByb3BzKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdwcm9wcycsIHRvUmF3KGluc3RhbmNlLnByb3BzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0YW5jZS5zZXR1cFN0YXRlICE9PSBFTVBUWV9PQkopIHtcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ3NldHVwJywgaW5zdGFuY2Uuc2V0dXBTdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0YW5jZS5kYXRhICE9PSBFTVBUWV9PQkopIHtcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2RhdGEnLCB0b1JhdyhpbnN0YW5jZS5kYXRhKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZXh0cmFjdEtleXMoaW5zdGFuY2UsICdjb21wdXRlZCcpO1xuICAgICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2NvbXB1dGVkJywgY29tcHV0ZWQpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmplY3RlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnaW5qZWN0Jyk7XG4gICAgICAgIGlmIChpbmplY3RlZCkge1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnaW5qZWN0ZWQnLCBpbmplY3RlZCkpO1xuICAgICAgICB9XG4gICAgICAgIGJsb2Nrcy5wdXNoKFtcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArICc7b3BhY2l0eTowLjY2J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJyQgKGludGVybmFsKTogJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFsnb2JqZWN0JywgeyBvYmplY3Q6IGluc3RhbmNlIH1dXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gYmxvY2tzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUJsb2NrKHR5cGUsIHRhcmdldCkge1xuICAgICAgICB0YXJnZXQgPSBleHRlbmQoe30sIHRhcmdldCk7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXModGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCB7fV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogJ2xpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtJyB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdjb2xvcjojNDc2NTgyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAncGFkZGluZy1sZWZ0OjEuMjVlbSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC4uLk9iamVjdC5rZXlzKHRhcmdldCkubWFwKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzcGFuJywga2V5d29yZFN0eWxlLCBrZXkgKyAnOiAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKHRhcmdldFtrZXldLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuICAgICAgICBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2LCBhc1JhdyA9IHRydWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIG51bWJlclN0eWxlLCB2XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBzdHJpbmdTdHlsZSwgSlNPTi5zdHJpbmdpZnkodildO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBrZXl3b3JkU3R5bGUsIHZdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gWydvYmplY3QnLCB7IG9iamVjdDogYXNSYXcgPyB0b1Jhdyh2KSA6IHYgfV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIFN0cmluZyh2KV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZXh0cmFjdEtleXMoaW5zdGFuY2UsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgQ29tcCA9IGluc3RhbmNlLnR5cGU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKENvbXApKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0cmFjdGVkID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLmN0eCkge1xuICAgICAgICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICBleHRyYWN0ZWRba2V5XSA9IGluc3RhbmNlLmN0eFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleHRyYWN0ZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkge1xuICAgICAgICBjb25zdCBvcHRzID0gQ29tcFt0eXBlXTtcbiAgICAgICAgaWYgKChpc0FycmF5KG9wdHMpICYmIG9wdHMuaW5jbHVkZXMoa2V5KSkgfHxcbiAgICAgICAgICAgIChpc09iamVjdChvcHRzKSAmJiBrZXkgaW4gb3B0cykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wLmV4dGVuZHMgJiYgaXNLZXlPZlR5cGUoQ29tcC5leHRlbmRzLCBrZXksIHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29tcC5taXhpbnMgJiYgQ29tcC5taXhpbnMuc29tZShtID0+IGlzS2V5T2ZUeXBlKG0sIGtleSwgdHlwZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZW5SZWZGbGFnKHYpIHtcbiAgICAgICAgaWYgKGlzU2hhbGxvdyh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIGBTaGFsbG93UmVmYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodi5lZmZlY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBgQ29tcHV0ZWRSZWZgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgUmVmYDtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMpIHtcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzID0gW2Zvcm1hdHRlcl07XG4gICAgfVxufVxuXG5mdW5jdGlvbiB3aXRoTWVtbyhtZW1vLCByZW5kZXIsIGNhY2hlLCBpbmRleCkge1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2luZGV4XTtcbiAgICBpZiAoY2FjaGVkICYmIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSByZW5kZXIoKTtcbiAgICAvLyBzaGFsbG93IGNsb25lXG4gICAgcmV0Lm1lbW8gPSBtZW1vLnNsaWNlKCk7XG4gICAgcmV0dXJuIChjYWNoZVtpbmRleF0gPSByZXQpO1xufVxuZnVuY3Rpb24gaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pIHtcbiAgICBjb25zdCBwcmV2ID0gY2FjaGVkLm1lbW87XG4gICAgaWYgKHByZXYubGVuZ3RoICE9IG1lbW8ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHByZXZbaV0sIG1lbW9baV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIHRvIGxldCBwYXJlbnQgYmxvY2sgdHJhY2sgaXQgd2hlbiByZXR1cm5pbmcgY2FjaGVkXG4gICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKGNhY2hlZCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyBDb3JlIEFQSSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmNvbnN0IHZlcnNpb24gPSBcIjMuMi40N1wiO1xuY29uc3QgX3NzclV0aWxzID0ge1xuICAgIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlLFxuICAgIHNldHVwQ29tcG9uZW50LFxuICAgIHJlbmRlckNvbXBvbmVudFJvb3QsXG4gICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlLFxuICAgIGlzVk5vZGUsXG4gICAgbm9ybWFsaXplVk5vZGVcbn07XG4vKipcbiAqIFNTUiB1dGlscyBmb3IgXFxAdnVlL3NlcnZlci1yZW5kZXJlci4gT25seSBleHBvc2VkIGluIHNzci1wb3NzaWJsZSBidWlsZHMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3Qgc3NyVXRpbHMgPSAoX3NzclV0aWxzICk7XG4vKipcbiAqIEBpbnRlcm5hbCBvbmx5IGV4cG9zZWQgaW4gY29tcGF0IGJ1aWxkc1xuICovXG5jb25zdCByZXNvbHZlRmlsdGVyID0gbnVsbDtcbi8qKlxuICogQGludGVybmFsIG9ubHkgZXhwb3NlZCBpbiBjb21wYXQgYnVpbGRzLlxuICovXG5jb25zdCBjb21wYXRVdGlscyA9IChudWxsKTtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIENvbW1lbnQsIEZyYWdtZW50LCBLZWVwQWxpdmUsIFN0YXRpYywgU3VzcGVuc2UsIFRlbGVwb3J0LCBUZXh0LCBhc3NlcnROdW1iZXIsIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBjYWxsV2l0aEVycm9ySGFuZGxpbmcsIGNsb25lVk5vZGUsIGNvbXBhdFV0aWxzLCBjb21wdXRlZCwgY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudEJsb2NrLCBjcmVhdGVCYXNlVk5vZGUgYXMgY3JlYXRlRWxlbWVudFZOb2RlLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciwgY3JlYXRlUHJvcHNSZXN0UHJveHksIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVTbG90cywgY3JlYXRlU3RhdGljVk5vZGUsIGNyZWF0ZVRleHRWTm9kZSwgY3JlYXRlVk5vZGUsIGRlZmluZUFzeW5jQ29tcG9uZW50LCBkZWZpbmVDb21wb25lbnQsIGRlZmluZUVtaXRzLCBkZWZpbmVFeHBvc2UsIGRlZmluZVByb3BzLCBkZXZ0b29scywgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIGd1YXJkUmVhY3RpdmVQcm9wcywgaCwgaGFuZGxlRXJyb3IsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluamVjdCwgaXNNZW1vU2FtZSwgaXNSdW50aW1lT25seSwgaXNWTm9kZSwgbWVyZ2VEZWZhdWx0cywgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIG9uQWN0aXZhdGVkLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uQmVmb3JlVXBkYXRlLCBvbkRlYWN0aXZhdGVkLCBvbkVycm9yQ2FwdHVyZWQsIG9uTW91bnRlZCwgb25SZW5kZXJUcmFja2VkLCBvblJlbmRlclRyaWdnZXJlZCwgb25TZXJ2ZXJQcmVmZXRjaCwgb25Vbm1vdW50ZWQsIG9uVXBkYXRlZCwgb3BlbkJsb2NrLCBwb3BTY29wZUlkLCBwcm92aWRlLCBwdXNoU2NvcGVJZCwgcXVldWVQb3N0Rmx1c2hDYiwgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsIHJlbmRlckxpc3QsIHJlbmRlclNsb3QsIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCByZXNvbHZlRmlsdGVyLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBzZXRCbG9ja1RyYWNraW5nLCBzZXREZXZ0b29sc0hvb2ssIHNldFRyYW5zaXRpb25Ib29rcywgc3NyQ29udGV4dEtleSwgc3NyVXRpbHMsIHRvSGFuZGxlcnMsIHRyYW5zZm9ybVZOb2RlQXJncywgdXNlQXR0cnMsIHVzZVNTUkNvbnRleHQsIHVzZVNsb3RzLCB1c2VUcmFuc2l0aW9uU3RhdGUsIHZlcnNpb24sIHdhcm4sIHdhdGNoLCB3YXRjaEVmZmVjdCwgd2F0Y2hQb3N0RWZmZWN0LCB3YXRjaFN5bmNFZmZlY3QsIHdpdGhBc3luY0NvbnRleHQsIHdpdGhDdHgsIHdpdGhEZWZhdWx0cywgd2l0aERpcmVjdGl2ZXMsIHdpdGhNZW1vLCB3aXRoU2NvcGVJZCB9O1xuIiwiaW1wb3J0IHsgd2FybiwgY2FtZWxpemUsIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBkZWZpbmVDb21wb25lbnQsIG5leHRUaWNrLCBjcmVhdGVWTm9kZSwgZ2V0Q3VycmVudEluc3RhbmNlLCB3YXRjaFBvc3RFZmZlY3QsIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIEZyYWdtZW50LCBTdGF0aWMsIGgsIEJhc2VUcmFuc2l0aW9uLCBhc3NlcnROdW1iZXIsIHVzZVRyYW5zaXRpb25TdGF0ZSwgb25VcGRhdGVkLCB0b1JhdywgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBzZXRUcmFuc2l0aW9uSG9va3MsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIGlzUnVudGltZU9ubHksIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGlzT24sIGlzTW9kZWxMaXN0ZW5lciwgaXNGdW5jdGlvbiwgY2FtZWxpemUgYXMgY2FtZWxpemUkMSwgdG9OdW1iZXIsIGV4dGVuZCwgRU1QVFlfT0JKLCBpc09iamVjdCwgbG9vc2VUb051bWJlciwgbG9vc2VJbmRleE9mLCBpc1NldCwgbG9vc2VFcXVhbCwgaW52b2tlQXJyYXlGbnMsIGlzSFRNTFRhZywgaXNTVkdUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmNvbnN0IGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiBudWxsKTtcbmNvbnN0IHRlbXBsYXRlQ29udGFpbmVyID0gZG9jICYmIC8qI19fUFVSRV9fKi8gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5jb25zdCBub2RlT3BzID0ge1xuICAgIGluc2VydDogKGNoaWxkLCBwYXJlbnQsIGFuY2hvcikgPT4ge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XG4gICAgfSxcbiAgICByZW1vdmU6IGNoaWxkID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogKHRhZywgaXNTVkcsIGlzLCBwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGlzU1ZHXG4gICAgICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcbiAgICAgICAgICAgIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnLCBpcyA/IHsgaXMgfSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0YWcgPT09ICdzZWxlY3QnICYmIHByb3BzICYmIHByb3BzLm11bHRpcGxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCBwcm9wcy5tdWx0aXBsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH0sXG4gICAgY3JlYXRlVGV4dDogdGV4dCA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXG4gICAgY3JlYXRlQ29tbWVudDogdGV4dCA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcbiAgICBzZXRUZXh0OiAobm9kZSwgdGV4dCkgPT4ge1xuICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgfSxcbiAgICBzZXRFbGVtZW50VGV4dDogKGVsLCB0ZXh0KSA9PiB7XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9LFxuICAgIHBhcmVudE5vZGU6IG5vZGUgPT4gbm9kZS5wYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBub2RlID0+IG5vZGUubmV4dFNpYmxpbmcsXG4gICAgcXVlcnlTZWxlY3Rvcjogc2VsZWN0b3IgPT4gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxuICAgIHNldFNjb3BlSWQoZWwsIGlkKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShpZCwgJycpO1xuICAgIH0sXG4gICAgLy8gX19VTlNBRkVfX1xuICAgIC8vIFJlYXNvbjogaW5uZXJIVE1MLlxuICAgIC8vIFN0YXRpYyBjb250ZW50IGhlcmUgY2FuIG9ubHkgY29tZSBmcm9tIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQoY29udGVudCwgcGFyZW50LCBhbmNob3IsIGlzU1ZHLCBzdGFydCwgZW5kKSB7XG4gICAgICAgIC8vIDxwYXJlbnQ+IGJlZm9yZSB8IGZpcnN0IC4uLiBsYXN0IHwgYW5jaG9yIDwvcGFyZW50PlxuICAgICAgICBjb25zdCBiZWZvcmUgPSBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZDtcbiAgICAgICAgLy8gIzUzMDggY2FuIG9ubHkgdGFrZSBjYWNoZWQgcGF0aCBpZjpcbiAgICAgICAgLy8gLSBoYXMgYSBzaW5nbGUgcm9vdCBub2RlXG4gICAgICAgIC8vIC0gbmV4dFNpYmxpbmcgaW5mbyBpcyBzdGlsbCBhdmFpbGFibGVcbiAgICAgICAgaWYgKHN0YXJ0ICYmIChzdGFydCA9PT0gZW5kIHx8IHN0YXJ0Lm5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgLy8gY2FjaGVkXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoc3RhcnQuY2xvbmVOb2RlKHRydWUpLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kIHx8ICEoc3RhcnQgPSBzdGFydC5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnJlc2ggaW5zZXJ0XG4gICAgICAgICAgICB0ZW1wbGF0ZUNvbnRhaW5lci5pbm5lckhUTUwgPSBpc1NWRyA/IGA8c3ZnPiR7Y29udGVudH08L3N2Zz5gIDogY29udGVudDtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDb250YWluZXIuY29udGVudDtcbiAgICAgICAgICAgIGlmIChpc1NWRykge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvdXRlciBzdmcgd3JhcHBlclxuICAgICAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0ZW1wbGF0ZS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQod3JhcHBlci5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAvLyBmaXJzdFxuICAgICAgICAgICAgYmVmb3JlID8gYmVmb3JlLm5leHRTaWJsaW5nIDogcGFyZW50LmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAvLyBsYXN0XG4gICAgICAgICAgICBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZFxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbi8vIGNvbXBpbGVyIHNob3VsZCBub3JtYWxpemUgY2xhc3MgKyA6Y2xhc3MgYmluZGluZ3Mgb24gdGhlIHNhbWUgZWxlbWVudFxuLy8gaW50byBhIHNpbmdsZSBiaW5kaW5nIFsnc3RhdGljQ2xhc3MnLCBkeW5hbWljXVxuZnVuY3Rpb24gcGF0Y2hDbGFzcyhlbCwgdmFsdWUsIGlzU1ZHKSB7XG4gICAgLy8gZGlyZWN0bHkgc2V0dGluZyBjbGFzc05hbWUgc2hvdWxkIGJlIGZhc3RlciB0aGFuIHNldEF0dHJpYnV0ZSBpbiB0aGVvcnlcbiAgICAvLyBpZiB0aGlzIGlzIGFuIGVsZW1lbnQgZHVyaW5nIGEgdHJhbnNpdGlvbiwgdGFrZSB0aGUgdGVtcG9yYXJ5IHRyYW5zaXRpb25cbiAgICAvLyBjbGFzc2VzIGludG8gYWNjb3VudC5cbiAgICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl92dGM7XG4gICAgaWYgKHRyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc10gOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKCcgJyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTVkcpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGF0Y2hTdHlsZShlbCwgcHJldiwgbmV4dCkge1xuICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgY29uc3QgaXNDc3NTdHJpbmcgPSBpc1N0cmluZyhuZXh0KTtcbiAgICBpZiAobmV4dCAmJiAhaXNDc3NTdHJpbmcpIHtcbiAgICAgICAgaWYgKHByZXYgJiYgIWlzU3RyaW5nKHByZXYpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY3VycmVudERpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuICAgICAgICBpZiAoaXNDc3NTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChwcmV2ICE9PSBuZXh0KSB7XG4gICAgICAgICAgICAgICAgc3R5bGUuY3NzVGV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldikge1xuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluZGljYXRlcyB0aGF0IHRoZSBgZGlzcGxheWAgb2YgdGhlIGVsZW1lbnQgaXMgY29udHJvbGxlZCBieSBgdi1zaG93YCxcbiAgICAgICAgLy8gc28gd2UgYWx3YXlzIGtlZXAgdGhlIGN1cnJlbnQgYGRpc3BsYXlgIHZhbHVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGBzdHlsZWBcbiAgICAgICAgLy8gdmFsdWUsIHRodXMgaGFuZGluZyBvdmVyIGNvbnRyb2wgdG8gYHYtc2hvd2AuXG4gICAgICAgIGlmICgnX3ZvZCcgaW4gZWwpIHtcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBjdXJyZW50RGlzcGxheTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IHNlbWljb2xvblJFID0gL1teXFxcXF07XFxzKiQvO1xuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBuYW1lLCB2YWwpIHtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbC5mb3JFYWNoKHYgPT4gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHYpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh2YWwgPT0gbnVsbClcbiAgICAgICAgICAgIHZhbCA9ICcnO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBpZiAoc2VtaWNvbG9uUkUudGVzdCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgd2FybihgVW5leHBlY3RlZCBzZW1pY29sb24gYXQgdGhlIGVuZCBvZiAnJHtuYW1lfScgc3R5bGUgdmFsdWU6ICcke3ZhbH0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xuICAgICAgICAgICAgLy8gY3VzdG9tIHByb3BlcnR5IGRlZmluaXRpb25cbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwcmVmaXhlZCA9IGF1dG9QcmVmaXgoc3R5bGUsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgICAgICAgICAgICAgIC8vICFpbXBvcnRhbnRcbiAgICAgICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUocHJlZml4ZWQpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZVtwcmVmaXhlZF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuY29uc3QgcHJlZml4Q2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcbiAgICBjb25zdCBjYWNoZWQgPSBwcmVmaXhDYWNoZVtyYXdOYW1lXTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGxldCBuYW1lID0gY2FtZWxpemUocmF3TmFtZSk7XG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IG5hbWUpO1xuICAgIH1cbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyBuYW1lO1xuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiAocHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhd05hbWU7XG59XG5cbmNvbnN0IHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSkge1xuICAgIGlmIChpc1NWRyAmJiBrZXkuc3RhcnRzV2l0aCgneGxpbms6JykpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gbm90ZSB3ZSBhcmUgb25seSBjaGVja2luZyBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBoYXZlIGFcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkb20gcHJvcCBvZiB0aGUgc2FtZSBuYW1lIGhlcmUuXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChpc0Jvb2xlYW4gJiYgIWluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzQm9vbGVhbiA/ICcnIDogdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBfX1VOU0FGRV9fXG4vLyBmdW5jdGlvbnMuIFRoZSB1c2VyIGlzIHJlc3BvbnNpYmxlIGZvciB1c2luZyB0aGVtIHdpdGggb25seSB0cnVzdGVkIGNvbnRlbnQuXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIFxuLy8gdGhlIGZvbGxvd2luZyBhcmdzIGFyZSBwYXNzZWQgb25seSBkdWUgdG8gcG90ZW50aWFsIGlubmVySFRNTC90ZXh0Q29udGVudFxuLy8gb3ZlcnJpZGluZyBleGlzdGluZyBWTm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlIG9sZCB0cmVlIG11c3QgYmUgcHJvcGVybHlcbi8vIHVubW91bnRlZC5cbnByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSB7XG4gICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmXG4gICAgICAgIGVsLnRhZ05hbWUgIT09ICdQUk9HUkVTUycgJiZcbiAgICAgICAgLy8gY3VzdG9tIGVsZW1lbnRzIG1heSB1c2UgX3ZhbHVlIGludGVybmFsbHlcbiAgICAgICAgIWVsLnRhZ05hbWUuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxuICAgICAgICBlbC5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBuZXdWYWx1ZSB8fFxuICAgICAgICAgICAgLy8gIzQ5NTY6IGFsd2F5cyBzZXQgZm9yIE9QVElPTiBlbGVtZW50cyBiZWNhdXNlIGl0cyB2YWx1ZSBmYWxscyBiYWNrIHRvXG4gICAgICAgICAgICAvLyB0ZXh0Q29udGVudCBpZiBubyB2YWx1ZSBhdHRyaWJ1dGUgaXMgcHJlc2VudC4gQW5kIHNldHRpbmcgLnZhbHVlIGZvclxuICAgICAgICAgICAgLy8gT1BUSU9OIGhhcyBubyBzaWRlIGVmZmVjdFxuICAgICAgICAgICAgZWwudGFnTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5lZWRSZW1vdmUgPSBmYWxzZTtcbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxzZWxlY3QgbXVsdGlwbGU+IGNvbXBpbGVzIHRvIHsgbXVsdGlwbGU6ICcnIH1cbiAgICAgICAgICAgIHZhbHVlID0gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxkaXYgOmlkPVwibnVsbFwiPlxuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxpbWcgOndpZHRoPVwibnVsbFwiPlxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgbmVlZFJlbW92ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIHBlcmZvcm0gdmFsdWUgdmFsaWRhdGlvbiBhbmQgdGhyb3csXG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIGhhcyBnZXR0ZXIsIG5vIHNldHRlciwgd2lsbCBlcnJvciBpbiAndXNlIHN0cmljdCdcbiAgICAvLyBlZy4gPHNlbGVjdCA6dHlwZT1cIm51bGxcIj48L3NlbGVjdD4gPHNlbGVjdCA6d2lsbFZhbGlkYXRlPVwibnVsbFwiPjwvc2VsZWN0PlxuICAgIHRyeSB7XG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90IHdhcm4gaWYgdmFsdWUgaXMgYXV0by1jb2VyY2VkIGZyb20gbnVsbGlzaCB2YWx1ZXNcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhbmVlZFJlbW92ZSkge1xuICAgICAgICAgICAgd2FybihgRmFpbGVkIHNldHRpbmcgcHJvcCBcIiR7a2V5fVwiIG9uIDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcbiAgICAgICAgICAgICAgICBgdmFsdWUgJHt2YWx1ZX0gaXMgaW52YWxpZC5gLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZWVkUmVtb3ZlICYmIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHBhdGNoRXZlbnQoZWwsIHJhd05hbWUsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbnN0YW5jZSA9IG51bGwpIHtcbiAgICAvLyB2ZWkgPSB2dWUgZXZlbnQgaW52b2tlcnNcbiAgICBjb25zdCBpbnZva2VycyA9IGVsLl92ZWkgfHwgKGVsLl92ZWkgPSB7fSk7XG4gICAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XG4gICAgaWYgKG5leHRWYWx1ZSAmJiBleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgICAgLy8gcGF0Y2hcbiAgICAgICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgW25hbWUsIG9wdGlvbnNdID0gcGFyc2VOYW1lKHJhd05hbWUpO1xuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIGNvbnN0IGludm9rZXIgPSAoaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4aXN0aW5nSW52b2tlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlXG4gICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKGVsLCBuYW1lLCBleGlzdGluZ0ludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcbmZ1bmN0aW9uIHBhcnNlTmFtZShuYW1lKSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnNNb2RpZmllclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgd2hpbGUgKChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCBuYW1lLmxlbmd0aCAtIG1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXZlbnQgPSBuYW1lWzJdID09PSAnOicgPyBuYW1lLnNsaWNlKDMpIDogaHlwaGVuYXRlKG5hbWUuc2xpY2UoMikpO1xuICAgIHJldHVybiBbZXZlbnQsIG9wdGlvbnNdO1xufVxuLy8gVG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHJlcGVhdGVkbHkgY2FsbGluZyBEYXRlLm5vdygpLCB3ZSBjYWNoZVxuLy8gYW5kIHVzZSB0aGUgc2FtZSB0aW1lc3RhbXAgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgaW4gdGhlIHNhbWUgdGljay5cbmxldCBjYWNoZWROb3cgPSAwO1xuY29uc3QgcCA9IC8qI19fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5jb25zdCBnZXROb3cgPSAoKSA9PiBjYWNoZWROb3cgfHwgKHAudGhlbigoKSA9PiAoY2FjaGVkTm93ID0gMCkpLCAoY2FjaGVkTm93ID0gRGF0ZS5ub3coKSkpO1xuZnVuY3Rpb24gY3JlYXRlSW52b2tlcihpbml0aWFsVmFsdWUsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgaW52b2tlciA9IChlKSA9PiB7XG4gICAgICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSB2dWVqcy92dWUjNjU2NlxuICAgICAgICAvLyBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAgICAgICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgICAgICAgLy8gdGhpcyBubyBsb25nZXIgaGFwcGVucyBmb3IgdGVtcGxhdGVzIGluIFZ1ZSAzLCBidXQgY291bGQgc3RpbGwgYmVcbiAgICAgICAgLy8gdGhlb3JldGljYWxseSBwb3NzaWJsZSBmb3IgaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gICAgICAgIC8vIHRoZSBzb2x1dGlvbjogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAgICAgICAvLyBhbmQgYWxzbyBhdHRhY2ggdGhlIHRpbWVzdGFtcCB0byBhbnkgZXZlbnQgdGhhdCB3YXMgaGFuZGxlZCBieSB2dWVcbiAgICAgICAgLy8gZm9yIHRoZSBmaXJzdCB0aW1lICh0byBhdm9pZCBpbmNvbnNpc3RlbnQgZXZlbnQgdGltZXN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyBvciBldmVudHMgZmlyZWQgZnJvbSBpZnJhbWVzLCBlLmcuICMyNTEzKVxuICAgICAgICAvLyBUaGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgICAgICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICAgICAgICBpZiAoIWUuX3Z0cykge1xuICAgICAgICAgICAgZS5fdnRzID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLl92dHMgPD0gaW52b2tlci5hdHRhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIGludm9rZXIudmFsdWUpLCBpbnN0YW5jZSwgNSAvKiBFcnJvckNvZGVzLk5BVElWRV9FVkVOVF9IQU5ETEVSICovLCBbZV0pO1xuICAgIH07XG4gICAgaW52b2tlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBpbnZva2VyLmF0dGFjaGVkID0gZ2V0Tm93KCk7XG4gICAgcmV0dXJuIGludm9rZXI7XG59XG5mdW5jdGlvbiBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCB2YWx1ZSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBvcmlnaW5hbFN0b3AuY2FsbChlKTtcbiAgICAgICAgICAgIGUuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZuID0+IChlKSA9PiAhZS5fc3RvcHBlZCAmJiBmbiAmJiBmbihlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuXG5jb25zdCBuYXRpdmVPblJFID0gL15vblthLXpdLztcbmNvbnN0IHBhdGNoUHJvcCA9IChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaXNTVkcgPSBmYWxzZSwgcHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgLy8gaWdub3JlIHYtbW9kZWwgbGlzdGVuZXJzXG4gICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgICAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5WzBdID09PSAnLidcbiAgICAgICAgPyAoKGtleSA9IGtleS5zbGljZSgxKSksIHRydWUpXG4gICAgICAgIDoga2V5WzBdID09PSAnXidcbiAgICAgICAgICAgID8gKChrZXkgPSBrZXkuc2xpY2UoMSkpLCBmYWxzZSlcbiAgICAgICAgICAgIDogc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpKSB7XG4gICAgICAgIHBhdGNoRE9NUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPGlucHV0IHYtbW9kZWwgdHlwZT1cImNoZWNrYm94XCI+IHdpdGhcbiAgICAgICAgLy8gOnRydWUtdmFsdWUgJiA6ZmFsc2UtdmFsdWVcbiAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgZG9tIHByb3BlcnRpZXMgc2luY2Ugbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZVxuICAgICAgICAvLyBzdHJpbmdpZmllZC5cbiAgICAgICAgaWYgKGtleSA9PT0gJ3RydWUtdmFsdWUnKSB7XG4gICAgICAgICAgICBlbC5fdHJ1ZVZhbHVlID0gbmV4dFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZhbHNlLXZhbHVlJykge1xuICAgICAgICAgICAgZWwuX2ZhbHNlVmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XG4gICAgaWYgKGlzU1ZHKSB7XG4gICAgICAgIC8vIG1vc3Qga2V5cyBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGUgb24gc3ZnIGVsZW1lbnRzIHRvIHdvcmtcbiAgICAgICAgLy8gLi4uZXhjZXB0IGlubmVySFRNTCAmIHRleHRDb250ZW50XG4gICAgICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3IgbmF0aXZlIG9uY2xpY2sgd2l0aCBmdW5jdGlvbiB2YWx1ZXNcbiAgICAgICAgaWYgKGtleSBpbiBlbCAmJiBuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyB0aGVzZSBhcmUgZW51bWVyYXRlZCBhdHRycywgaG93ZXZlciB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBwcm9wZXJ0aWVzXG4gICAgLy8gYXJlIGFjdHVhbGx5IGJvb2xlYW5zIC0gdGhpcyBsZWFkcyB0byBzZXR0aW5nIGl0IHdpdGggYSBzdHJpbmcgXCJmYWxzZVwiXG4gICAgLy8gdmFsdWUgbGVhZGluZyBpdCB0byBiZSBjb2VyY2VkIHRvIGB0cnVlYCwgc28gd2UgbmVlZCB0byBhbHdheXMgdHJlYXRcbiAgICAvLyB0aGVtIGFzIGF0dHJpYnV0ZXMuXG4gICAgLy8gTm90ZSB0aGF0IGBjb250ZW50RWRpdGFibGVgIGRvZXNuJ3QgaGF2ZSB0aGlzIHByb2JsZW06IGl0cyBET01cbiAgICAvLyBwcm9wZXJ0eSBpcyBhbHNvIGVudW1lcmF0ZWQgc3RyaW5nIHZhbHVlcy5cbiAgICBpZiAoa2V5ID09PSAnc3BlbGxjaGVjaycgfHwga2V5ID09PSAnZHJhZ2dhYmxlJyB8fCBrZXkgPT09ICd0cmFuc2xhdGUnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzE3ODcsICMyODQwIGZvcm0gcHJvcGVydHkgb24gZm9ybSBlbGVtZW50cyBpcyByZWFkb25seSBhbmQgbXVzdCBiZSBzZXQgYXNcbiAgICAvLyBhdHRyaWJ1dGUuXG4gICAgaWYgKGtleSA9PT0gJ2Zvcm0nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzE1MjYgPGlucHV0IGxpc3Q+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzI3NjYgPHRleHRhcmVhIHR5cGU+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChrZXkgPT09ICd0eXBlJyAmJiBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gbmF0aXZlIG9uY2xpY2sgd2l0aCBzdHJpbmcgdmFsdWUsIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5IGluIGVsO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUpIHtcbiAgICBjb25zdCBDb21wID0gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpO1xuICAgIGNsYXNzIFZ1ZUN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBWdWVFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoaW5pdGlhbFByb3BzKSB7XG4gICAgICAgICAgICBzdXBlcihDb21wLCBpbml0aWFsUHJvcHMsIGh5ZHJhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFZ1ZUN1c3RvbUVsZW1lbnQuZGVmID0gQ29tcDtcbiAgICByZXR1cm4gVnVlQ3VzdG9tRWxlbWVudDtcbn1cbmNvbnN0IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQgPSAoKG9wdGlvbnMpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGRlZmluZUN1c3RvbUVsZW1lbnQob3B0aW9ucywgaHlkcmF0ZSk7XG59KTtcbmNvbnN0IEJhc2VDbGFzcyA9ICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTEVsZW1lbnQgOiBjbGFzcyB7XG59KTtcbmNsYXNzIFZ1ZUVsZW1lbnQgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKF9kZWYsIF9wcm9wcyA9IHt9LCBoeWRyYXRlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2RlZiA9IF9kZWY7XG4gICAgICAgIHRoaXMuX3Byb3BzID0gX3Byb3BzO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9udW1iZXJQcm9wcyA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgaHlkcmF0ZSkge1xuICAgICAgICAgICAgaHlkcmF0ZSh0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXN0b20gZWxlbWVudCBoYXMgcHJlLXJlbmRlcmVkIGRlY2xhcmF0aXZlIHNoYWRvdyByb290IGJ1dCBpcyBub3QgYCArXG4gICAgICAgICAgICAgICAgICAgIGBkZWZpbmVkIGFzIGh5ZHJhdGFibGUuIFVzZSBcXGBkZWZpbmVTU1JDdXN0b21FbGVtZW50XFxgLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIHN5bmMgY29tcG9uZW50IGRlZnMgd2UgY2FuIGltbWVkaWF0ZWx5IHJlc29sdmUgcHJvcHNcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlUHJvcHModGhpcy5fZGVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlRGVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJlc29sdmUgaW5uZXIgY29tcG9uZW50IGRlZmluaXRpb24gKGhhbmRsZSBwb3NzaWJsZSBhc3luYyBjb21wb25lbnQpXG4gICAgICovXG4gICAgX3Jlc29sdmVEZWYoKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgLy8gc2V0IGluaXRpYWwgYXR0cnNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIodGhpcy5hdHRyaWJ1dGVzW2ldLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdhdGNoIGZ1dHVyZSBhdHRyIGNoYW5nZXNcbiAgICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25zID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbSBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBdHRyKG0uYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCByZXNvbHZlID0gKGRlZiwgaXNBc3luYyA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBzdHlsZXMgfSA9IGRlZjtcbiAgICAgICAgICAgIC8vIGNhc3QgTnVtYmVyLXR5cGUgcHJvcHMgc2V0IGJlZm9yZSByZXNvbHZlXG4gICAgICAgICAgICBsZXQgbnVtYmVyUHJvcHM7XG4gICAgICAgICAgICBpZiAocHJvcHMgJiYgIWlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdCA9PT0gTnVtYmVyIHx8IChvcHQgJiYgb3B0LnR5cGUgPT09IE51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wc1trZXldID0gdG9OdW1iZXIodGhpcy5fcHJvcHNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAobnVtYmVyUHJvcHMgfHwgKG51bWJlclByb3BzID0gT2JqZWN0LmNyZWF0ZShudWxsKSkpW2NhbWVsaXplJDEoa2V5KV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudW1iZXJQcm9wcztcbiAgICAgICAgICAgIGlmIChpc0FzeW5jKSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmaW5pbmcgZ2V0dGVyL3NldHRlcnMgb24gcHJvdG90eXBlXG4gICAgICAgICAgICAgICAgLy8gZm9yIHN5bmMgZGVmcywgdGhpcyBhbHJlYWR5IGhhcHBlbmVkIGluIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVQcm9wcyhkZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXBwbHkgQ1NTXG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhzdHlsZXMpO1xuICAgICAgICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhc3luY0RlZiA9IHRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyO1xuICAgICAgICBpZiAoYXN5bmNEZWYpIHtcbiAgICAgICAgICAgIGFzeW5jRGVmKCkudGhlbihkZWYgPT4gcmVzb2x2ZShkZWYsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5fZGVmKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVzb2x2ZVByb3BzKGRlZikge1xuICAgICAgICBjb25zdCB7IHByb3BzIH0gPSBkZWY7XG4gICAgICAgIGNvbnN0IGRlY2xhcmVkUHJvcEtleXMgPSBpc0FycmF5KHByb3BzKSA/IHByb3BzIDogT2JqZWN0LmtleXMocHJvcHMgfHwge30pO1xuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgcHJvcHMgc2V0IHByZS11cGdyYWRlIG9yIGNvbm5lY3RcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcykpIHtcbiAgICAgICAgICAgIGlmIChrZXlbMF0gIT09ICdfJyAmJiBkZWNsYXJlZFByb3BLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdGhpc1trZXldLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVmaW5pbmcgZ2V0dGVyL3NldHRlcnMgb24gcHJvdG90eXBlXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGRlY2xhcmVkUHJvcEtleXMubWFwKGNhbWVsaXplJDEpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcChrZXkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc2V0QXR0cihrZXkpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgY29uc3QgY2FtZWxLZXkgPSBjYW1lbGl6ZSQxKGtleSk7XG4gICAgICAgIGlmICh0aGlzLl9udW1iZXJQcm9wcyAmJiB0aGlzLl9udW1iZXJQcm9wc1tjYW1lbEtleV0pIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldFByb3AoY2FtZWxLZXksIHZhbHVlLCBmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9nZXRQcm9wKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcHNba2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3NldFByb3Aoa2V5LCB2YWwsIHNob3VsZFJlZmxlY3QgPSB0cnVlLCBzaG91bGRVcGRhdGUgPSB0cnVlKSB7XG4gICAgICAgIGlmICh2YWwgIT09IHRoaXMuX3Byb3BzW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3BzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlICYmIHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZWZsZWN0XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVmbGVjdCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIHZhbCArICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF91cGRhdGUoKSB7XG4gICAgICAgIHJlbmRlcih0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgIH1cbiAgICBfY3JlYXRlVk5vZGUoKSB7XG4gICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodGhpcy5fZGVmLCBleHRlbmQoe30sIHRoaXMuX3Byb3BzKSk7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZub2RlLmNlID0gaW5zdGFuY2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNDRSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gSE1SXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZCA9IG5ld1N0eWxlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgcmVzZXQgc3R5bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmZvckVhY2gocyA9PiB0aGlzLnNoYWRvd1Jvb3QucmVtb3ZlQ2hpbGQocykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMobmV3U3R5bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwYXRjaCA9IChldmVudCwgYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gaW50ZXJjZXB0IGVtaXRcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5lbWl0ID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc3BhdGNoIGJvdGggdGhlIHJhdyBhbmQgaHlwaGVuYXRlZCB2ZXJzaW9ucyBvZiBhbiBldmVudFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBtYXRjaCBWdWUgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZXZlbnQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHlwaGVuYXRlKGV2ZW50KSAhPT0gZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGh5cGhlbmF0ZShldmVudCksIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBsb2NhdGUgbmVhcmVzdCBWdWUgY3VzdG9tIGVsZW1lbnQgcGFyZW50IGZvciBwcm92aWRlL2luamVjdFxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHdoaWxlICgocGFyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ICYmIChwYXJlbnQucGFyZW50Tm9kZSB8fCBwYXJlbnQuaG9zdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBWdWVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQgPSBwYXJlbnQuX2luc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucHJvdmlkZXMgPSBwYXJlbnQuX2luc3RhbmNlLnByb3ZpZGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICB9XG4gICAgX2FwcGx5U3R5bGVzKHN0eWxlcykge1xuICAgICAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgICAgICBzdHlsZXMuZm9yRWFjaChjc3MgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIHMudGV4dENvbnRlbnQgPSBjc3M7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHMpO1xuICAgICAgICAgICAgICAgIC8vIHJlY29yZCBmb3IgSE1SXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3R5bGVzIHx8ICh0aGlzLl9zdHlsZXMgPSBbXSkpLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVzZUNzc01vZHVsZShuYW1lID0gJyRzdHlsZScpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHVzZUNzc01vZHVsZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgc2V0dXAoKWApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XG4gICAgICAgIGlmICghbW9kdWxlcykge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlcyBpbmplY3RlZC5gKTtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kID0gbW9kdWxlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFtb2QpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlIG5hbWVkIFwiJHtuYW1lfVwiLmApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgU0ZDJ3MgQ1NTIHZhcmlhYmxlIGluamVjdGlvbiBmZWF0dXJlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXNlQ3NzVmFycyhnZXR0ZXIpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIHdhcm4oYHVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRlbGVwb3J0cyA9IChpbnN0YW5jZS51dCA9ICh2YXJzID0gZ2V0dGVyKGluc3RhbmNlLnByb3h5KSkgPT4ge1xuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtkYXRhLXYtb3duZXI9XCIke2luc3RhbmNlLnVpZH1cIl1gKSkuZm9yRWFjaChub2RlID0+IHNldFZhcnNPbk5vZGUobm9kZSwgdmFycykpO1xuICAgIH0pO1xuICAgIGNvbnN0IHNldFZhcnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhcnMgPSBnZXR0ZXIoaW5zdGFuY2UucHJveHkpO1xuICAgICAgICBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCB2YXJzKTtcbiAgICAgICAgdXBkYXRlVGVsZXBvcnRzKHZhcnMpO1xuICAgIH07XG4gICAgd2F0Y2hQb3N0RWZmZWN0KHNldFZhcnMpO1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoc2V0VmFycyk7XG4gICAgICAgIG9iLm9ic2VydmUoaW5zdGFuY2Uuc3ViVHJlZS5lbC5wYXJlbnROb2RlLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICAgICAgb25Vbm1vdW50ZWQoKCkgPT4gb2IuZGlzY29ubmVjdCgpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhcnNPblZOb2RlKHZub2RlLCB2YXJzKSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2U7XG4gICAgICAgIHZub2RlID0gc3VzcGVuc2UuYWN0aXZlQnJhbmNoO1xuICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VmFyc09uVk5vZGUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCB2YXJzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGRyaWxsIGRvd24gSE9DcyB1bnRpbCBpdCdzIGEgbm9uLWNvbXBvbmVudCB2bm9kZVxuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnQpIHtcbiAgICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgICB9XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmIHZub2RlLmVsKSB7XG4gICAgICAgIHNldFZhcnNPbk5vZGUodm5vZGUuZWwsIHZhcnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKGMgPT4gc2V0VmFyc09uVk5vZGUoYywgdmFycykpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBTdGF0aWMpIHtcbiAgICAgICAgbGV0IHsgZWwsIGFuY2hvciB9ID0gdm5vZGU7XG4gICAgICAgIHdoaWxlIChlbCkge1xuICAgICAgICAgICAgc2V0VmFyc09uTm9kZShlbCwgdmFycyk7XG4gICAgICAgICAgICBpZiAoZWwgPT09IGFuY2hvcilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGVsID0gZWwubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZXRWYXJzT25Ob2RlKGVsLCB2YXJzKSB7XG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhcnMpIHtcbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KGAtLSR7a2V5fWAsIHZhcnNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG5jb25zdCBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcbi8vIERPTSBUcmFuc2l0aW9uIGlzIGEgaGlnaGVyLW9yZGVyLWNvbXBvbmVudCBiYXNlZCBvbiB0aGUgcGxhdGZvcm0tYWdub3N0aWNcbi8vIGJhc2UgVHJhbnNpdGlvbiBjb21wb25lbnQsIHdpdGggRE9NLXNwZWNpZmljIGxvZ2ljLlxuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xuVHJhbnNpdGlvbi5kaXNwbGF5TmFtZSA9ICdUcmFuc2l0aW9uJztcbmNvbnN0IERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjc3M6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcbiAgICBlbnRlckZyb21DbGFzczogU3RyaW5nLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZUZyb21DbGFzczogU3RyaW5nLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xufTtcbmNvbnN0IFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSAoVHJhbnNpdGlvbi5wcm9wcyA9XG4gICAgLyojX19QVVJFX18qLyBleHRlbmQoe30sIEJhc2VUcmFuc2l0aW9uLnByb3BzLCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSk7XG4vKipcbiAqICMzMjI3IEluY29taW5nIGhvb2tzIG1heSBiZSBtZXJnZWQgaW50byBhcnJheXMgd2hlbiB3cmFwcGluZyBUcmFuc2l0aW9uXG4gKiB3aXRoIGN1c3RvbSBIT0NzLlxuICovXG5jb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzID0gW10pID0+IHtcbiAgICBpZiAoaXNBcnJheShob29rKSkge1xuICAgICAgICBob29rLmZvckVhY2goaCA9PiBoKC4uLmFyZ3MpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaG9vaykge1xuICAgICAgICBob29rKC4uLmFyZ3MpO1xuICAgIH1cbn07XG4vKipcbiAqIENoZWNrIGlmIGEgaG9vayBleHBlY3RzIGEgY2FsbGJhY2sgKDJuZCBhcmcpLCB3aGljaCBtZWFucyB0aGUgdXNlclxuICogaW50ZW5kcyB0byBleHBsaWNpdGx5IGNvbnRyb2wgdGhlIGVuZCBvZiB0aGUgdHJhbnNpdGlvbi5cbiAqL1xuY29uc3QgaGFzRXhwbGljaXRDYWxsYmFjayA9IChob29rKSA9PiB7XG4gICAgcmV0dXJuIGhvb2tcbiAgICAgICAgPyBpc0FycmF5KGhvb2spXG4gICAgICAgICAgICA/IGhvb2suc29tZShoID0+IGgubGVuZ3RoID4gMSlcbiAgICAgICAgICAgIDogaG9vay5sZW5ndGggPiAxXG4gICAgICAgIDogZmFsc2U7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcykge1xuICAgIGNvbnN0IGJhc2VQcm9wcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSkge1xuICAgICAgICAgICAgYmFzZVByb3BzW2tleV0gPSByYXdQcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyYXdQcm9wcy5jc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBiYXNlUHJvcHM7XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZSA9ICd2JywgdHlwZSwgZHVyYXRpb24sIGVudGVyRnJvbUNsYXNzID0gYCR7bmFtZX0tZW50ZXItZnJvbWAsIGVudGVyQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1hY3RpdmVgLCBlbnRlclRvQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci10b2AsIGFwcGVhckZyb21DbGFzcyA9IGVudGVyRnJvbUNsYXNzLCBhcHBlYXJBY3RpdmVDbGFzcyA9IGVudGVyQWN0aXZlQ2xhc3MsIGFwcGVhclRvQ2xhc3MgPSBlbnRlclRvQ2xhc3MsIGxlYXZlRnJvbUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtZnJvbWAsIGxlYXZlQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1hY3RpdmVgLCBsZWF2ZVRvQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS10b2AgfSA9IHJhd1Byb3BzO1xuICAgIGNvbnN0IGR1cmF0aW9ucyA9IG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICBjb25zdCBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1swXTtcbiAgICBjb25zdCBsZWF2ZUR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1sxXTtcbiAgICBjb25zdCB7IG9uQmVmb3JlRW50ZXIsIG9uRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyID0gb25CZWZvcmVFbnRlciwgb25BcHBlYXIgPSBvbkVudGVyLCBvbkFwcGVhckNhbmNlbGxlZCA9IG9uRW50ZXJDYW5jZWxsZWQgfSA9IGJhc2VQcm9wcztcbiAgICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUpID0+IHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyQWN0aXZlQ2xhc3MgOiBlbnRlckFjdGl2ZUNsYXNzKTtcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XG4gICAgfTtcbiAgICBjb25zdCBmaW5pc2hMZWF2ZSA9IChlbCwgZG9uZSkgPT4ge1xuICAgICAgICBlbC5faXNMZWF2aW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICAgIGRvbmUgJiYgZG9uZSgpO1xuICAgIH07XG4gICAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xuICAgICAgICByZXR1cm4gKGVsLCBkb25lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBob29rID0gaXNBcHBlYXIgPyBvbkFwcGVhciA6IG9uRW50ZXI7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoRW50ZXIoZWwsIGlzQXBwZWFyLCBkb25lKTtcbiAgICAgICAgICAgIGNhbGxIb29rKGhvb2ssIFtlbCwgcmVzb2x2ZV0pO1xuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyRnJvbUNsYXNzIDogZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0Q2FsbGJhY2soaG9vaykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBlbnRlckR1cmF0aW9uLCByZXNvbHZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XG4gICAgICAgIG9uQmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlRW50ZXIsIFtlbF0pO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckZyb21DbGFzcyk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVBcHBlYXIsIFtlbF0pO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRW50ZXI6IG1ha2VFbnRlckhvb2soZmFsc2UpLFxuICAgICAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcbiAgICAgICAgb25MZWF2ZShlbCwgZG9uZSkge1xuICAgICAgICAgICAgZWwuX2lzTGVhdmluZyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoTGVhdmUoZWwsIGRvbmUpO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgc28gKi1sZWF2ZS1mcm9tIGNsYXNzZXMgaW1tZWRpYXRlbHkgdGFrZSBlZmZlY3QgKCMyNTkzKVxuICAgICAgICAgICAgZm9yY2VSZWZsb3coKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZWwuX2lzTGVhdmluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWxsZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNFeHBsaWNpdENhbGxiYWNrKG9uTGVhdmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgbGVhdmVEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlLCBbZWwsIHJlc29sdmVdKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FbnRlckNhbmNlbGxlZChlbCkge1xuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIGZhbHNlKTtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uRW50ZXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZChlbCkge1xuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIHRydWUpO1xuICAgICAgICAgICAgY2FsbEhvb2sob25BcHBlYXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkKGVsKSB7XG4gICAgICAgICAgICBmaW5pc2hMZWF2ZShlbCk7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoZHVyYXRpb24pKSB7XG4gICAgICAgIHJldHVybiBbTnVtYmVyT2YoZHVyYXRpb24uZW50ZXIpLCBOdW1iZXJPZihkdXJhdGlvbi5sZWF2ZSldO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbiA9IE51bWJlck9mKGR1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtuLCBuXTtcbiAgICB9XG59XG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcbiAgICBjb25zdCByZXMgPSB0b051bWJlcih2YWwpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgYXNzZXJ0TnVtYmVyKHJlcywgJzx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QuYWRkKGMpKTtcbiAgICAoZWwuX3Z0YyB8fFxuICAgICAgICAoZWwuX3Z0YyA9IG5ldyBTZXQoKSkpLmFkZChjbHMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcbiAgICBjb25zdCB7IF92dGMgfSA9IGVsO1xuICAgIGlmIChfdnRjKSB7XG4gICAgICAgIF92dGMuZGVsZXRlKGNscyk7XG4gICAgICAgIGlmICghX3Z0Yy5zaXplKSB7XG4gICAgICAgICAgICBlbC5fdnRjID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gbmV4dEZyYW1lKGNiKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKTtcbiAgICB9KTtcbn1cbmxldCBlbmRJZCA9IDA7XG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIGV4cGVjdGVkVHlwZSwgZXhwbGljaXRUaW1lb3V0LCByZXNvbHZlKSB7XG4gICAgY29uc3QgaWQgPSAoZWwuX2VuZElkID0gKytlbmRJZCk7XG4gICAgY29uc3QgcmVzb2x2ZUlmTm90U3RhbGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChpZCA9PT0gZWwuX2VuZElkKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChleHBsaWNpdFRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZUlmTm90U3RhbGUsIGV4cGxpY2l0VGltZW91dCk7XG4gICAgfVxuICAgIGNvbnN0IHsgdHlwZSwgdGltZW91dCwgcHJvcENvdW50IH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB9XG4gICAgY29uc3QgZW5kRXZlbnQgPSB0eXBlICsgJ2VuZCc7XG4gICAgbGV0IGVuZGVkID0gMDtcbiAgICBjb25zdCBlbmQgPSAoKSA9PiB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbiAgICAgICAgcmVzb2x2ZUlmTm90U3RhbGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uRW5kID0gKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCAmJiArK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgICAgICAgIGVuZCgpO1xuICAgICAgICB9XG4gICAgfSwgdGltZW91dCArIDEpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICAgIGNvbnN0IGdldFN0eWxlUHJvcGVydGllcyA9IChrZXkpID0+IChzdHlsZXNba2V5XSB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgdHJhbnNpdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OfURlbGF5YCk7XG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OfUR1cmF0aW9uYCk7XG4gICAgY29uc3QgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICAgIGNvbnN0IGFuaW1hdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtBTklNQVRJT059RGVsYXlgKTtcbiAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7QU5JTUFUSU9OfUR1cmF0aW9uYCk7XG4gICAgY29uc3QgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuICAgIGxldCB0eXBlID0gbnVsbDtcbiAgICBsZXQgdGltZW91dCA9IDA7XG4gICAgbGV0IHByb3BDb3VudCA9IDA7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICAgICAgdHlwZSA9XG4gICAgICAgICAgICB0aW1lb3V0ID4gMFxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgICAgICAgICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICAgICAgICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICAgICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICAgICAgOiAwO1xuICAgIH1cbiAgICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgICAgIC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTn1Qcm9wZXJ0eWApLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRpbWVvdXQsXG4gICAgICAgIHByb3BDb3VudCxcbiAgICAgICAgaGFzVHJhbnNmb3JtXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xufVxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXJcbi8vIG51bWJlcnMgaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93blxuLy8gKGkuZS4gYWN0aW5nIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMocykge1xuICAgIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMDtcbn1cbi8vIHN5bmNocm9ub3VzbHkgZm9yY2UgbGF5b3V0IHRvIHB1dCBlbGVtZW50cyBpbnRvIGEgY2VydGFpbiBzdGF0ZVxuZnVuY3Rpb24gZm9yY2VSZWZsb3coKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xufVxuXG5jb25zdCBwb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBuZXdQb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0ge1xuICAgIG5hbWU6ICdUcmFuc2l0aW9uR3JvdXAnLFxuICAgIHByb3BzOiAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycywge1xuICAgICAgICB0YWc6IFN0cmluZyxcbiAgICAgICAgbW92ZUNsYXNzOiBTdHJpbmdcbiAgICB9KSxcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgICAgIGxldCBwcmV2Q2hpbGRyZW47XG4gICAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgICAgb25VcGRhdGVkKCgpID0+IHtcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vdmVDbGFzcyA9IHByb3BzLm1vdmVDbGFzcyB8fCBgJHtwcm9wcy5uYW1lIHx8ICd2J30tbW92ZWA7XG4gICAgICAgICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShwcmV2Q2hpbGRyZW5bMF0uZWwsIGluc3RhbmNlLnZub2RlLmVsLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgICAgICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gYy5lbDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IChlbC5fbW92ZUNiID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgICAgICAgY29uc3QgY3NzVHJhbnNpdGlvblByb3BzID0gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcyk7XG4gICAgICAgICAgICBsZXQgdGFnID0gcmF3UHJvcHMudGFnIHx8IEZyYWdtZW50O1xuICAgICAgICAgICAgcHJldkNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgICAgICBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgPyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpKSA6IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYDxUcmFuc2l0aW9uR3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJldkNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uTWFwLnNldChjaGlsZCwgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0YWcsIG51bGwsIGNoaWxkcmVuKTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBUcmFuc2l0aW9uR3JvdXAgZG9lcyBub3Qgc3VwcG9ydCBcIm1vZGVcIiBzbyB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBmcm9tIHRoZVxuICogcHJvcHMgZGVjbGFyYXRpb25zLCBidXQgZGlyZWN0IGRlbGV0ZSBvcGVyYXRpb24gaXMgY29uc2lkZXJlZCBhIHNpZGUgZWZmZWN0XG4gKiBhbmQgd2lsbCBtYWtlIHRoZSBlbnRpcmUgdHJhbnNpdGlvbiBmZWF0dXJlIG5vbi10cmVlLXNoYWtlYWJsZSwgc28gd2UgZG8gaXRcbiAqIGluIGEgZnVuY3Rpb24gYW5kIG1hcmsgdGhlIGZ1bmN0aW9uJ3MgaW52b2NhdGlvbiBhcyBwdXJlLlxuICovXG5jb25zdCByZW1vdmVNb2RlID0gKHByb3BzKSA9PiBkZWxldGUgcHJvcHMubW9kZTtcbi8qI19fUFVSRV9fKi8gcmVtb3ZlTW9kZShUcmFuc2l0aW9uR3JvdXBJbXBsLnByb3BzKTtcbmNvbnN0IFRyYW5zaXRpb25Hcm91cCA9IFRyYW5zaXRpb25Hcm91cEltcGw7XG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyhjKSB7XG4gICAgY29uc3QgZWwgPSBjLmVsO1xuICAgIGlmIChlbC5fbW92ZUNiKSB7XG4gICAgICAgIGVsLl9tb3ZlQ2IoKTtcbiAgICB9XG4gICAgaWYgKGVsLl9lbnRlckNiKSB7XG4gICAgICAgIGVsLl9lbnRlckNiKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYykge1xuICAgIG5ld1Bvc2l0aW9uTWFwLnNldChjLCBjLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbn1cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24oYykge1xuICAgIGNvbnN0IG9sZFBvcyA9IHBvc2l0aW9uTWFwLmdldChjKTtcbiAgICBjb25zdCBuZXdQb3MgPSBuZXdQb3NpdGlvbk1hcC5nZXQoYyk7XG4gICAgY29uc3QgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICAgIGNvbnN0IGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gICAgaWYgKGR4IHx8IGR5KSB7XG4gICAgICAgIGNvbnN0IHMgPSBjLmVsLnN0eWxlO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMud2Via2l0VHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2R4fXB4LCR7ZHl9cHgpYDtcbiAgICAgICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICAgICAgICByZXR1cm4gYztcbiAgICB9XG59XG5mdW5jdGlvbiBoYXNDU1NUcmFuc2Zvcm0oZWwsIHJvb3QsIG1vdmVDbGFzcykge1xuICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAvLyBpcyBhcHBsaWVkLlxuICAgIGNvbnN0IGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgaWYgKGVsLl92dGMpIHtcbiAgICAgICAgZWwuX3Z0Yy5mb3JFYWNoKGNscyA9PiB7XG4gICAgICAgICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1vdmVDbGFzcy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5hZGQoYykpO1xuICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgY29uc3QgY29udGFpbmVyID0gKHJvb3Qubm9kZVR5cGUgPT09IDEgPyByb290IDogcm9vdC5wYXJlbnROb2RlKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgIGNvbnN0IHsgaGFzVHJhbnNmb3JtIH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICByZXR1cm4gaGFzVHJhbnNmb3JtO1xufVxuXG5jb25zdCBnZXRNb2RlbEFzc2lnbmVyID0gKHZub2RlKSA9PiB7XG4gICAgY29uc3QgZm4gPSB2bm9kZS5wcm9wc1snb25VcGRhdGU6bW9kZWxWYWx1ZSddIHx8XG4gICAgICAgIChmYWxzZSApO1xuICAgIHJldHVybiBpc0FycmF5KGZuKSA/IHZhbHVlID0+IGludm9rZUFycmF5Rm5zKGZuLCB2YWx1ZSkgOiBmbjtcbn07XG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQoZSkge1xuICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAodGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICB0YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnKSk7XG4gICAgfVxufVxuLy8gV2UgYXJlIGV4cG9ydGluZyB0aGUgdi1tb2RlbCBydW50aW1lIGRpcmVjdGx5IGFzIHZub2RlIGhvb2tzIHNvIHRoYXQgaXQgY2FuXG4vLyBiZSB0cmVlLXNoYWtlbiBpbiBjYXNlIHYtbW9kZWwgaXMgbmV2ZXIgdXNlZC5cbmNvbnN0IHZNb2RlbFRleHQgPSB7XG4gICAgY3JlYXRlZChlbCwgeyBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBjb25zdCBjYXN0VG9OdW1iZXIgPSBudW1iZXIgfHwgKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGUgPT09ICdudW1iZXInKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbGF6eSA/ICdjaGFuZ2UnIDogJ2lucHV0JywgZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY29tcG9zaW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCBkb21WYWx1ZSA9IGVsLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRyaW0pIHtcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IGRvbVZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXN0VG9OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IGxvb3NlVG9OdW1iZXIoZG9tVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuX2Fzc2lnbihkb21WYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHJpbSkge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IGVsLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbGF6eSkge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgICAgICBlbC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICAvLyBhdm9pZCBjbGVhcmluZyB1bnJlc29sdmVkIHRleHQuICMyMzAyXG4gICAgICAgIGlmIChlbC5jb21wb3NpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCAmJiBlbC50eXBlICE9PSAncmFuZ2UnKSB7XG4gICAgICAgICAgICBpZiAobGF6eSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmltICYmIGVsLnZhbHVlLnRyaW0oKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG51bWJlciB8fCBlbC50eXBlID09PSAnbnVtYmVyJykgJiZcbiAgICAgICAgICAgICAgICBsb29zZVRvTnVtYmVyKGVsLnZhbHVlKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCB2TW9kZWxDaGVja2JveCA9IHtcbiAgICAvLyAjNDA5NiBhcnJheSBjaGVja2JveGVzIG5lZWQgdG8gYmUgZGVlcCB0cmF2ZXJzZWRcbiAgICBkZWVwOiB0cnVlLFxuICAgIGNyZWF0ZWQoZWwsIF8sIHZub2RlKSB7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsVmFsdWUgPSBlbC5fbW9kZWxWYWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRWYWx1ZSA9IGdldFZhbHVlKGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbC5jaGVja2VkO1xuICAgICAgICAgICAgY29uc3QgYXNzaWduID0gZWwuX2Fzc2lnbjtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsb29zZUluZGV4T2YobW9kZWxWYWx1ZSwgZWxlbWVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZCA9IGluZGV4ICE9PSAtMTtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCAmJiAhZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKG1vZGVsVmFsdWUuY29uY2F0KGVsZW1lbnRWYWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghY2hlY2tlZCAmJiBmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IFsuLi5tb2RlbFZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKGZpbHRlcmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1NldChtb2RlbFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBTZXQobW9kZWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkLmFkZChlbGVtZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkLmRlbGV0ZShlbGVtZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhc3NpZ24oY2xvbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFzc2lnbihnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gc2V0IGluaXRpYWwgY2hlY2tlZCBvbiBtb3VudCB0byB3YWl0IGZvciB0cnVlLXZhbHVlL2ZhbHNlLXZhbHVlXG4gICAgbW91bnRlZDogc2V0Q2hlY2tlZCxcbiAgICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICAgICAgc2V0Q2hlY2tlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzZXRDaGVja2VkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xuICAgIGVsLl9tb2RlbFZhbHVlID0gdmFsdWU7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgZ2V0Q2hlY2tib3hWYWx1ZShlbCwgdHJ1ZSkpO1xuICAgIH1cbn1cbmNvbnN0IHZNb2RlbFJhZGlvID0ge1xuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUgfSwgdm5vZGUpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgZWwuX2Fzc2lnbihnZXRWYWx1ZShlbCkpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IHZNb2RlbFNlbGVjdCA9IHtcbiAgICAvLyA8c2VsZWN0IG11bHRpcGxlPiB2YWx1ZSBuZWVkIHRvIGJlIGRlZXAgdHJhdmVyc2VkXG4gICAgZGVlcDogdHJ1ZSxcbiAgICBjcmVhdGVkKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICAgICAgY29uc3QgaXNTZXRNb2RlbCA9IGlzU2V0KHZhbHVlKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlclxuICAgICAgICAgICAgICAgIC5jYWxsKGVsLm9wdGlvbnMsIChvKSA9PiBvLnNlbGVjdGVkKVxuICAgICAgICAgICAgICAgIC5tYXAoKG8pID0+IG51bWJlciA/IGxvb3NlVG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobykpO1xuICAgICAgICAgICAgZWwuX2Fzc2lnbihlbC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gaXNTZXRNb2RlbFxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBTZXQoc2VsZWN0ZWRWYWwpXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxcbiAgICAgICAgICAgICAgICA6IHNlbGVjdGVkVmFsWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICB9LFxuICAgIC8vIHNldCB2YWx1ZSBpbiBtb3VudGVkICYgdXBkYXRlZCBiZWNhdXNlIDxzZWxlY3Q+IHJlbGllcyBvbiBpdHMgY2hpbGRyZW5cbiAgICAvLyA8b3B0aW9uPnMuXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUoZWwsIF9iaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKSB7XG4gICAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICAgIGlmIChpc011bHRpcGxlICYmICFpc0FycmF5KHZhbHVlKSAmJiAhaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgd2FybihgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPiBleHBlY3RzIGFuIEFycmF5IG9yIFNldCB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGAgK1xuICAgICAgICAgICAgICAgIGBidXQgZ290ICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSl9LmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xuICAgICAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSlcbiAgICAgICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNNdWx0aXBsZSAmJiBlbC5zZWxlY3RlZEluZGV4ICE9PSAtMSkge1xuICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgfVxufVxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIHNldCB2aWEgOnZhbHVlIGJpbmRpbmdzXG5mdW5jdGlvbiBnZXRWYWx1ZShlbCkge1xuICAgIHJldHVybiAnX3ZhbHVlJyBpbiBlbCA/IGVsLl92YWx1ZSA6IGVsLnZhbHVlO1xufVxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIGZvciB0cnVlLXZhbHVlIGFuZCBmYWxzZS12YWx1ZSBzZXQgdmlhIDp0cnVlLXZhbHVlIG9yIDpmYWxzZS12YWx1ZSBiaW5kaW5nc1xuZnVuY3Rpb24gZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkge1xuICAgIGNvbnN0IGtleSA9IGNoZWNrZWQgPyAnX3RydWVWYWx1ZScgOiAnX2ZhbHNlVmFsdWUnO1xuICAgIHJldHVybiBrZXkgaW4gZWwgPyBlbFtrZXldIDogY2hlY2tlZDtcbn1cbmNvbnN0IHZNb2RlbER5bmFtaWMgPSB7XG4gICAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdjcmVhdGVkJyk7XG4gICAgfSxcbiAgICBtb3VudGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ21vdW50ZWQnKTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICd1cGRhdGVkJyk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljTW9kZWwodGFnTmFtZSwgdHlwZSkge1xuICAgIHN3aXRjaCAodGFnTmFtZSkge1xuICAgICAgICBjYXNlICdTRUxFQ1QnOlxuICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFNlbGVjdDtcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxuICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFRleHQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxDaGVja2JveDtcbiAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxSYWRpbztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdk1vZGVsVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XG4gICAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoZWwudGFnTmFtZSwgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSk7XG4gICAgY29uc3QgZm4gPSBtb2RlbFRvVXNlW2hvb2tdO1xuICAgIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcbn1cbi8vIFNTUiB2bm9kZSB0cmFuc2Zvcm1zLCBvbmx5IHVzZWQgd2hlbiB1c2VyIGluY2x1ZGVzIGNsaWVudC1vcmllbnRlZCByZW5kZXJcbi8vIGZ1bmN0aW9uIGluIFNTUlxuZnVuY3Rpb24gaW5pdFZNb2RlbEZvclNTUigpIHtcbiAgICB2TW9kZWxUZXh0LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSkgPT4gKHsgdmFsdWUgfSk7XG4gICAgdk1vZGVsUmFkaW8uZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgICAgICBpZiAodm5vZGUucHJvcHMgJiYgbG9vc2VFcXVhbCh2bm9kZS5wcm9wcy52YWx1ZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZNb2RlbENoZWNrYm94LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSwgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodm5vZGUucHJvcHMgJiYgbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZNb2RlbER5bmFtaWMuZ2V0U1NSUHJvcHMgPSAoYmluZGluZywgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2bm9kZS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsVG9Vc2UgPSByZXNvbHZlRHluYW1pY01vZGVsKFxuICAgICAgICAvLyByZXNvbHZlRHluYW1pY01vZGVsIGV4cGVjdHMgYW4gdXBwZXJjYXNlIHRhZyBuYW1lLCBidXQgdm5vZGUudHlwZSBpcyBsb3dlcmNhc2VcbiAgICAgICAgdm5vZGUudHlwZS50b1VwcGVyQ2FzZSgpLCB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlKTtcbiAgICAgICAgaWYgKG1vZGVsVG9Vc2UuZ2V0U1NSUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbFRvVXNlLmdldFNTUlByb3BzKGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmNvbnN0IHN5c3RlbU1vZGlmaWVycyA9IFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddO1xuY29uc3QgbW9kaWZpZXJHdWFyZHMgPSB7XG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxuICAgIHByZXZlbnQ6IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICAgIHNlbGY6IGUgPT4gZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCxcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXG4gICAgc2hpZnQ6IGUgPT4gIWUuc2hpZnRLZXksXG4gICAgYWx0OiBlID0+ICFlLmFsdEtleSxcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXG4gICAgbGVmdDogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAwLFxuICAgIG1pZGRsZTogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAxLFxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXG4gICAgZXhhY3Q6IChlLCBtb2RpZmllcnMpID0+IHN5c3RlbU1vZGlmaWVycy5zb21lKG0gPT4gZVtgJHttfUtleWBdICYmICFtb2RpZmllcnMuaW5jbHVkZXMobSkpXG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XG4gICAgICAgICAgICBpZiAoZ3VhcmQgJiYgZ3VhcmQoZXZlbnQsIG1vZGlmaWVycykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbihldmVudCwgLi4uYXJncyk7XG4gICAgfTtcbn07XG4vLyBLZXB0IGZvciAyLnggY29tcGF0LlxuLy8gTm90ZTogSUUxMSBjb21wYXQgZm9yIGBzcGFjZWJhcmAgYW5kIGBkZWxgIGlzIHJlbW92ZWQgZm9yIG5vdy5cbmNvbnN0IGtleU5hbWVzID0ge1xuICAgIGVzYzogJ2VzY2FwZScsXG4gICAgc3BhY2U6ICcgJyxcbiAgICB1cDogJ2Fycm93LXVwJyxcbiAgICBsZWZ0OiAnYXJyb3ctbGVmdCcsXG4gICAgcmlnaHQ6ICdhcnJvdy1yaWdodCcsXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxuICAgIGRlbGV0ZTogJ2JhY2tzcGFjZSdcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghKCdrZXknIGluIGV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50S2V5ID0gaHlwaGVuYXRlKGV2ZW50LmtleSk7XG4gICAgICAgIGlmIChtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuY29uc3QgdlNob3cgPSB7XG4gICAgYmVmb3JlTW91bnQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVW5tb3VudChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fdm9kIDogJ25vbmUnO1xufVxuLy8gU1NSIHZub2RlIHRyYW5zZm9ybXMsIG9ubHkgdXNlZCB3aGVuIHVzZXIgaW5jbHVkZXMgY2xpZW50LW9yaWVudGVkIHJlbmRlclxuLy8gZnVuY3Rpb24gaW4gU1NSXG5mdW5jdGlvbiBpbml0VlNob3dGb3JTU1IoKSB7XG4gICAgdlNob3cuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0eWxlOiB7IGRpc3BsYXk6ICdub25lJyB9IH07XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5jb25zdCByZW5kZXJlck9wdGlvbnMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7IHBhdGNoUHJvcCB9LCBub2RlT3BzKTtcbi8vIGxhenkgY3JlYXRlIHRoZSByZW5kZXJlciAtIHRoaXMgbWFrZXMgY29yZSByZW5kZXJlciBsb2dpYyB0cmVlLXNoYWthYmxlXG4vLyBpbiBjYXNlIHRoZSB1c2VyIG9ubHkgaW1wb3J0cyByZWFjdGl2aXR5IHV0aWxpdGllcyBmcm9tIFZ1ZS5cbmxldCByZW5kZXJlcjtcbmxldCBlbmFibGVkSHlkcmF0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcbiAgICByZXR1cm4gKHJlbmRlcmVyIHx8XG4gICAgICAgIChyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucykpKTtcbn1cbmZ1bmN0aW9uIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkge1xuICAgIHJlbmRlcmVyID0gZW5hYmxlZEh5ZHJhdGlvblxuICAgICAgICA/IHJlbmRlcmVyXG4gICAgICAgIDogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKTtcbiAgICBlbmFibGVkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVuZGVyZXI7XG59XG4vLyB1c2UgZXhwbGljaXQgdHlwZSBjYXN0cyBoZXJlIHRvIGF2b2lkIGltcG9ydCgpIGNhbGxzIGluIHJvbGxlZC11cCBkLnRzXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBlbnN1cmVSZW5kZXJlcigpLnJlbmRlciguLi5hcmdzKTtcbn0pO1xuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xuICAgIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuaHlkcmF0ZSguLi5hcmdzKTtcbn0pO1xuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgYXBwID0gZW5zdXJlUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgICAgICBpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayhhcHApO1xuICAgIH1cbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XG4gICAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gYXBwLl9jb21wb25lbnQ7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIC8vIF9fVU5TQUZFX19cbiAgICAgICAgICAgIC8vIFJlYXNvbjogcG90ZW50aWFsIGV4ZWN1dGlvbiBvZiBKUyBleHByZXNzaW9ucyBpbiBpbi1ET00gdGVtcGxhdGUuXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0aGUgaW4tRE9NIHRlbXBsYXRlIGlzIHRydXN0ZWQuIElmIGl0J3NcbiAgICAgICAgICAgIC8vIHJlbmRlcmVkIGJ5IHRoZSBzZXJ2ZXIsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgbm90IGNvbnRhaW4gYW55IHVzZXIgZGF0YS5cbiAgICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZSA9IGNvbnRhaW5lci5pbm5lckhUTUw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xlYXIgY29udGVudCBiZWZvcmUgbW91bnRpbmdcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgICAgICBpZiAoY29udGFpbmVyIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgndi1jbG9haycpO1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufSk7XG5jb25zdCBjcmVhdGVTU1JBcHAgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XG4gICAgICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gICAgfVxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XG4gICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBtb3VudChjb250YWluZXIsIHRydWUsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufSk7XG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcbiAgICAvLyBJbmplY3QgYGlzTmF0aXZlVGFnYFxuICAgIC8vIHRoaXMgaXMgdXNlZCBmb3IgY29tcG9uZW50IG5hbWUgdmFsaWRhdGlvbiAoZGV2IG9ubHkpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcbiAgICAgICAgdmFsdWU6ICh0YWcpID0+IGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHVGFnKHRhZyksXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xufVxuLy8gZGV2IG9ubHlcbmZ1bmN0aW9uIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCkge1xuICAgIGlmIChpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gYXBwLmNvbmZpZy5pc0N1c3RvbUVsZW1lbnQ7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnaXNDdXN0b21FbGVtZW50Jywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0N1c3RvbUVsZW1lbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFRoZSBcXGBpc0N1c3RvbUVsZW1lbnRcXGAgY29uZmlnIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBVc2UgYCArXG4gICAgICAgICAgICAgICAgICAgIGBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgY29uc3QgbXNnID0gYFRoZSBcXGBjb21waWxlck9wdGlvbnNcXGAgY29uZmlnIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIGAgK1xuICAgICAgICAgICAgYGEgYnVpbGQgb2YgVnVlLmpzIHRoYXQgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIgKGFrYSBcImZ1bGwgYnVpbGRcIikuIGAgK1xuICAgICAgICAgICAgYFNpbmNlIHlvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCwgXFxgY29tcGlsZXJPcHRpb25zXFxgIGAgK1xuICAgICAgICAgICAgYG11c3QgYmUgcGFzc2VkIHRvIFxcYEB2dWUvY29tcGlsZXItZG9tXFxgIGluIHRoZSBidWlsZCBzZXR1cCBpbnN0ZWFkLlxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZ1ZS1sb2FkZXI6IHBhc3MgaXQgdmlhIHZ1ZS1sb2FkZXIncyBcXGBjb21waWxlck9wdGlvbnNcXGAgbG9hZGVyIG9wdGlvbi5cXG5gICtcbiAgICAgICAgICAgIGAtIEZvciB2dWUtY2xpOiBzZWUgaHR0cHM6Ly9jbGkudnVlanMub3JnL2d1aWRlL3dlYnBhY2suaHRtbCNtb2RpZnlpbmctb3B0aW9ucy1vZi1hLWxvYWRlclxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZpdGU6IHBhc3MgaXQgdmlhIEB2aXRlanMvcGx1Z2luLXZ1ZSBvcHRpb25zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL3RyZWUvbWFpbi9wYWNrYWdlcy9wbHVnaW4tdnVlI2V4YW1wbGUtZm9yLXBhc3Npbmctb3B0aW9ucy10by12dWVjb21waWxlci1kb21gO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgJ2NvbXBpbGVyT3B0aW9ucycsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFyZXMpIHtcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byBtb3VudCBhcHA6IG1vdW50IHRhcmdldCBzZWxlY3RvciBcIiR7Y29udGFpbmVyfVwiIHJldHVybmVkIG51bGwuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICB3aW5kb3cuU2hhZG93Um9vdCAmJlxuICAgICAgICBjb250YWluZXIgaW5zdGFuY2VvZiB3aW5kb3cuU2hhZG93Um9vdCAmJlxuICAgICAgICBjb250YWluZXIubW9kZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgd2FybihgbW91bnRpbmcgb24gYSBTaGFkb3dSb290IHdpdGggXFxge21vZGU6IFwiY2xvc2VkXCJ9XFxgIG1heSBsZWFkIHRvIHVucHJlZGljdGFibGUgYnVnc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGFpbmVyO1xufVxubGV0IHNzckRpcmVjdGl2ZUluaXRpYWxpemVkID0gZmFsc2U7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBpbml0RGlyZWN0aXZlc0ZvclNTUiA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzc3JEaXJlY3RpdmVJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaW5pdFZNb2RlbEZvclNTUigpO1xuICAgICAgICAgICAgaW5pdFZTaG93Rm9yU1NSKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgO1xuXG5leHBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAsIFZ1ZUVsZW1lbnQsIGNyZWF0ZUFwcCwgY3JlYXRlU1NSQXBwLCBkZWZpbmVDdXN0b21FbGVtZW50LCBkZWZpbmVTU1JDdXN0b21FbGVtZW50LCBoeWRyYXRlLCBpbml0RGlyZWN0aXZlc0ZvclNTUiwgcmVuZGVyLCB1c2VDc3NNb2R1bGUsIHVzZUNzc1ZhcnMsIHZNb2RlbENoZWNrYm94LCB2TW9kZWxEeW5hbWljLCB2TW9kZWxSYWRpbywgdk1vZGVsU2VsZWN0LCB2TW9kZWxUZXh0LCB2U2hvdywgd2l0aEtleXMsIHdpdGhNb2RpZmllcnMgfTtcbiIsImltcG9ydCB7IGluaXRDdXN0b21Gb3JtYXR0ZXIsIHdhcm4gfSBmcm9tICdAdnVlL3J1bnRpbWUtZG9tJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuXG5mdW5jdGlvbiBpbml0RGV2KCkge1xuICAgIHtcbiAgICAgICAgaW5pdEN1c3RvbUZvcm1hdHRlcigpO1xuICAgIH1cbn1cblxuLy8gVGhpcyBlbnRyeSBleHBvcnRzIHRoZSBydW50aW1lIG9ubHksIGFuZCBpcyBidWlsdCBhc1xuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGluaXREZXYoKTtcbn1cbmNvbnN0IGNvbXBpbGUgPSAoKSA9PiB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBSdW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArXG4gICAgICAgICAgICAoYCBDb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGFsaWFzIFwidnVlXCIgdG8gXCJ2dWUvZGlzdC92dWUuZXNtLWJ1bmRsZXIuanNcIi5gXG4gICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgY29tcGlsZSB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBydW50aW1lIGhlbHBlciBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIG9uIGNvbXBvbmVudHNcbi8vIGluIGEgdHJlZS1zaGFrYWJsZSB3YXlcbmV4cG9ydHMuZGVmYXVsdCA9IChzZmMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2ZjLl9fdmNjT3B0cyB8fCBzZmM7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHByb3BzKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHZNb2RlbFJhZGlvIGFzIF92TW9kZWxSYWRpbywgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgdk1vZGVsVGV4dCBhcyBfdk1vZGVsVGV4dCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHVucmVmIGFzIF91bnJlZiwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcgfSBmcm9tIFwidnVlXCJcblxuY29uc3QgX2hvaXN0ZWRfMSA9IHsgY2xhc3M6IFwicm9vdFwiIH1cbmNvbnN0IF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImgxXCIsIHsgc3R5bGU6IHtcIm1hcmdpblwiOlwiMjRweCAwXCJ9IH0sIFwidnVlanMtYmx1cmhhc2ggZGVtb1wiLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiaHJcIiwgbnVsbCwgbnVsbCwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzQgPSB7IGNsYXNzOiBcIm1vZGUtc2VsZWN0XCIgfVxuY29uc3QgX2hvaXN0ZWRfNSA9IHtcbiAgZm9yOiBcIm9wdGlvbi0xXCIsXG4gIGNsYXNzOiBcInJhZGlvLWlucHV0XCJcbn1cbmNvbnN0IF9ob2lzdGVkXzYgPSBbXCJjaGVja2VkXCJdXG5jb25zdCBfaG9pc3RlZF83ID0ge1xuICBmb3I6IFwib3B0aW9uLTJcIixcbiAgY2xhc3M6IFwicmFkaW8taW5wdXRcIlxufVxuY29uc3QgX2hvaXN0ZWRfOCA9IFtcImNoZWNrZWRcIl1cbmNvbnN0IF9ob2lzdGVkXzkgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7IGNsYXNzOiBcImhpbnRcIiB9LCBcIk5vdGU6IGVuY29kaW5nIGlzIGRvbmUgaW4gdGhlIGJyb3dzZXIgb25seSAobm8gc2VydmVyIGludm9sdmVkKSFcIiwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzEwID0ge1xuICBrZXk6IDIsXG4gIGNsYXNzOiBcImJsdXJoYXNoRXJyb3JcIlxufVxuY29uc3QgX2hvaXN0ZWRfMTEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInN0cm9uZ1wiLCBudWxsLCBcIkludmFsaWQgYmx1cmhhc2hcIiwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzEyID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJoclwiLCBudWxsLCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMTMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImgyXCIsIG51bGwsIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJwcmVcIiwgeyBjbGFzczogXCJjb2RlXCIgfSwgLyojX19QVVJFX18qL190b0Rpc3BsYXlTdHJpbmcoJzxCbHVyaGFzaCAvPicpKVxuXSwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzE0ID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJoclwiLCBudWxsLCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMTUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImgyXCIsIG51bGwsIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJwcmVcIiwgeyBjbGFzczogXCJjb2RlXCIgfSwgLyojX19QVVJFX18qL190b0Rpc3BsYXlTdHJpbmcoJzxCbHVyaGFzaENhbnZhcyAvPicpKVxuXSwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzE2ID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJmb290ZXJcIiwgbnVsbCwgW1xuICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInVsXCIsIG51bGwsIFtcbiAgICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImxpXCIsIG51bGwsIFtcbiAgICAgIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiYVwiLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL3dvbHRhcHAvcmVhY3QtYmx1cmhhc2hcIixcbiAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICB9LCBcInZ1ZWpzLWJsdXJoYXNoXCIpXG4gICAgXSksXG4gICAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJsaVwiLCBudWxsLCBbXG4gICAgICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImFcIiwge1xuICAgICAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS93b2x0YXBwL2JsdXJoYXNoL3RyZWUvbWFzdGVyL1R5cGVTY3JpcHRcIixcbiAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICB9LCBcIkJsdXJoYXNoIFR5cGVTY3JpcHRcIilcbiAgICBdKSxcbiAgICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImxpXCIsIG51bGwsIFtcbiAgICAgIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiYVwiLCB7XG4gICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9ibHVyaGEuc2hcIixcbiAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICB9LCBcIkJsdXJoYXNoIHdlYnNpdGVcIilcbiAgICBdKVxuICBdKVxuXSwgLTEgLyogSE9JU1RFRCAqLylcblxuaW1wb3J0IHsgcmVmLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc0JsdXJoYXNoVmFsaWQgfSBmcm9tICdibHVyaGFzaCc7XG5pbXBvcnQgQmx1cmhhc2hDYW52YXNEZW1vIGZyb20gJy4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZSc7XG5pbXBvcnQgQmx1cmhhc2hJbWFnZUVuY29kZXIgZnJvbSAnLi9CbHVyaGFzaEltYWdlRW5jb2Rlci52dWUnO1xuaW1wb3J0IEJsdXJoYXNoRGVtbyBmcm9tICcuL0JsdXJoYXNoRGVtby52dWUnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9fZGVmaW5lQ29tcG9uZW50KHtcbiAgX19uYW1lOiAnQXBwJyxcbiAgc2V0dXAoX19wcm9wcykge1xuXG5jb25zdCBtb2RlID0gcmVmKCdoYXNoJyk7XG5jb25zdCBoYXNoSW5wdXQgPSByZWYoJ0xFSFY2bldCMnlrOHB5bzBhZFIqLjdrQ01kbmonKTtcbmNvbnN0IGVuY29kZWRIYXNoID0gcmVmKCcnKTtcbmNvbnN0IGhhc2ggPSBjb21wdXRlZCgoKSA9PiAobW9kZS52YWx1ZSA9PT0gJ2hhc2gnID8gaGFzaElucHV0IDogZW5jb2RlZEhhc2gpLnZhbHVlKTtcbmNvbnN0IGJsdXJoYXNoVmFsaWQgPSBjb21wdXRlZCgoKSA9PiBpc0JsdXJoYXNoVmFsaWQoaGFzaC52YWx1ZSkpO1xuXG5yZXR1cm4gKF9jdHg6IGFueSxfY2FjaGU6IGFueSkgPT4ge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF8xLCBbXG4gICAgX2hvaXN0ZWRfMixcbiAgICBfaG9pc3RlZF8zLFxuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfNCwgW1xuICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImxhYmVsXCIsIF9ob2lzdGVkXzUsIFtcbiAgICAgICAgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgdHlwZTogXCJyYWRpb1wiLFxuICAgICAgICAgIGlkOiBcIm9wdGlvbi0xXCIsXG4gICAgICAgICAgb25DaGFuZ2U6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKGUpID0+IChtb2RlLnZhbHVlID0gZS50YXJnZXQudmFsdWUpKSxcbiAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAoJGV2ZW50OiBhbnkpID0+ICgobW9kZSkudmFsdWUgPSAkZXZlbnQpKSxcbiAgICAgICAgICB2YWx1ZTogXCJoYXNoXCIsXG4gICAgICAgICAgY2hlY2tlZDogbW9kZS52YWx1ZSA9PT0gJ2hhc2gnXG4gICAgICAgIH0sIG51bGwsIDQwIC8qIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLywgX2hvaXN0ZWRfNiksIFtcbiAgICAgICAgICBbX3ZNb2RlbFJhZGlvLCBtb2RlLnZhbHVlXVxuICAgICAgICBdKSxcbiAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIiBCbHVyaGFzaCBzdHJpbmcgXCIpXG4gICAgICBdKSxcbiAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJsYWJlbFwiLCBfaG9pc3RlZF83LCBbXG4gICAgICAgIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKFwiaW5wdXRcIiwge1xuICAgICAgICAgIHR5cGU6IFwicmFkaW9cIixcbiAgICAgICAgICBpZDogXCJvcHRpb24tMlwiLFxuICAgICAgICAgIG9uQ2hhbmdlOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IChlKSA9PiAobW9kZS52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlKSksXG4gICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gKCRldmVudDogYW55KSA9PiAoKG1vZGUpLnZhbHVlID0gJGV2ZW50KSksXG4gICAgICAgICAgdmFsdWU6IFwiaW1hZ2VcIixcbiAgICAgICAgICBjaGVja2VkOiBtb2RlLnZhbHVlID09PSAnaW1hZ2UnXG4gICAgICAgIH0sIG51bGwsIDQwIC8qIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLywgX2hvaXN0ZWRfOCksIFtcbiAgICAgICAgICBbX3ZNb2RlbFJhZGlvLCBtb2RlLnZhbHVlXVxuICAgICAgICBdKSxcbiAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIiBFbmNvZGUgaW1hZ2UgXCIpXG4gICAgICBdKVxuICAgIF0pLFxuICAgIChtb2RlLnZhbHVlID09PSAnaGFzaCcpXG4gICAgICA/IF93aXRoRGlyZWN0aXZlcygoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiaW5wdXRcIiwge1xuICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICBjbGFzczogXCJ0ZXh0LWlucHV0XCIsXG4gICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gKCRldmVudDogYW55KSA9PiAoKGhhc2hJbnB1dCkudmFsdWUgPSAkZXZlbnQpKVxuICAgICAgICB9LCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLykpLCBbXG4gICAgICAgICAgW192TW9kZWxUZXh0LCBoYXNoSW5wdXQudmFsdWVdXG4gICAgICAgIF0pXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgIChtb2RlLnZhbHVlID09PSAnaW1hZ2UnKVxuICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgeyBrZXk6IDEgfSwgW1xuICAgICAgICAgIF9ob2lzdGVkXzksXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKEJsdXJoYXNoSW1hZ2VFbmNvZGVyLCB7XG4gICAgICAgICAgICBtb2RlbFZhbHVlOiBlbmNvZGVkSGFzaC52YWx1ZSxcbiAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9ICgkZXZlbnQ6IGFueSkgPT4gKChlbmNvZGVkSGFzaCkudmFsdWUgPSAkZXZlbnQpKVxuICAgICAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIl0pXG4gICAgICAgIF0sIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgIChfdW5yZWYoaGFzaCkgJiYgIV91bnJlZihibHVyaGFzaFZhbGlkKS5yZXN1bHQpXG4gICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwgX2hvaXN0ZWRfMTAsIFtcbiAgICAgICAgICBfaG9pc3RlZF8xMSxcbiAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIC0gXCIgKyBfdG9EaXNwbGF5U3RyaW5nKF91bnJlZihibHVyaGFzaFZhbGlkKS5lcnJvclJlYXNvbiksIDEgLyogVEVYVCAqLylcbiAgICAgICAgXSkpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgIChfdW5yZWYoYmx1cmhhc2hWYWxpZCkucmVzdWx0KVxuICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgeyBrZXk6IDMgfSwgW1xuICAgICAgICAgIF9ob2lzdGVkXzEyLFxuICAgICAgICAgIF9ob2lzdGVkXzEzLFxuICAgICAgICAgIF9jcmVhdGVWTm9kZShCbHVyaGFzaERlbW8sIHsgaGFzaDogX3VucmVmKGhhc2gpIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFtcImhhc2hcIl0pLFxuICAgICAgICAgIF9ob2lzdGVkXzE0LFxuICAgICAgICAgIF9ob2lzdGVkXzE1LFxuICAgICAgICAgIF9jcmVhdGVWTm9kZShCbHVyaGFzaENhbnZhc0RlbW8sIHsgaGFzaDogX3VucmVmKGhhc2gpIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFtcImhhc2hcIl0pXG4gICAgICAgIF0sIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgIF9ob2lzdGVkXzE2XG4gIF0pKVxufVxufVxuXG59KSIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHdpdGhDdHggYXMgX3dpdGhDdHgsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgdW5yZWYgYXMgX3VucmVmLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoXCJkYXRhLXYtOGNhMTIwMDRcIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKVxuY29uc3QgX2hvaXN0ZWRfMSA9IHsgY2xhc3M6IFwic2V0dGluZ3MtY29udGFpbmVyXCIgfVxuY29uc3QgX2hvaXN0ZWRfMiA9IFtcInZhbHVlXCJdXG5jb25zdCBfaG9pc3RlZF8zID0gW1widmFsdWVcIl1cbmNvbnN0IF9ob2lzdGVkXzQgPSB7IGNsYXNzOiBcImJsdXJoYXNoLWNvbnRhaW5lclwiIH1cblxuaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEJsdXJoYXNoQ2FudmFzIH0gZnJvbSAnLi4vc3JjJztcbmltcG9ydCBTZXR0aW5nIGZyb20gJy4vU2V0dGluZy52dWUnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9fZGVmaW5lQ29tcG9uZW50KHtcbiAgX19uYW1lOiAnQmx1cmhhc2hDYW52YXNEZW1vJyxcbiAgcHJvcHM6IHtcbiAgICBoYXNoOiBudWxsXG4gIH0sXG4gIHNldHVwKF9fcHJvcHM6IGFueSkge1xuXG5jb25zdCBwcm9wcyA9IF9fcHJvcHMgYXMge1xuICBoYXNoOiBzdHJpbmc7XG59O1xuXG5jb25zdCBzaXplID0gcmVmKDI1Nik7XG5jb25zdCBwdW5jaCA9IHJlZigxKTtcblxuXG5cbnJldHVybiAoX2N0eDogYW55LF9jYWNoZTogYW55KSA9PiB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIG51bGwsIFtcbiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICAgIF9jcmVhdGVWTm9kZShTZXR0aW5nLCB7XG4gICAgICAgIGxhYmVsOiBcInNpemVcIixcbiAgICAgICAgdmFsdWU6IGAke3NpemUudmFsdWV9IChweClgXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgdHlwZTogXCJyYW5nZVwiLFxuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAxMDI0LFxuICAgICAgICAgICAgc3RlcDogOCxcbiAgICAgICAgICAgIHZhbHVlOiBzaXplLnZhbHVlLFxuICAgICAgICAgICAgb25JbnB1dDogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoZXYpID0+IHNpemUudmFsdWUgPSBwYXJzZUludChldi50YXJnZXQudmFsdWUpKVxuICAgICAgICAgIH0sIG51bGwsIDQwIC8qIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLywgX2hvaXN0ZWRfMilcbiAgICAgICAgXSksXG4gICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJ2YWx1ZVwiXSksXG4gICAgICBfY3JlYXRlVk5vZGUoU2V0dGluZywge1xuICAgICAgICBsYWJlbDogXCJwdW5jaFwiLFxuICAgICAgICB2YWx1ZTogcHVuY2gudmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcInJhbmdlXCIsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDIwLFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIHZhbHVlOiBwdW5jaC52YWx1ZSxcbiAgICAgICAgICAgIG9uSW5wdXQ6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gKGV2KSA9PiBwdW5jaC52YWx1ZSA9IHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSkpXG4gICAgICAgICAgfSwgbnVsbCwgNDAgLyogUFJPUFMsIEhZRFJBVEVfRVZFTlRTICovLCBfaG9pc3RlZF8zKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgIH0sIDggLyogUFJPUFMgKi8sIFtcInZhbHVlXCJdKVxuICAgIF0pLFxuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfNCwgW1xuICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihCbHVyaGFzaENhbnZhcyksIHtcbiAgICAgICAgaGFzaDogcHJvcHMuaGFzaCxcbiAgICAgICAgaGVpZ2h0OiBzaXplLnZhbHVlLFxuICAgICAgICB3aWR0aDogc2l6ZS52YWx1ZSxcbiAgICAgICAgcHVuY2g6IHB1bmNoLnZhbHVlXG4gICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJoYXNoXCIsIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiwgXCJwdW5jaFwiXSlcbiAgICBdKVxuICBdKSlcbn1cbn1cblxufSkiLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgbm9ybWFsaXplU3R5bGUgYXMgX25vcm1hbGl6ZVN0eWxlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5pbXBvcnQgeyBjb21wdXRlZCwgQ1NTUHJvcGVydGllcywgb25VcGRhdGVkLCByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IEJsdXJoYXNoQ2FudmFzIGZyb20gJy4vQmx1cmhhc2hDYW52YXMudnVlJztcblxudHlwZSBCbHVyaGFzaFByb3BzID0ge1xuICBoYXNoOiBzdHJpbmc7XG4gIC8qKiBDU1MgaGVpZ2h0LCBkZWZhdWx0OiAxMjggKi9cbiAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nIHwgJ2F1dG8nO1xuICAvKiogQ1NTIHdpZHRoLCBkZWZhdWx0OiAxMjggKi9cbiAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmcgfCAnYXV0byc7XG4gIHB1bmNoPzogbnVtYmVyO1xuICAvKiogQ2FudmFzIFJlc29sdXRpb24gWCwgZGVmYXVsdDogMzIsIE11c3QgYmUgZ3JlYXRlciB0aGFuIDAgKi9cbiAgcmVzb2x1dGlvblg/OiBudW1iZXI7XG4gIC8qKiBDYW52YXMgUmVzb2x1dGlvbiBZLCBkZWZhdWx0OiAzMiwgTXVzdCBiZSBncmVhdGVyIHRoYW4gMCAqL1xuICByZXNvbHV0aW9uWT86IG51bWJlcjtcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogJ0JsdXJoYXNoJyxcbiAgcHJvcHM6IHtcbiAgICBoYXNoOiBudWxsLFxuICAgIGhlaWdodDogeyBkZWZhdWx0OiAxMjggfSxcbiAgICB3aWR0aDogeyBkZWZhdWx0OiAxMjggfSxcbiAgICBwdW5jaDogbnVsbCxcbiAgICByZXNvbHV0aW9uWDogeyBkZWZhdWx0OiAzMiB9LFxuICAgIHJlc29sdXRpb25ZOiB7IGRlZmF1bHQ6IDMyIH0sXG4gICAgc3R5bGU6IG51bGxcbiAgfSxcbiAgc2V0dXAoX19wcm9wczogYW55KSB7XG5cbmNvbnN0IHByb3BzID0gX19wcm9wcyBhcyB7IGhhc2g6IHN0cmluZywgaGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcgfCAnYXV0bycsIHdpZHRoOiBudW1iZXIgfCBzdHJpbmcgfCAnYXV0bycsIHB1bmNoPzogbnVtYmVyLCByZXNvbHV0aW9uWDogbnVtYmVyLCByZXNvbHV0aW9uWTogbnVtYmVyLCBzdHlsZT86IENTU1Byb3BlcnRpZXMgfTtcblxuY29uc3QgY2FudmFzU3R5bGUgPSByZWY8Q1NTUHJvcGVydGllcz4oe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbn0pO1xuXG5cblxuY29uc3QgY29tcHV0ZWRTdHlsZSA9IGNvbXB1dGVkKFxuICAoKSA9PlxuICAgICh7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgaGVpZ2h0OiB0eXBlb2YgcHJvcHMuaGVpZ2h0ID09ICdudW1iZXInID8gcHJvcHMuaGVpZ2h0ICsgJ3B4JyA6IHByb3BzLmhlaWdodCxcbiAgICAgIHdpZHRoOiB0eXBlb2YgcHJvcHMud2lkdGggPT0gJ251bWJlcicgPyBwcm9wcy53aWR0aCArICdweCcgOiBwcm9wcy53aWR0aCxcbiAgICAgIC4uLnByb3BzLnN0eWxlLFxuICAgIH0gYXMgQ1NTUHJvcGVydGllcyksXG4pO1xuXG5vblVwZGF0ZWQoKCkgPT4ge1xuICBpZiAocHJvcHMucmVzb2x1dGlvblggPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ3Jlc29sdXRpb25YIFByb3BlcnR5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgaWYgKHByb3BzLnJlc29sdXRpb25ZIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdyZXNvbHV0aW9uWSBQcm9wZXJ0eSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG59KTtcblxucmV0dXJuIChfY3R4OiBhbnksX2NhY2hlOiBhbnkpID0+IHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgIHN0eWxlOiBfbm9ybWFsaXplU3R5bGUoX3VucmVmKGNvbXB1dGVkU3R5bGUpKVxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKEJsdXJoYXNoQ2FudmFzLCB7XG4gICAgICBoYXNoOiBfX3Byb3BzLmhhc2gsXG4gICAgICBoZWlnaHQ6IF9fcHJvcHMucmVzb2x1dGlvblksXG4gICAgICB3aWR0aDogX19wcm9wcy5yZXNvbHV0aW9uWCxcbiAgICAgIHB1bmNoOiBfX3Byb3BzLnB1bmNoLFxuICAgICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZShjYW52YXNTdHlsZS52YWx1ZSlcbiAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJoYXNoXCIsIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiwgXCJwdW5jaFwiLCBcInN0eWxlXCJdKVxuICBdLCA0IC8qIFNUWUxFICovKSlcbn1cbn1cblxufSkiLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wicHVuY2hcIiwgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiXVxuXG5pbXBvcnQgeyBkZWNvZGUgfSBmcm9tICdibHVyaGFzaCc7XG5pbXBvcnQgeyByZWYsIHdpdGhEZWZhdWx0cyB9IGZyb20gJ3Z1ZSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGhhc2g6IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBwdW5jaD86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogJ0JsdXJoYXNoQ2FudmFzJyxcbiAgcHJvcHM6IHtcbiAgICBoYXNoOiBudWxsLFxuICAgIGhlaWdodDogeyBkZWZhdWx0OiAxMjggfSxcbiAgICBwdW5jaDogbnVsbCxcbiAgICB3aWR0aDogeyBkZWZhdWx0OiAxMjggfVxuICB9LFxuICBzZXR1cChfX3Byb3BzOiBhbnkpIHtcblxuY29uc3QgcHJvcHMgPSBfX3Byb3BzIGFzIHsgaGFzaDogc3RyaW5nLCBoZWlnaHQ6IG51bWJlciwgcHVuY2g/OiBudW1iZXIsIHdpZHRoOiBudW1iZXIgfTtcblxuXG5cbmNvbnN0IGJsdXJoYXNoID0gcmVmPEhUTUxDYW52YXNFbGVtZW50PigpO1xuXG5jb25zdCBoYW5kbGVSZWYgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkgPT4ge1xuICBibHVyaGFzaC52YWx1ZSA9IGNhbnZhcztcbiAgZHJhdygpO1xufTtcblxuY29uc3QgZHJhdyA9ICgpID0+IHtcbiAgaWYgKGJsdXJoYXNoLnZhbHVlKSB7XG4gICAgY29uc3QgcGl4ZWxzID0gZGVjb2RlKHByb3BzLmhhc2gsIHByb3BzLndpZHRoLCBwcm9wcy5oZWlnaHQsIHByb3BzLnB1bmNoKTtcblxuICAgIGNvbnN0IGN0eCA9IGJsdXJoYXNoLnZhbHVlLmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YShwcm9wcy53aWR0aCwgcHJvcHMuaGVpZ2h0KTtcbiAgICBpbWFnZURhdGEuZGF0YS5zZXQocGl4ZWxzKTtcbiAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gIH1cbn07XG5cbnJldHVybiAoX2N0eDogYW55LF9jYWNoZTogYW55KSA9PiB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiY2FudmFzXCIsIHtcbiAgICBpZDogXCJibHVyaGFzaC1jYW52YXNcIixcbiAgICBwdW5jaDogcHJvcHMucHVuY2gsXG4gICAgaGVpZ2h0OiBwcm9wcy5oZWlnaHQsXG4gICAgd2lkdGg6IHByb3BzLndpZHRoLFxuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIF9ob2lzdGVkXzEpKVxufVxufVxuXG59KSIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCByZW5kZXJTbG90IGFzIF9yZW5kZXJTbG90LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoXCJkYXRhLXYtODc2NDM3MzZcIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKVxuY29uc3QgX2hvaXN0ZWRfMSA9IHsgY2xhc3M6IFwicm9vdFwiIH1cbmNvbnN0IF9ob2lzdGVkXzIgPSB7IGNsYXNzOiBcImxhYmVsXCIgfVxuY29uc3QgX2hvaXN0ZWRfMyA9IHsgY2xhc3M6IFwidmFsdWVcIiB9XG5cbmltcG9ydCB7IFZ1ZUVsZW1lbnQgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogJ1NldHRpbmcnLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiBudWxsLFxuICAgIGNoaWxkcmVuOiBudWxsLFxuICAgIHZhbHVlOiBudWxsXG4gIH0sXG4gIHNldHVwKF9fcHJvcHM6IGFueSkge1xuXG5jb25zdCBwcm9wcyA9IF9fcHJvcHMgYXMge1xuICBsYWJlbDogc3RyaW5nO1xuICBjaGlsZHJlbj86IFZ1ZUVsZW1lbnQ7XG4gIHZhbHVlOiBhbnk7XG59O1xuXG5cblxucmV0dXJuIChfY3R4OiBhbnksX2NhY2hlOiBhbnkpID0+IHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwgX2hvaXN0ZWRfMSwgW1xuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJsYWJlbFwiLCBfaG9pc3RlZF8yLCBfdG9EaXNwbGF5U3RyaW5nKF9fcHJvcHMubGFiZWwpLCAxIC8qIFRFWFQgKi8pLFxuICAgIF9yZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIiksXG4gICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF8zLCBfdG9EaXNwbGF5U3RyaW5nKF9fcHJvcHMudmFsdWUpLCAxIC8qIFRFWFQgKi8pXG4gIF0pKVxufVxufVxuXG59KSIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhDdHggYXMgX3dpdGhDdHgsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgdk1vZGVsVGV4dCBhcyBfdk1vZGVsVGV4dCwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCB1bnJlZiBhcyBfdW5yZWYsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoXCJkYXRhLXYtYWZhNTFmZGFcIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKVxuY29uc3QgX2hvaXN0ZWRfMSA9IHsgY2xhc3M6IFwicm9vdC1lbmNvZGVyXCIgfVxuY29uc3QgX2hvaXN0ZWRfMiA9IHsgY2xhc3M6IFwiaW1nLXByZXZpZXctY29udGFpbmVyXCIgfVxuY29uc3QgX2hvaXN0ZWRfMyA9IFtcInNyY1wiXVxuY29uc3QgX2hvaXN0ZWRfNCA9IHsgY2xhc3M6IFwiaW1nLWZpbGUtbmFtZVwiIH1cbmNvbnN0IF9ob2lzdGVkXzUgPSB7IGNsYXNzOiBcInNldHRpbmdzXCIgfVxuY29uc3QgX2hvaXN0ZWRfNiA9IC8qI19fUFVSRV9fKi8gX3dpdGhTY29wZUlkKCgpID0+IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiaDNcIiwgbnVsbCwgXCJFbmNvZGluZyBzZXR0aW5nc1wiLCAtMSAvKiBIT0lTVEVEICovKSlcbmNvbnN0IF9ob2lzdGVkXzcgPSB7XG4gIGtleTogMCxcbiAgY2xhc3M6IFwiYmx1cmhhc2gtcmVzdWx0LWNvbnRhaW5lclwiXG59XG5jb25zdCBfaG9pc3RlZF84ID0gLyojX19QVVJFX18qLyBfd2l0aFNjb3BlSWQoKCkgPT4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJoM1wiLCBudWxsLCBcIkJsdXJoYXNoIHJlc3VsdFwiLCAtMSAvKiBIT0lTVEVEICovKSlcbmNvbnN0IF9ob2lzdGVkXzkgPSB7IGNsYXNzOiBcInJlc3VsdC1ibHVyaGFzaFwiIH1cblxuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSAnYmx1cmhhc2gnO1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgU2V0dGluZyBmcm9tICcuL1NldHRpbmcudnVlJztcbmltcG9ydCBGaWxlSW5wdXQgZnJvbSAnLi9GaWxlSW5wdXQudnVlJztcblxuXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogJ0JsdXJoYXNoSW1hZ2VFbmNvZGVyJyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LFxuICBlbWl0czogW1widXBkYXRlOm1vZGVsVmFsdWVcIl0sXG4gIHNldHVwKF9fcHJvcHM6IGFueSwgeyBlbWl0OiBlbWl0cyB9OiB7IGVtaXQ6ICh7XG4gIChlOiAndXBkYXRlOm1vZGVsVmFsdWUnLCBoYXNoOiBzdHJpbmcpOiB2b2lkO1xufSksIGV4cG9zZTogYW55LCBzbG90czogYW55LCBhdHRyczogYW55IH0pIHtcblxuY29uc3QgcHJvcHMgPSBfX3Byb3BzIGFzIHtcbiAgdmFsdWU/OiBzdHJpbmc7XG59O1xuXG5cblxuXG5jb25zdCBkYXRhID0gcmVmPHsgZmlsZTogRmlsZTsgaW1hZ2VVcmw6IHN0cmluZzsgaW1hZ2VEYXRhOiBJbWFnZURhdGEgfSB8IHVuZGVmaW5lZD4oKTtcbmNvbnN0IGNvbXBvbmVudFkgPSByZWYoNCk7XG5jb25zdCBjb21wb25lbnRYID0gcmVmKDQpO1xuY29uc3QgYmx1cmhhc2ggPSBjb21wdXRlZCgoKSA9PlxuICBkYXRhLnZhbHVlXG4gICAgPyByZXR1cm5FbmNvZGVWYWx1ZShcbiAgICAgICAgZGF0YS52YWx1ZS5pbWFnZURhdGEuZGF0YSxcbiAgICAgICAgZGF0YS52YWx1ZS5pbWFnZURhdGEud2lkdGgsXG4gICAgICAgIGRhdGEudmFsdWUuaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgY29tcG9uZW50WC52YWx1ZSxcbiAgICAgICAgY29tcG9uZW50WS52YWx1ZSxcbiAgICAgIClcbiAgICA6IHVuZGVmaW5lZCxcbik7XG5jb25zdCByZXR1cm5FbmNvZGVWYWx1ZSA9IChcbiAgZGF0YTogVWludDhDbGFtcGVkQXJyYXksXG4gIHdpZHRoOiBudW1iZXIsXG4gIGhlaWdodDogbnVtYmVyLFxuICBjb21wb25lbnRYOiBudW1iZXIsXG4gIGNvbXBvbmVudFk6IG51bWJlcixcbik6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGhhc2ggPSBlbmNvZGUoZGF0YSwgd2lkdGgsIGhlaWdodCwgY29tcG9uZW50WCwgY29tcG9uZW50WSk7XG4gIGVtaXRzKCd1cGRhdGU6bW9kZWxWYWx1ZScsIGhhc2gpO1xuICByZXR1cm4gaGFzaDtcbn07XG5cbmNvbnN0IGdldENsYW1wZWRTaXplID0gKFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbiAgbWF4OiBudW1iZXIsXG4pOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gPT4ge1xuICBpZiAod2lkdGggPj0gaGVpZ2h0ICYmIHdpZHRoID4gbWF4KSB7XG4gICAgcmV0dXJuIHsgd2lkdGg6IG1heCwgaGVpZ2h0OiBNYXRoLnJvdW5kKChoZWlnaHQgLyB3aWR0aCkgKiBtYXgpIH07XG4gIH1cblxuICBpZiAoaGVpZ2h0ID4gd2lkdGggJiYgaGVpZ2h0ID4gbWF4KSB7XG4gICAgcmV0dXJuIHsgd2lkdGg6IE1hdGgucm91bmQoKHdpZHRoIC8gaGVpZ2h0KSAqIG1heCksIGhlaWdodDogbWF4IH07XG4gIH1cblxuICByZXR1cm4geyB3aWR0aCwgaGVpZ2h0IH07XG59O1xuXG5jb25zdCBsb2FkSW1hZ2UgPSBhc3luYyAoc3JjOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+ID0+XG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWcpO1xuICAgIGltZy5vbmVycm9yID0gKC4uLmFyZ3MpID0+IHJlamVjdChhcmdzKTtcbiAgICBpbWcuc3JjID0gc3JjO1xuICB9KTtcblxuY29uc3QgZ2V0SW1hZ2VEYXRhID0gKGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50LCByZXNvbHV0aW9uWDogbnVtYmVyLCByZXNvbHV0aW9uWTogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBjYW52YXMud2lkdGggPSByZXNvbHV0aW9uWDtcbiAgY2FudmFzLmhlaWdodCA9IHJlc29sdXRpb25ZO1xuICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgcmVzb2x1dGlvblgsIHJlc29sdXRpb25ZKTtcbiAgcmV0dXJuIGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHJlc29sdXRpb25YLCByZXNvbHV0aW9uWSk7XG59O1xuXG5jb25zdCBoYW5kbGVGaWxlQ2hhbmdlID0gYXN5bmMgKGZpbGU6IEZpbGUpID0+IHtcbiAgY29uc3QgaW1hZ2VVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuXG4gIGNvbnN0IGltZyA9IGF3YWl0IGxvYWRJbWFnZShpbWFnZVVybCk7XG4gIGNvbnN0IGNsYW1wU2l6ZSA9IGdldENsYW1wZWRTaXplKGltZy53aWR0aCwgaW1nLmhlaWdodCwgNjQpO1xuICBjb25zdCBpbWFnZURhdGEgPSBnZXRJbWFnZURhdGEoaW1nLCBjbGFtcFNpemUud2lkdGgsIGNsYW1wU2l6ZS5oZWlnaHQpO1xuXG4gIGRhdGEudmFsdWUgPSB7IGZpbGUsIGltYWdlVXJsLCBpbWFnZURhdGEgfTtcbn07XG5cbnJldHVybiAoX2N0eDogYW55LF9jYWNoZTogYW55KSA9PiB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICBfY3JlYXRlVk5vZGUoRmlsZUlucHV0LCB7XG4gICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogaGFuZGxlRmlsZUNoYW5nZSxcbiAgICAgIHNob3dUZXh0OiAhZGF0YS52YWx1ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF8yLCBbXG4gICAgICAgICAgKGRhdGEudmFsdWUpXG4gICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCB7IGtleTogMCB9LCBbXG4gICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICBjbGFzczogXCJpbWctcHJldmlld1wiLFxuICAgICAgICAgICAgICAgICAgc3JjOiBkYXRhLnZhbHVlLmltYWdlVXJsXG4gICAgICAgICAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgX2hvaXN0ZWRfMyksXG4gICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwgX2hvaXN0ZWRfNCwgX3RvRGlzcGxheVN0cmluZyhkYXRhLnZhbHVlLmZpbGUubmFtZSksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICAgICAgXSwgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSlcbiAgICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgICAgXSlcbiAgICAgIF0pLFxuICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICB9LCA4IC8qIFBST1BTICovLCBbXCJzaG93VGV4dFwiXSksXG4gICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF81LCBbXG4gICAgICBfaG9pc3RlZF82LFxuICAgICAgX2NyZWF0ZVZOb2RlKFNldHRpbmcsIHtcbiAgICAgICAgbGFiZWw6IFwiWCBjb21wb25lbnRzXCIsXG4gICAgICAgIHZhbHVlOiBjb21wb25lbnRYLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwicmFuZ2VcIixcbiAgICAgICAgICAgIG1pbjogXCIxXCIsXG4gICAgICAgICAgICBtYXg6IFwiOVwiLFxuICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKCRldmVudDogYW55KSA9PiAoKGNvbXBvbmVudFgpLnZhbHVlID0gJGV2ZW50KSlcbiAgICAgICAgICB9LCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLyksIFtcbiAgICAgICAgICAgIFtfdk1vZGVsVGV4dCwgY29tcG9uZW50WC52YWx1ZV1cbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgIH0sIDggLyogUFJPUFMgKi8sIFtcInZhbHVlXCJdKSxcbiAgICAgIF9jcmVhdGVWTm9kZShTZXR0aW5nLCB7XG4gICAgICAgIGxhYmVsOiBcIlkgY29tcG9uZW50c1wiLFxuICAgICAgICB2YWx1ZTogY29tcG9uZW50WS52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcInJhbmdlXCIsXG4gICAgICAgICAgICBtaW46IFwiMVwiLFxuICAgICAgICAgICAgbWF4OiBcIjlcIixcbiAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9ICgkZXZlbnQ6IGFueSkgPT4gKChjb21wb25lbnRZKS52YWx1ZSA9ICRldmVudCkpXG4gICAgICAgICAgfSwgbnVsbCwgNTEyIC8qIE5FRURfUEFUQ0ggKi8pLCBbXG4gICAgICAgICAgICBbX3ZNb2RlbFRleHQsIGNvbXBvbmVudFkudmFsdWVdXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJ2YWx1ZVwiXSlcbiAgICBdKSxcbiAgICAoX3VucmVmKGJsdXJoYXNoKSlcbiAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF83LCBbXG4gICAgICAgICAgX2hvaXN0ZWRfOCxcbiAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzksIF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKGJsdXJoYXNoKSksIDEgLyogVEVYVCAqLylcbiAgICAgICAgXSkpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gIF0pKVxufVxufVxuXG59KSIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHJlbmRlclNsb3QgYXMgX3JlbmRlclNsb3QsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoXCJkYXRhLXYtMzk0YzE4ZTZcIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKVxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcImNsYXNzZXNcIiwgXCJmb3JcIl1cbmNvbnN0IF9ob2lzdGVkXzIgPSBbXCJpZFwiXVxuY29uc3QgX2hvaXN0ZWRfMyA9IHtcbiAga2V5OiAwLFxuICBjbGFzczogXCJ0ZXh0XCJcbn1cblxuaW1wb3J0IHsgVnVlRWxlbWVudCwgcmVmIH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoe1xuICBfX25hbWU6ICdGaWxlSW5wdXQnLFxuICBwcm9wczoge1xuICAgIGNoaWxkcmVuOiBudWxsLFxuICAgIGlubmVyQ2xhc3M6IG51bGwsXG4gICAgaWQ6IHsgZGVmYXVsdDogJ2ZpbGUtaW5wdXQnIH0sXG4gICAgc2hvd1RleHQ6IHsgdHlwZTogQm9vbGVhbiB9XG4gIH0sXG4gIGVtaXRzOiBbXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiXSxcbiAgc2V0dXAoX19wcm9wczogYW55LCB7IGVtaXQ6IGVtaXRzIH06IHsgZW1pdDogKHtcbiAgKGU6ICd1cGRhdGU6bW9kZWxWYWx1ZScsIGZpbGU6IEZpbGUpOiB2b2lkO1xufSksIGV4cG9zZTogYW55LCBzbG90czogYW55LCBhdHRyczogYW55IH0pIHtcblxuY29uc3QgcHJvcHMgPSBfX3Byb3BzIGFzIHsgY2hpbGRyZW4/OiBWdWVFbGVtZW50LCBpbm5lckNsYXNzPzogc3RyaW5nLCBpZDogc3RyaW5nLCBzaG93VGV4dDogYm9vbGVhbiB9O1xuXG5cblxuXG5jb25zdCBmaWxlID0gcmVmPEhUTUxJbnB1dEVsZW1lbnQ+KCk7XG5cbmZ1bmN0aW9uIG9uQ2hhbmdlSW5wdXRGaWxlKCkge1xuICBpZiAoZmlsZS52YWx1ZSkge1xuICAgIGNvbnN0IGZpbGVzID0gZmlsZS52YWx1ZS5maWxlcyBhcyBGaWxlTGlzdDtcbiAgICBjb25zdCBzaW5nbGUgPSBmaWxlc1swXSBhcyBGaWxlO1xuICAgIGVtaXRzKCd1cGRhdGU6bW9kZWxWYWx1ZScsIHNpbmdsZSk7XG4gIH1cbn1cblxucmV0dXJuIChfY3R4OiBhbnksX2NhY2hlOiBhbnkpID0+IHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soXCJsYWJlbFwiLCB7XG4gICAgY2xhc3M6IFwicm9vdFwiLFxuICAgIGNsYXNzZXM6IF9fcHJvcHMuaW5uZXJDbGFzcyxcbiAgICBmb3I6IF9fcHJvcHMuaWRcbiAgfSwgW1xuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICBpZDogX19wcm9wcy5pZCxcbiAgICAgIHJlZl9rZXk6IFwiZmlsZVwiLFxuICAgICAgcmVmOiBmaWxlLFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlSW5wdXRGaWxlLFxuICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICBtdWx0aXBsZTogZmFsc2UsXG4gICAgICBhY2NlcHQ6IFwiaW1hZ2UvKlwiXG4gICAgfSwgbnVsbCwgNDAgLyogUFJPUFMsIEhZRFJBVEVfRVZFTlRTICovLCBfaG9pc3RlZF8yKSxcbiAgICAoX19wcm9wcy5zaG93VGV4dClcbiAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwgX2hvaXN0ZWRfMywgXCJDaG9vc2UgaW1hZ2VcIikpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgIF9yZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgXSwgOCAvKiBQUk9QUyAqLywgX2hvaXN0ZWRfMSkpXG59XG59XG5cbn0pIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB1bnJlZiBhcyBfdW5yZWYsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZChcImRhdGEtdi1lOWFmZTI2YVwiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pXG5jb25zdCBfaG9pc3RlZF8xID0geyBjbGFzczogXCJzZXR0aW5ncy1jb250YWluZXJcIiB9XG5jb25zdCBfaG9pc3RlZF8yID0gW1widmFsdWVcIl1cbmNvbnN0IF9ob2lzdGVkXzMgPSBbXCJ2YWx1ZVwiXVxuY29uc3QgX2hvaXN0ZWRfNCA9IFtcInZhbHVlXCJdXG5jb25zdCBfaG9pc3RlZF81ID0geyBjbGFzczogXCJibHVyaGFzaC1jb250YWluZXJcIiB9XG5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgU2V0dGluZyBmcm9tICcuL1NldHRpbmcudnVlJztcbmltcG9ydCB7IEJsdXJoYXNoIH0gZnJvbSAnLi4vc3JjJztcblxuXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogJ0JsdXJoYXNoRGVtbycsXG4gIHByb3BzOiB7XG4gICAgaGFzaDogbnVsbFxuICB9LFxuICBzZXR1cChfX3Byb3BzOiBhbnkpIHtcblxuY29uc3QgcHJvcHMgPSBfX3Byb3BzIGFzIHtcbiAgaGFzaDogc3RyaW5nO1xufTtcblxuY29uc3Qgc2l6ZSA9IHJlZigyNTYpO1xuY29uc3QgcmVzb2x1dGlvbiA9IHJlZigzMik7XG5jb25zdCBwdW5jaCA9IHJlZigxKTtcblxuXG5cbnJldHVybiAoX2N0eDogYW55LF9jYWNoZTogYW55KSA9PiB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIG51bGwsIFtcbiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICAgIF9jcmVhdGVWTm9kZShTZXR0aW5nLCB7XG4gICAgICAgIGxhYmVsOiBcInNpemVcIixcbiAgICAgICAgdmFsdWU6IGAke3NpemUudmFsdWV9IChweClgXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgdHlwZTogXCJyYW5nZVwiLFxuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAxMDI0LFxuICAgICAgICAgICAgc3RlcDogOCxcbiAgICAgICAgICAgIHZhbHVlOiBzaXplLnZhbHVlLFxuICAgICAgICAgICAgb25JbnB1dDogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoZXYpID0+IHNpemUudmFsdWUgPSBwYXJzZUludChldi50YXJnZXQudmFsdWUpKVxuICAgICAgICAgIH0sIG51bGwsIDQwIC8qIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLywgX2hvaXN0ZWRfMilcbiAgICAgICAgXSksXG4gICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJ2YWx1ZVwiXSksXG4gICAgICBfY3JlYXRlVk5vZGUoU2V0dGluZywge1xuICAgICAgICBsYWJlbDogXCJyZXNvbHV0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBgJHtyZXNvbHV0aW9uLnZhbHVlfSAocHgpYFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwicmFuZ2VcIixcbiAgICAgICAgICAgIG1pbjogNCxcbiAgICAgICAgICAgIG1heDogMTI4LFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIHZhbHVlOiByZXNvbHV0aW9uLnZhbHVlLFxuICAgICAgICAgICAgb25JbnB1dDogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAoZXYpID0+IHJlc29sdXRpb24udmFsdWUgPSBwYXJzZUludChldi50YXJnZXQudmFsdWUpKVxuICAgICAgICAgIH0sIG51bGwsIDQwIC8qIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLywgX2hvaXN0ZWRfMylcbiAgICAgICAgXSksXG4gICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJ2YWx1ZVwiXSksXG4gICAgICBfY3JlYXRlVk5vZGUoU2V0dGluZywge1xuICAgICAgICBsYWJlbDogXCJwdW5jaFwiLFxuICAgICAgICB2YWx1ZTogcHVuY2gudmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcInJhbmdlXCIsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDIwLFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIHZhbHVlOiBwdW5jaC52YWx1ZSxcbiAgICAgICAgICAgIG9uSW5wdXQ6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gKGV2KSA9PiBwdW5jaC52YWx1ZSA9IHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSkpXG4gICAgICAgICAgfSwgbnVsbCwgNDAgLyogUFJPUFMsIEhZRFJBVEVfRVZFTlRTICovLCBfaG9pc3RlZF80KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgIH0sIDggLyogUFJPUFMgKi8sIFtcInZhbHVlXCJdKVxuICAgIF0pLFxuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfNSwgW1xuICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihCbHVyaGFzaCksIHtcbiAgICAgICAgaGFzaDogX19wcm9wcy5oYXNoLFxuICAgICAgICBoZWlnaHQ6IHNpemUudmFsdWUsXG4gICAgICAgIHdpZHRoOiBzaXplLnZhbHVlLFxuICAgICAgICBwdW5jaDogcHVuY2gudmFsdWUsXG4gICAgICAgIHJlc29sdXRpb25YOiByZXNvbHV0aW9uLnZhbHVlLFxuICAgICAgICByZXNvbHV0aW9uWTogcmVzb2x1dGlvbi52YWx1ZVxuICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wiaGFzaFwiLCBcImhlaWdodFwiLCBcIndpZHRoXCIsIFwicHVuY2hcIiwgXCJyZXNvbHV0aW9uWFwiLCBcInJlc29sdXRpb25ZXCJdKVxuICAgIF0pXG4gIF0pKVxufVxufVxuXG59KSIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTEtMCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTktMCEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTEtMCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTktMCEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMS0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMS0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9CbHVyaGFzaC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTEtMCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTktMCEuL0JsdXJoYXNoLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9CbHVyaGFzaENhbnZhcy52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTEtMCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTktMCEuL0JsdXJoYXNoQ2FudmFzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9TZXR0aW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMS0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vU2V0dGluZy52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMS0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vQmx1cmhhc2hJbWFnZUVuY29kZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9CbHVyaGFzaEltYWdlRW5jb2Rlci52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMS0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vRmlsZUlucHV0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMS0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vRmlsZUlucHV0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9CbHVyaGFzaERlbW8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9CbHVyaGFzaERlbW8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIiIsInZhciBxPVtcIjBcIixcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIkFcIixcIkJcIixcIkNcIixcIkRcIixcIkVcIixcIkZcIixcIkdcIixcIkhcIixcIklcIixcIkpcIixcIktcIixcIkxcIixcIk1cIixcIk5cIixcIk9cIixcIlBcIixcIlFcIixcIlJcIixcIlNcIixcIlRcIixcIlVcIixcIlZcIixcIldcIixcIlhcIixcIllcIixcIlpcIixcImFcIixcImJcIixcImNcIixcImRcIixcImVcIixcImZcIixcImdcIixcImhcIixcImlcIixcImpcIixcImtcIixcImxcIixcIm1cIixcIm5cIixcIm9cIixcInBcIixcInFcIixcInJcIixcInNcIixcInRcIixcInVcIixcInZcIixcIndcIixcInhcIixcInlcIixcInpcIixcIiNcIixcIiRcIixcIiVcIixcIipcIixcIitcIixcIixcIixcIi1cIixcIi5cIixcIjpcIixcIjtcIixcIj1cIixcIj9cIixcIkBcIixcIltcIixcIl1cIixcIl5cIixcIl9cIixcIntcIixcInxcIixcIn1cIixcIn5cIl0seD10PT57bGV0IGU9MDtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyl7bGV0IG49dFtyXSxsPXEuaW5kZXhPZihuKTtlPWUqODMrbH1yZXR1cm4gZX0scD0odCxlKT0+e3ZhciByPVwiXCI7Zm9yKGxldCBuPTE7bjw9ZTtuKyspe2xldCBsPU1hdGguZmxvb3IodCkvTWF0aC5wb3coODMsZS1uKSU4MztyKz1xW01hdGguZmxvb3IobCldfXJldHVybiByfTt2YXIgZj10PT57bGV0IGU9dC8yNTU7cmV0dXJuIGU8PS4wNDA0NT9lLzEyLjkyOk1hdGgucG93KChlKy4wNTUpLzEuMDU1LDIuNCl9LGg9dD0+e2xldCBlPU1hdGgubWF4KDAsTWF0aC5taW4oMSx0KSk7cmV0dXJuIGU8PS4wMDMxMzA4P01hdGgudHJ1bmMoZSoxMi45MioyNTUrLjUpOk1hdGgudHJ1bmMoKDEuMDU1Kk1hdGgucG93KGUsLjQxNjY2NjY2NjY2NjY2NjcpLS4wNTUpKjI1NSsuNSl9LEY9dD0+dDwwPy0xOjEsTT0odCxlKT0+Rih0KSpNYXRoLnBvdyhNYXRoLmFicyh0KSxlKTt2YXIgZD1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpLHRoaXMubmFtZT1cIlZhbGlkYXRpb25FcnJvclwiLHRoaXMubWVzc2FnZT1lfX07dmFyIEM9dD0+e2lmKCF0fHx0Lmxlbmd0aDw2KXRocm93IG5ldyBkKFwiVGhlIGJsdXJoYXNoIHN0cmluZyBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVyc1wiKTtsZXQgZT14KHRbMF0pLHI9TWF0aC5mbG9vcihlLzkpKzEsbj1lJTkrMTtpZih0Lmxlbmd0aCE9PTQrMipuKnIpdGhyb3cgbmV3IGQoYGJsdXJoYXNoIGxlbmd0aCBtaXNtYXRjaDogbGVuZ3RoIGlzICR7dC5sZW5ndGh9IGJ1dCBpdCBzaG91bGQgYmUgJHs0KzIqbipyfWApfSxOPXQ9Pnt0cnl7Qyh0KX1jYXRjaChlKXtyZXR1cm57cmVzdWx0OiExLGVycm9yUmVhc29uOmUubWVzc2FnZX19cmV0dXJue3Jlc3VsdDohMH19LHo9dD0+e2xldCBlPXQ+PjE2LHI9dD4+OCYyNTUsbj10JjI1NTtyZXR1cm5bZihlKSxmKHIpLGYobildfSxMPSh0LGUpPT57bGV0IHI9TWF0aC5mbG9vcih0LzM2MSksbj1NYXRoLmZsb29yKHQvMTkpJTE5LGw9dCUxOTtyZXR1cm5bTSgoci05KS85LDIpKmUsTSgobi05KS85LDIpKmUsTSgobC05KS85LDIpKmVdfSxVPSh0LGUscixuKT0+e0ModCksbj1ufDE7bGV0IGw9eCh0WzBdKSxtPU1hdGguZmxvb3IobC85KSsxLGI9bCU5KzEsaT0oeCh0WzFdKSsxKS8xNjYsdT1uZXcgQXJyYXkoYiptKTtmb3IobGV0IG89MDtvPHUubGVuZ3RoO28rKylpZihvPT09MCl7bGV0IGE9eCh0LnN1YnN0cmluZygyLDYpKTt1W29dPXooYSl9ZWxzZXtsZXQgYT14KHQuc3Vic3RyaW5nKDQrbyoyLDYrbyoyKSk7dVtvXT1MKGEsaSpuKX1sZXQgYz1lKjQscz1uZXcgVWludDhDbGFtcGVkQXJyYXkoYypyKTtmb3IobGV0IG89MDtvPHI7bysrKWZvcihsZXQgYT0wO2E8ZTthKyspe2xldCB5PTAsQj0wLFI9MDtmb3IobGV0IHc9MDt3PG07dysrKWZvcihsZXQgUD0wO1A8YjtQKyspe2xldCBHPU1hdGguY29zKE1hdGguUEkqYSpQL2UpKk1hdGguY29zKE1hdGguUEkqbyp3L3IpLFQ9dVtQK3cqYl07eSs9VFswXSpHLEIrPVRbMV0qRyxSKz1UWzJdKkd9bGV0IFY9aCh5KSxJPWgoQiksRT1oKFIpO3NbNCphKzArbypjXT1WLHNbNCphKzErbypjXT1JLHNbNCphKzIrbypjXT1FLHNbNCphKzMrbypjXT0yNTV9cmV0dXJuIHN9LGo9VTt2YXIgQT00LEQ9KHQsZSxyLG4pPT57bGV0IGw9MCxtPTAsYj0wLGc9ZSpBO2ZvcihsZXQgdT0wO3U8ZTt1Kyspe2xldCBjPUEqdTtmb3IobGV0IHM9MDtzPHI7cysrKXtsZXQgbz1jK3MqZyxhPW4odSxzKTtsKz1hKmYodFtvXSksbSs9YSpmKHRbbysxXSksYis9YSpmKHRbbysyXSl9fWxldCBpPTEvKGUqcik7cmV0dXJuW2wqaSxtKmksYippXX0sJD10PT57bGV0IGU9aCh0WzBdKSxyPWgodFsxXSksbj1oKHRbMl0pO3JldHVybihlPDwxNikrKHI8PDgpK259LEg9KHQsZSk9PntsZXQgcj1NYXRoLmZsb29yKE1hdGgubWF4KDAsTWF0aC5taW4oMTgsTWF0aC5mbG9vcihNKHRbMF0vZSwuNSkqOSs5LjUpKSkpLG49TWF0aC5mbG9vcihNYXRoLm1heCgwLE1hdGgubWluKDE4LE1hdGguZmxvb3IoTSh0WzFdL2UsLjUpKjkrOS41KSkpKSxsPU1hdGguZmxvb3IoTWF0aC5tYXgoMCxNYXRoLm1pbigxOCxNYXRoLmZsb29yKE0odFsyXS9lLC41KSo5KzkuNSkpKSk7cmV0dXJuIHIqMTkqMTkrbioxOStsfSxPPSh0LGUscixuLGwpPT57aWYobjwxfHxuPjl8fGw8MXx8bD45KXRocm93IG5ldyBkKFwiQmx1ckhhc2ggbXVzdCBoYXZlIGJldHdlZW4gMSBhbmQgOSBjb21wb25lbnRzXCIpO2lmKGUqcio0IT09dC5sZW5ndGgpdGhyb3cgbmV3IGQoXCJXaWR0aCBhbmQgaGVpZ2h0IG11c3QgbWF0Y2ggdGhlIHBpeGVscyBhcnJheVwiKTtsZXQgbT1bXTtmb3IobGV0IHM9MDtzPGw7cysrKWZvcihsZXQgbz0wO288bjtvKyspe2xldCBhPW89PTAmJnM9PTA/MToyLHk9RCh0LGUsciwoQixSKT0+YSpNYXRoLmNvcyhNYXRoLlBJKm8qQi9lKSpNYXRoLmNvcyhNYXRoLlBJKnMqUi9yKSk7bS5wdXNoKHkpfWxldCBiPW1bMF0sZz1tLnNsaWNlKDEpLGk9XCJcIix1PW4tMSsobC0xKSo5O2krPXAodSwxKTtsZXQgYztpZihnLmxlbmd0aD4wKXtsZXQgcz1NYXRoLm1heCguLi5nLm1hcChhPT5NYXRoLm1heCguLi5hKSkpLG89TWF0aC5mbG9vcihNYXRoLm1heCgwLE1hdGgubWluKDgyLE1hdGguZmxvb3IocyoxNjYtLjUpKSkpO2M9KG8rMSkvMTY2LGkrPXAobywxKX1lbHNlIGM9MSxpKz1wKDAsMSk7cmV0dXJuIGkrPXAoJChiKSw0KSxnLmZvckVhY2gocz0+e2krPXAoSChzLGMpLDIpfSksaX0sUz1PO2V4cG9ydHtkIGFzIFZhbGlkYXRpb25FcnJvcixqIGFzIGRlY29kZSxTIGFzIGVuY29kZSxOIGFzIGlzQmx1cmhhc2hWYWxpZH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgc2NyaXB0IGZyb20gXCIuL1NldHRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vU2V0dGluZy52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5cbmltcG9ydCBcIi4vU2V0dGluZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD04NzY0MzczNiZzY29wZWQ9dHJ1ZSZsYW5nPWNzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9Vc2Vycy9kaWVnb3BhaXZhL0dpdC9iZWNrZXJpbi92dWVqcy1ibHVyaGFzaC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydfX3Njb3BlSWQnLFwiZGF0YS12LTg3NjQzNzM2XCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5yb290W2RhdGEtdi04NzY0MzczNl0ge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmxhYmVsW2RhdGEtdi04NzY0MzczNl0ge1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgd2hpdGUtc3BhY2U6IHByZTtcXG4gIGZvbnQtc2l6ZTogMC45ZW07XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XFxufVxcbi52YWx1ZVtkYXRhLXYtODc2NDM3MzZdIHtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgZm9udC1zaXplOiAwLjllbTtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcXG59XFxuLnJvb3QgKyAucm9vdFtkYXRhLXYtODc2NDM3MzZdIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2RlbW8vU2V0dGluZy52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQWdCQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsaUNBQWlDO0FBQ25DO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixpQ0FBaUM7QUFDbkM7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2IGNsYXNzPVxcXCJyb290XFxcIj5cXG4gICAgPGxhYmVsIGNsYXNzPVxcXCJsYWJlbFxcXCI+e3sgbGFiZWwgfX08L2xhYmVsPlxcbiAgICA8c2xvdCAvPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ2YWx1ZVxcXCI+e3sgdmFsdWUgfX08L2Rpdj5cXG4gIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuPHNjcmlwdCBzZXR1cCBsYW5nPVxcXCJ0c1xcXCI+XFxuaW1wb3J0IHsgZGVmaW5lUHJvcHMsIFZ1ZUVsZW1lbnQgfSBmcm9tICd2dWUnO1xcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHM8e1xcbiAgbGFiZWw6IHN0cmluZztcXG4gIGNoaWxkcmVuPzogVnVlRWxlbWVudDtcXG4gIHZhbHVlOiBhbnk7XFxufT4oKTtcXG48L3NjcmlwdD5cXG48c3R5bGUgc2NvcGVkPlxcbi5yb290IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5sYWJlbCB7XFxuICB3aWR0aDogMTIwcHg7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgZm9udC1zaXplOiAwLjllbTtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcXG59XFxuLnZhbHVlIHtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgZm9udC1zaXplOiAwLjllbTtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcXG59XFxuXFxuLnJvb3QgKyAucm9vdCB7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbmlucHV0W2RhdGEtdi04Y2ExMjAwNF0ge1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG4uc2V0dGluZ3MtY29udGFpbmVyW2RhdGEtdi04Y2ExMjAwNF0ge1xcbiAgcGFkZGluZzogMTVweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZTRlNGU0O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG4uYmx1cmhhc2gtY29udGFpbmVyW2RhdGEtdi04Y2ExMjAwNF0ge1xcbiAgbWFyZ2luLXRvcDogMThweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vZGVtby9CbHVyaGFzaENhbnZhc0RlbW8udnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUE2Q0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7RUFDYixxQkFBcUI7RUFDckIseUJBQXlCO0VBQ3pCLHlCQUF5QjtFQUN6QixrQkFBa0I7QUFDcEI7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5ncy1jb250YWluZXJcXFwiPlxcbiAgICAgIDxTZXR0aW5nIGxhYmVsPVxcXCJzaXplXFxcIiA6dmFsdWU9XFxcImAke3NpemV9IChweClgXFxcIj5cXG4gICAgICAgIDxpbnB1dFxcbiAgICAgICAgICB0eXBlPVxcXCJyYW5nZVxcXCJcXG4gICAgICAgICAgOm1pbj1cXFwiMVxcXCJcXG4gICAgICAgICAgOm1heD1cXFwiMTAyNFxcXCJcXG4gICAgICAgICAgOnN0ZXA9XFxcIjhcXFwiXFxuICAgICAgICAgIDp2YWx1ZT1cXFwic2l6ZVxcXCJcXG4gICAgICAgICAgQGlucHV0PVxcXCIoZXY6IGFueSkgPT4gc2l6ZSA9IHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcXFwiXFxuICAgICAgICAvPlxcbiAgICAgIDwvU2V0dGluZz5cXG5cXG4gICAgICA8U2V0dGluZyBsYWJlbD1cXFwicHVuY2hcXFwiIDp2YWx1ZT1cXFwicHVuY2hcXFwiPlxcbiAgICAgICAgPGlucHV0XFxuICAgICAgICAgIHR5cGU9XFxcInJhbmdlXFxcIlxcbiAgICAgICAgICA6bWluPVxcXCIwXFxcIlxcbiAgICAgICAgICA6bWF4PVxcXCIyMFxcXCJcXG4gICAgICAgICAgOnN0ZXA9XFxcIjFcXFwiXFxuICAgICAgICAgIDp2YWx1ZT1cXFwicHVuY2hcXFwiXFxuICAgICAgICAgIEBpbnB1dD1cXFwiKGV2OiBhbnkpID0+IHB1bmNoID0gcGFyc2VJbnQoZXYudGFyZ2V0LnZhbHVlKVxcXCJcXG4gICAgICAgIC8+XFxuICAgICAgPC9TZXR0aW5nPlxcbiAgICA8L2Rpdj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwiYmx1cmhhc2gtY29udGFpbmVyXFxcIj5cXG4gICAgICA8Qmx1cmhhc2hDYW52YXMgOmhhc2g9XFxcInByb3BzLmhhc2hcXFwiIDpoZWlnaHQ9XFxcInNpemVcXFwiIDp3aWR0aD1cXFwic2l6ZVxcXCIgOnB1bmNoPVxcXCJwdW5jaFxcXCIgLz5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQgc2V0dXAgbGFuZz1cXFwidHNcXFwiPlxcbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSc7XFxuaW1wb3J0IHsgQmx1cmhhc2hDYW52YXMgfSBmcm9tICcuLi9zcmMnO1xcbmltcG9ydCBTZXR0aW5nIGZyb20gJy4vU2V0dGluZy52dWUnO1xcblxcbmNvbnN0IHNpemUgPSByZWYoMjU2KTtcXG5jb25zdCBwdW5jaCA9IHJlZigxKTtcXG5cXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzPHtcXG4gIGhhc2g6IHN0cmluZztcXG59PigpO1xcbjwvc2NyaXB0PlxcbjxzdHlsZSBzY29wZWQ+XFxuaW5wdXQge1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG4uc2V0dGluZ3MtY29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDE1cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2U0ZTRlNDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLmJsdXJoYXNoLWNvbnRhaW5lciB7XFxuICBtYXJnaW4tdG9wOiAxOHB4O1xcbn1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbmlucHV0W2RhdGEtdi0zOTRjMThlNl0ge1xcbiAgd2lkdGg6IDAuMXB4O1xcbiAgaGVpZ2h0OiAwLjFweDtcXG4gIG9wYWNpdHk6IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogLTE7XFxufVxcbi5yb290W2RhdGEtdi0zOTRjMThlNl0ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnRleHRbZGF0YS12LTM5NGMxOGU2XSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY29sb3I6ICM3Nzc7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2RlbW8vRmlsZUlucHV0LnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBNENBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYixVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixXQUFXO0FBQ2I7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLHVCQUF1QjtFQUN2QixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLFNBQVM7RUFDVCxPQUFPO0VBQ1AsUUFBUTtFQUNSLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLFdBQVc7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8bGFiZWwgY2xhc3M9XFxcInJvb3RcXFwiIDpjbGFzc2VzPVxcXCJpbm5lckNsYXNzXFxcIiA6Zm9yPVxcXCJpZFxcXCI+XFxuICAgIDxpbnB1dFxcbiAgICAgIDppZD1cXFwiaWRcXFwiXFxuICAgICAgcmVmPVxcXCJmaWxlXFxcIlxcbiAgICAgIEBjaGFuZ2U9XFxcIm9uQ2hhbmdlSW5wdXRGaWxlXFxcIlxcbiAgICAgIHR5cGU9XFxcImZpbGVcXFwiXFxuICAgICAgOm11bHRpcGxlPVxcXCJmYWxzZVxcXCJcXG4gICAgICBhY2NlcHQ9XFxcImltYWdlLypcXFwiXFxuICAgIC8+XFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVxcXCJzaG93VGV4dFxcXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPkNob29zZSBpbWFnZTwvc3Bhbj5cXG4gICAgPC90ZW1wbGF0ZT5cXG4gICAgPHNsb3QgLz5cXG4gIDwvbGFiZWw+XFxuPC90ZW1wbGF0ZT5cXG48c2NyaXB0IHNldHVwIGxhbmc9XFxcInRzXFxcIj5cXG5pbXBvcnQgeyBkZWZpbmVQcm9wcywgVnVlRWxlbWVudCwgcmVmIH0gZnJvbSAndnVlJztcXG5jb25zdCBwcm9wcyA9IHdpdGhEZWZhdWx0cyhcXG4gIGRlZmluZVByb3BzPHtcXG4gICAgY2hpbGRyZW4/OiBWdWVFbGVtZW50O1xcbiAgICBpbm5lckNsYXNzPzogc3RyaW5nO1xcbiAgICBpZD86IHN0cmluZztcXG4gICAgc2hvd1RleHQ6IGJvb2xlYW47XFxuICB9PigpLFxcbiAge1xcbiAgICBpZDogJ2ZpbGUtaW5wdXQnLFxcbiAgfSxcXG4pO1xcbmNvbnN0IGVtaXRzID0gZGVmaW5lRW1pdHM8e1xcbiAgKGU6ICd1cGRhdGU6bW9kZWxWYWx1ZScsIGZpbGU6IEZpbGUpOiB2b2lkO1xcbn0+KCk7XFxuXFxuY29uc3QgZmlsZSA9IHJlZjxIVE1MSW5wdXRFbGVtZW50PigpO1xcblxcbmZ1bmN0aW9uIG9uQ2hhbmdlSW5wdXRGaWxlKCkge1xcbiAgaWYgKGZpbGUudmFsdWUpIHtcXG4gICAgY29uc3QgZmlsZXMgPSBmaWxlLnZhbHVlLmZpbGVzIGFzIEZpbGVMaXN0O1xcbiAgICBjb25zdCBzaW5nbGUgPSBmaWxlc1swXSBhcyBGaWxlO1xcbiAgICBlbWl0cygndXBkYXRlOm1vZGVsVmFsdWUnLCBzaW5nbGUpO1xcbiAgfVxcbn1cXG48L3NjcmlwdD5cXG48c3R5bGUgc2NvcGVkPlxcbmlucHV0IHtcXG4gIHdpZHRoOiAwLjFweDtcXG4gIGhlaWdodDogMC4xcHg7XFxuICBvcGFjaXR5OiAwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IC0xO1xcbn1cXG4ucm9vdCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4udGV4dCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY29sb3I6ICM3Nzc7XFxufVxcbjwvc3R5bGU+XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLnJvb3QtZW5jb2RlcltkYXRhLXYtYWZhNTFmZGFdIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5zZXR0aW5nc1tkYXRhLXYtYWZhNTFmZGFdIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZTRlNGU0O1xcbiAgcGFkZGluZzogMTVweDtcXG59XFxuLnJlc3VsdC1ibHVyaGFzaFtkYXRhLXYtYWZhNTFmZGFdIHtcXG4gIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XFxuICBmb250LXNpemU6IDEuMDVlbTtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmlucHV0W2RhdGEtdi1hZmE1MWZkYV0ge1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG5oM1tkYXRhLXYtYWZhNTFmZGFdIHtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIGNvbG9yOiAjNzc3O1xcbiAgbWFyZ2luOiAwIDAgMTBweCAwO1xcbn1cXG4uYmx1cmhhc2gtcmVzdWx0LWNvbnRhaW5lcltkYXRhLXYtYWZhNTFmZGFdIHtcXG4gIHBhZGRpbmc6IDE1cHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U0ZTRlNDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XFxufVxcbi5pbWctcHJldmlldy1jb250YWluZXJbZGF0YS12LWFmYTUxZmRhXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IDEwMjRweDtcXG4gIGhlaWdodDogNDAwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4uaW1nLXByZXZpZXdbZGF0YS12LWFmYTUxZmRhXSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6ICNmNGY0ZjQ7XFxuICBvYmplY3QtZml0OiBjb250YWluO1xcbiAgb2JqZWN0LXBvc2l0aW9uOiA1MCUgNTAlO1xcbn1cXG4uaW1nLWZpbGUtbmFtZVtkYXRhLXYtYWZhNTFmZGFdIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgYm90dG9tOiAxMHB4O1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiAxcHggM3B4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgzMCwgMzAsIDMwLCAwLjYpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9kZW1vL0JsdXJoYXNoSW1hZ2VFbmNvZGVyLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBZ0hBO0VBQ0UseUJBQXlCO0VBQ3pCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsNkJBQTZCO0VBQzdCLGFBQWE7QUFDZjtBQUNBO0VBQ0UseUJBQXlCO0VBQ3pCLGlCQUFpQjtFQUNqQixzQkFBc0I7RUFDdEIsV0FBVztFQUNYLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLFdBQVc7RUFDWCxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGFBQWE7RUFDYiw2QkFBNkI7RUFDN0IsOEJBQThCO0VBQzlCLCtCQUErQjtBQUNqQztBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLFdBQVc7RUFDWCxtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLHdCQUF3QjtBQUMxQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLHVDQUF1QztBQUN6Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2IGNsYXNzPVxcXCJyb290LWVuY29kZXJcXFwiPlxcbiAgICA8RmlsZUlucHV0IEB1cGRhdGU6bW9kZWxWYWx1ZT1cXFwiaGFuZGxlRmlsZUNoYW5nZVxcXCIgOnNob3dUZXh0PVxcXCIhZGF0YVxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiaW1nLXByZXZpZXctY29udGFpbmVyXFxcIj5cXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVxcXCJkYXRhXFxcIj5cXG4gICAgICAgICAgPGltZyBjbGFzcz1cXFwiaW1nLXByZXZpZXdcXFwiIDpzcmM9XFxcImRhdGEuaW1hZ2VVcmxcXFwiIC8+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpbWctZmlsZS1uYW1lXFxcIj57eyBkYXRhLmZpbGUubmFtZSB9fTwvc3Bhbj5cXG4gICAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvRmlsZUlucHV0PlxcblxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc1xcXCI+XFxuICAgICAgPGgzPkVuY29kaW5nIHNldHRpbmdzPC9oMz5cXG5cXG4gICAgICA8U2V0dGluZyBsYWJlbD1cXFwiWCBjb21wb25lbnRzXFxcIiA6dmFsdWU9XFxcImNvbXBvbmVudFhcXFwiPlxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhbmdlXFxcIiBtaW49XFxcIjFcXFwiIG1heD1cXFwiOVxcXCIgdi1tb2RlbD1cXFwiY29tcG9uZW50WFxcXCIgLz5cXG4gICAgICA8L1NldHRpbmc+XFxuXFxuICAgICAgPFNldHRpbmcgbGFiZWw9XFxcIlkgY29tcG9uZW50c1xcXCIgOnZhbHVlPVxcXCJjb21wb25lbnRZXFxcIj5cXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCIxXFxcIiBtYXg9XFxcIjlcXFwiIHYtbW9kZWw9XFxcImNvbXBvbmVudFlcXFwiIC8+XFxuICAgICAgPC9TZXR0aW5nPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiYmx1cmhhc2gtcmVzdWx0LWNvbnRhaW5lclxcXCIgdi1pZj1cXFwiYmx1cmhhc2hcXFwiPlxcbiAgICAgIDxoMz5CbHVyaGFzaCByZXN1bHQ8L2gzPlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInJlc3VsdC1ibHVyaGFzaFxcXCI+e3sgYmx1cmhhc2ggfX08L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcbjxzY3JpcHQgc2V0dXAgbGFuZz1cXFwidHNcXFwiPlxcbmltcG9ydCB7IGVuY29kZSB9IGZyb20gJ2JsdXJoYXNoJztcXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmIH0gZnJvbSAndnVlJztcXG5pbXBvcnQgU2V0dGluZyBmcm9tICcuL1NldHRpbmcudnVlJztcXG5pbXBvcnQgRmlsZUlucHV0IGZyb20gJy4vRmlsZUlucHV0LnZ1ZSc7XFxuXFxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wczx7XFxuICB2YWx1ZT86IHN0cmluZztcXG59PigpO1xcbmNvbnN0IGVtaXRzID0gZGVmaW5lRW1pdHM8e1xcbiAgKGU6ICd1cGRhdGU6bW9kZWxWYWx1ZScsIGhhc2g6IHN0cmluZyk6IHZvaWQ7XFxufT4oKTtcXG5cXG5jb25zdCBkYXRhID0gcmVmPHsgZmlsZTogRmlsZTsgaW1hZ2VVcmw6IHN0cmluZzsgaW1hZ2VEYXRhOiBJbWFnZURhdGEgfSB8IHVuZGVmaW5lZD4oKTtcXG5jb25zdCBjb21wb25lbnRZID0gcmVmKDQpO1xcbmNvbnN0IGNvbXBvbmVudFggPSByZWYoNCk7XFxuY29uc3QgYmx1cmhhc2ggPSBjb21wdXRlZCgoKSA9PlxcbiAgZGF0YS52YWx1ZVxcbiAgICA/IHJldHVybkVuY29kZVZhbHVlKFxcbiAgICAgICAgZGF0YS52YWx1ZS5pbWFnZURhdGEuZGF0YSxcXG4gICAgICAgIGRhdGEudmFsdWUuaW1hZ2VEYXRhLndpZHRoLFxcbiAgICAgICAgZGF0YS52YWx1ZS5pbWFnZURhdGEuaGVpZ2h0LFxcbiAgICAgICAgY29tcG9uZW50WC52YWx1ZSxcXG4gICAgICAgIGNvbXBvbmVudFkudmFsdWUsXFxuICAgICAgKVxcbiAgICA6IHVuZGVmaW5lZCxcXG4pO1xcbmNvbnN0IHJldHVybkVuY29kZVZhbHVlID0gKFxcbiAgZGF0YTogVWludDhDbGFtcGVkQXJyYXksXFxuICB3aWR0aDogbnVtYmVyLFxcbiAgaGVpZ2h0OiBudW1iZXIsXFxuICBjb21wb25lbnRYOiBudW1iZXIsXFxuICBjb21wb25lbnRZOiBudW1iZXIsXFxuKTogc3RyaW5nID0+IHtcXG4gIGNvbnN0IGhhc2ggPSBlbmNvZGUoZGF0YSwgd2lkdGgsIGhlaWdodCwgY29tcG9uZW50WCwgY29tcG9uZW50WSk7XFxuICBlbWl0cygndXBkYXRlOm1vZGVsVmFsdWUnLCBoYXNoKTtcXG4gIHJldHVybiBoYXNoO1xcbn07XFxuXFxuY29uc3QgZ2V0Q2xhbXBlZFNpemUgPSAoXFxuICB3aWR0aDogbnVtYmVyLFxcbiAgaGVpZ2h0OiBudW1iZXIsXFxuICBtYXg6IG51bWJlcixcXG4pOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gPT4ge1xcbiAgaWYgKHdpZHRoID49IGhlaWdodCAmJiB3aWR0aCA+IG1heCkge1xcbiAgICByZXR1cm4geyB3aWR0aDogbWF4LCBoZWlnaHQ6IE1hdGgucm91bmQoKGhlaWdodCAvIHdpZHRoKSAqIG1heCkgfTtcXG4gIH1cXG5cXG4gIGlmIChoZWlnaHQgPiB3aWR0aCAmJiBoZWlnaHQgPiBtYXgpIHtcXG4gICAgcmV0dXJuIHsgd2lkdGg6IE1hdGgucm91bmQoKHdpZHRoIC8gaGVpZ2h0KSAqIG1heCksIGhlaWdodDogbWF4IH07XFxuICB9XFxuXFxuICByZXR1cm4geyB3aWR0aCwgaGVpZ2h0IH07XFxufTtcXG5cXG5jb25zdCBsb2FkSW1hZ2UgPSBhc3luYyAoc3JjOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+ID0+XFxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XFxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xcbiAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWcpO1xcbiAgICBpbWcub25lcnJvciA9ICguLi5hcmdzKSA9PiByZWplY3QoYXJncyk7XFxuICAgIGltZy5zcmMgPSBzcmM7XFxuICB9KTtcXG5cXG5jb25zdCBnZXRJbWFnZURhdGEgPSAoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsIHJlc29sdXRpb25YOiBudW1iZXIsIHJlc29sdXRpb25ZOiBudW1iZXIpID0+IHtcXG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xcbiAgY2FudmFzLndpZHRoID0gcmVzb2x1dGlvblg7XFxuICBjYW52YXMuaGVpZ2h0ID0gcmVzb2x1dGlvblk7XFxuICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xcbiAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIHJlc29sdXRpb25YLCByZXNvbHV0aW9uWSk7XFxuICByZXR1cm4gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgcmVzb2x1dGlvblgsIHJlc29sdXRpb25ZKTtcXG59O1xcblxcbmNvbnN0IGhhbmRsZUZpbGVDaGFuZ2UgPSBhc3luYyAoZmlsZTogRmlsZSkgPT4ge1xcbiAgY29uc3QgaW1hZ2VVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xcblxcbiAgY29uc3QgaW1nID0gYXdhaXQgbG9hZEltYWdlKGltYWdlVXJsKTtcXG4gIGNvbnN0IGNsYW1wU2l6ZSA9IGdldENsYW1wZWRTaXplKGltZy53aWR0aCwgaW1nLmhlaWdodCwgNjQpO1xcbiAgY29uc3QgaW1hZ2VEYXRhID0gZ2V0SW1hZ2VEYXRhKGltZywgY2xhbXBTaXplLndpZHRoLCBjbGFtcFNpemUuaGVpZ2h0KTtcXG5cXG4gIGRhdGEudmFsdWUgPSB7IGZpbGUsIGltYWdlVXJsLCBpbWFnZURhdGEgfTtcXG59O1xcbjwvc2NyaXB0PlxcbjxzdHlsZSBzY29wZWQ+XFxuLnJvb3QtZW5jb2RlciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZTRlNGU0O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG4uc2V0dGluZ3Mge1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlNGU0ZTQ7XFxuICBwYWRkaW5nOiAxNXB4O1xcbn1cXG4ucmVzdWx0LWJsdXJoYXNoIHtcXG4gIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XFxuICBmb250LXNpemU6IDEuMDVlbTtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmlucHV0IHtcXG4gIHdpZHRoOiAzMDBweDtcXG59XFxuaDMge1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgY29sb3I6ICM3Nzc7XFxuICBtYXJnaW46IDAgMCAxMHB4IDA7XFxufVxcbi5ibHVyaGFzaC1yZXN1bHQtY29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDE1cHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U0ZTRlNDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XFxufVxcbi5pbWctcHJldmlldy1jb250YWluZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDI0cHg7XFxuICBoZWlnaHQ6IDQwMHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLmltZy1wcmV2aWV3IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZDogI2Y0ZjRmNDtcXG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XFxuICBvYmplY3QtcG9zaXRpb246IDUwJSA1MCU7XFxufVxcbi5pbWctZmlsZS1uYW1lIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgYm90dG9tOiAxMHB4O1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiAxcHggM3B4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgzMCwgMzAsIDMwLCAwLjYpO1xcbn1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbmlucHV0W2RhdGEtdi1lOWFmZTI2YV0ge1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG4uc2V0dGluZ3MtY29udGFpbmVyW2RhdGEtdi1lOWFmZTI2YV0ge1xcbiAgcGFkZGluZzogMTVweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZTRlNGU0O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG4uYmx1cmhhc2gtY29udGFpbmVyW2RhdGEtdi1lOWFmZTI2YV0ge1xcbiAgbWFyZ2luLXRvcDogMThweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vZGVtby9CbHVyaGFzaERlbW8udnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFnRUE7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7RUFDYixxQkFBcUI7RUFDckIseUJBQXlCO0VBQ3pCLHlCQUF5QjtFQUN6QixrQkFBa0I7QUFDcEI7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5ncy1jb250YWluZXJcXFwiPlxcbiAgICAgIDxTZXR0aW5nIGxhYmVsPVxcXCJzaXplXFxcIiA6dmFsdWU9XFxcImAke3NpemV9IChweClgXFxcIj5cXG4gICAgICAgIDxpbnB1dFxcbiAgICAgICAgICB0eXBlPVxcXCJyYW5nZVxcXCJcXG4gICAgICAgICAgOm1pbj1cXFwiMVxcXCJcXG4gICAgICAgICAgOm1heD1cXFwiMTAyNFxcXCJcXG4gICAgICAgICAgOnN0ZXA9XFxcIjhcXFwiXFxuICAgICAgICAgIDp2YWx1ZT1cXFwic2l6ZVxcXCJcXG4gICAgICAgICAgQGlucHV0PVxcXCIoZXY6IGFueSkgPT4gc2l6ZSA9IHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcXFwiXFxuICAgICAgICAvPlxcbiAgICAgIDwvU2V0dGluZz5cXG5cXG4gICAgICA8U2V0dGluZyBsYWJlbD1cXFwicmVzb2x1dGlvblxcXCIgOnZhbHVlPVxcXCJgJHtyZXNvbHV0aW9ufSAocHgpYFxcXCI+XFxuICAgICAgICA8aW5wdXRcXG4gICAgICAgICAgdHlwZT1cXFwicmFuZ2VcXFwiXFxuICAgICAgICAgIDptaW49XFxcIjRcXFwiXFxuICAgICAgICAgIDptYXg9XFxcIjEyOFxcXCJcXG4gICAgICAgICAgOnN0ZXA9XFxcIjFcXFwiXFxuICAgICAgICAgIDp2YWx1ZT1cXFwicmVzb2x1dGlvblxcXCJcXG4gICAgICAgICAgQGlucHV0PVxcXCIoZXY6IGFueSkgPT4gcmVzb2x1dGlvbiA9IHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcXFwiXFxuICAgICAgICAvPlxcbiAgICAgIDwvU2V0dGluZz5cXG5cXG4gICAgICA8U2V0dGluZyBsYWJlbD1cXFwicHVuY2hcXFwiIDp2YWx1ZT1cXFwicHVuY2hcXFwiPlxcbiAgICAgICAgPGlucHV0XFxuICAgICAgICAgIHR5cGU9XFxcInJhbmdlXFxcIlxcbiAgICAgICAgICA6bWluPVxcXCIwXFxcIlxcbiAgICAgICAgICA6bWF4PVxcXCIyMFxcXCJcXG4gICAgICAgICAgOnN0ZXA9XFxcIjFcXFwiXFxuICAgICAgICAgIDp2YWx1ZT1cXFwicHVuY2hcXFwiXFxuICAgICAgICAgIEBpbnB1dD1cXFwiKGV2OiBhbnkpID0+IHB1bmNoID0gcGFyc2VJbnQoZXYudGFyZ2V0LnZhbHVlKVxcXCJcXG4gICAgICAgIC8+XFxuICAgICAgPC9TZXR0aW5nPlxcbiAgICA8L2Rpdj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwiYmx1cmhhc2gtY29udGFpbmVyXFxcIj5cXG4gICAgICA8Qmx1cmhhc2hcXG4gICAgICAgIDpoYXNoPVxcXCJoYXNoXFxcIlxcbiAgICAgICAgOmhlaWdodD1cXFwic2l6ZVxcXCJcXG4gICAgICAgIDp3aWR0aD1cXFwic2l6ZVxcXCJcXG4gICAgICAgIDpwdW5jaD1cXFwicHVuY2hcXFwiXFxuICAgICAgICA6cmVzb2x1dGlvblg9XFxcInJlc29sdXRpb25cXFwiXFxuICAgICAgICA6cmVzb2x1dGlvblk9XFxcInJlc29sdXRpb25cXFwiXFxuICAgICAgLz5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcbjxzY3JpcHQgc2V0dXAgbGFuZz1cXFwidHNcXFwiPlxcbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSc7XFxuaW1wb3J0IFNldHRpbmcgZnJvbSAnLi9TZXR0aW5nLnZ1ZSc7XFxuaW1wb3J0IHsgQmx1cmhhc2ggfSBmcm9tICcuLi9zcmMnO1xcblxcbmNvbnN0IHNpemUgPSByZWYoMjU2KTtcXG5jb25zdCByZXNvbHV0aW9uID0gcmVmKDMyKTtcXG5jb25zdCBwdW5jaCA9IHJlZigxKTtcXG5cXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzPHtcXG4gIGhhc2g6IHN0cmluZztcXG59PigpO1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZSBzY29wZWQ+XFxuaW5wdXQge1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG4uc2V0dGluZ3MtY29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDE1cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2U0ZTRlNDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLmJsdXJoYXNoLWNvbnRhaW5lciB7XFxuICBtYXJnaW4tdG9wOiAxOHB4O1xcbn1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbmgxIHtcXG4gIG1hcmdpbjogMjRweCAwO1xcbn1cXG5oMiB7XFxuICBmb250LXNpemU6IDEuNGVtO1xcbn1cXG4ucm9vdCB7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIG1heC13aWR0aDogMTAyNHB4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVxcbi5ibHVyaGFzaEVycm9yIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxuICBjb2xvcjogI2NjNDI2MDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LXNpemU6IDAuOWVtO1xcbn1cXG4uY29kZSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xcbn1cXG4uaGludCB7XFxuICBmb250LXNpemU6IDAuOGVtO1xcbiAgY29sb3I6ICM5OTk7XFxuICBtYXJnaW46IDhweCAwO1xcbn1cXG5ociB7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBtYXJnaW46IDI0cHggMDtcXG59XFxuLm1vZGUtc2VsZWN0IHtcXG4gIG1hcmdpbjogMTVweCAwO1xcbn1cXG4ucmFkaW8taW5wdXQge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4ucmFkaW8taW5wdXQgaW5wdXQge1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxufVxcbi5yYWRpby1pbnB1dCArIC5yYWRpby1pbnB1dCB7XFxuICBtYXJnaW4tbGVmdDogMTRweDtcXG59XFxuLnRleHQtaW5wdXQge1xcbiAgd2hpdGUtc3BhY2U6IHByZTtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNkOGQ4ZDg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4udGV4dC1pbnB1dDpmb2N1cyB7XFxuICBib3JkZXItY29sb3I6ICM4YWI3ZWE7XFxufVxcbmZvb3RlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiKDI0MiwgMjQyLCAyNDIpO1xcbiAgbWFyZ2luLXRvcDogNDBweDtcXG4gIHBhZGRpbmc6IDE1cHggMTBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMC45ZW07XFxufVxcbmZvb3RlciB1bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuZm9vdGVyIGxpIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuZm9vdGVyIGxpICsgbGkge1xcbiAgbWFyZ2luLWxlZnQ6IDI0cHg7XFxufVxcbmZvb3RlciBsaSArIGxpOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IC0xNXB4O1xcbiAgY29udGVudDogJ8K3JztcXG4gIGNvbG9yOiAjYzhjOGM4O1xcbn1cXG5mb290ZXIgYSB7XFxuICBjb2xvcjogI2M4YzhjODtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuZm9vdGVyIGE6aG92ZXIge1xcbiAgY29sb3I6ICMzZDUwZmY7XFxufVxcbmZvb3RlciBhOmFjdGl2ZSB7XFxuICBjb2xvcjogIzA0MWFlNTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vZGVtby9BcHAudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUF3RkE7RUFDRSxjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsdUJBQXVCO0FBQ3pCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1YscUJBQXFCO0VBQ3JCLGlDQUFpQztBQUNuQztBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFdBQVc7RUFDWCxhQUFhO0FBQ2Y7QUFDQTtFQUNFLFdBQVc7RUFDWCx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGNBQWM7QUFDaEI7QUFDQTtFQUNFLGNBQWM7QUFDaEI7QUFDQTtFQUNFLG9CQUFvQjtFQUNwQixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLHNCQUFzQjtFQUN0QixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLHlCQUF5QjtFQUN6QixXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLGFBQWE7QUFDZjtBQUNBO0VBQ0UscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSx3Q0FBd0M7RUFDeEMsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsbUJBQW1CO0FBQ3JCO0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFdBQVc7RUFDWCxZQUFZO0VBQ1osY0FBYztBQUNoQjtBQUNBO0VBQ0UsY0FBYztFQUNkLHFCQUFxQjtBQUN2QjtBQUNBO0VBQ0UsY0FBYztBQUNoQjtBQUNBO0VBQ0UsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2IGNsYXNzPVxcXCJyb290XFxcIj5cXG4gICAgPGgxIHN0eWxlPVxcXCJtYXJnaW46IDI0cHggMFxcXCI+dnVlanMtYmx1cmhhc2ggZGVtbzwvaDE+XFxuICAgIDxociAvPlxcblxcbiAgICA8ZGl2IGNsYXNzPVxcXCJtb2RlLXNlbGVjdFxcXCI+XFxuICAgICAgPGxhYmVsIGZvcj1cXFwib3B0aW9uLTFcXFwiIGNsYXNzPVxcXCJyYWRpby1pbnB1dFxcXCI+XFxuICAgICAgICA8aW5wdXRcXG4gICAgICAgICAgdHlwZT1cXFwicmFkaW9cXFwiXFxuICAgICAgICAgIGlkPVxcXCJvcHRpb24tMVxcXCJcXG4gICAgICAgICAgQGNoYW5nZT1cXFwiKGU6IGFueSkgPT4gKG1vZGUgPSBlLnRhcmdldC52YWx1ZSlcXFwiXFxuICAgICAgICAgIHYtbW9kZWw9XFxcIm1vZGVcXFwiXFxuICAgICAgICAgIHZhbHVlPVxcXCJoYXNoXFxcIlxcbiAgICAgICAgICA6Y2hlY2tlZD1cXFwibW9kZSA9PT0gJ2hhc2gnXFxcIlxcbiAgICAgICAgLz5cXG4gICAgICAgIEJsdXJoYXNoIHN0cmluZ1xcbiAgICAgIDwvbGFiZWw+XFxuXFxuICAgICAgPGxhYmVsIGZvcj1cXFwib3B0aW9uLTJcXFwiIGNsYXNzPVxcXCJyYWRpby1pbnB1dFxcXCI+XFxuICAgICAgICA8aW5wdXRcXG4gICAgICAgICAgdHlwZT1cXFwicmFkaW9cXFwiXFxuICAgICAgICAgIGlkPVxcXCJvcHRpb24tMlxcXCJcXG4gICAgICAgICAgQGNoYW5nZT1cXFwiKGU6IGFueSkgPT4gKG1vZGUgPSBlLnRhcmdldC52YWx1ZSlcXFwiXFxuICAgICAgICAgIHYtbW9kZWw9XFxcIm1vZGVcXFwiXFxuICAgICAgICAgIHZhbHVlPVxcXCJpbWFnZVxcXCJcXG4gICAgICAgICAgOmNoZWNrZWQ9XFxcIm1vZGUgPT09ICdpbWFnZSdcXFwiXFxuICAgICAgICAvPlxcbiAgICAgICAgRW5jb2RlIGltYWdlXFxuICAgICAgPC9sYWJlbD5cXG4gICAgPC9kaXY+XFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVxcXCJtb2RlID09PSAnaGFzaCdcXFwiPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cXFwidGV4dC1pbnB1dFxcXCIgdi1tb2RlbD1cXFwiaGFzaElucHV0XFxcIiAvPlxcbiAgICA8L3RlbXBsYXRlPlxcbiAgICA8dGVtcGxhdGUgdi1pZj1cXFwibW9kZSA9PT0gJ2ltYWdlJ1xcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiaGludFxcXCI+Tm90ZTogZW5jb2RpbmcgaXMgZG9uZSBpbiB0aGUgYnJvd3NlciBvbmx5IChubyBzZXJ2ZXIgaW52b2x2ZWQpITwvZGl2PlxcbiAgICAgIDxCbHVyaGFzaEltYWdlRW5jb2RlciB2LW1vZGVsPVxcXCJlbmNvZGVkSGFzaFxcXCIgLz5cXG4gICAgPC90ZW1wbGF0ZT5cXG5cXG4gICAgPHRlbXBsYXRlIHYtaWY9XFxcImhhc2ggJiYgIWJsdXJoYXNoVmFsaWQucmVzdWx0XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJibHVyaGFzaEVycm9yXFxcIj5cXG4gICAgICAgIDxzdHJvbmc+SW52YWxpZCBibHVyaGFzaDwvc3Ryb25nPiAtIHt7IGJsdXJoYXNoVmFsaWQuZXJyb3JSZWFzb24gfX1cXG4gICAgICA8L2Rpdj5cXG4gICAgPC90ZW1wbGF0ZT5cXG4gICAgPHRlbXBsYXRlIHYtaWY9XFxcImJsdXJoYXNoVmFsaWQucmVzdWx0XFxcIj5cXG4gICAgICA8aHIgLz5cXG4gICAgICA8aDI+XFxuICAgICAgICA8cHJlIGNsYXNzPVxcXCJjb2RlXFxcIj57eyc8Qmx1cmhhc2ggLz4nfX08L3ByZT5cXG4gICAgICA8L2gyPlxcbiAgICAgIDxCbHVyaGFzaERlbW8gOmhhc2g9XFxcImhhc2hcXFwiIC8+XFxuICAgICAgPGhyIC8+XFxuICAgICAgPGgyPlxcbiAgICAgICAgPHByZSBjbGFzcz1cXFwiY29kZVxcXCI+e3snPEJsdXJoYXNoQ2FudmFzIC8+J319PC9wcmU+XFxuICAgICAgPC9oMj5cXG4gICAgICA8Qmx1cmhhc2hDYW52YXNEZW1vIDpoYXNoPVxcXCJoYXNoXFxcIiAvPlxcbiAgICA8L3RlbXBsYXRlPlxcblxcbiAgICA8Zm9vdGVyPlxcbiAgICAgIDx1bD5cXG4gICAgICAgIDxsaT5cXG4gICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL3dvbHRhcHAvcmVhY3QtYmx1cmhhc2hcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj52dWVqcy1ibHVyaGFzaDwvYT5cXG4gICAgICAgIDwvbGk+XFxuICAgICAgICA8bGk+XFxuICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS93b2x0YXBwL2JsdXJoYXNoL3RyZWUvbWFzdGVyL1R5cGVTY3JpcHRcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIlxcbiAgICAgICAgICAgID5CbHVyaGFzaCBUeXBlU2NyaXB0PC9hXFxuICAgICAgICAgID5cXG4gICAgICAgIDwvbGk+XFxuICAgICAgICA8bGk+XFxuICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vYmx1cmhhLnNoXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Qmx1cmhhc2ggd2Vic2l0ZTwvYT5cXG4gICAgICAgIDwvbGk+XFxuICAgICAgPC91bD5cXG4gICAgPC9mb290ZXI+XFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcbjxzY3JpcHQgc2V0dXAgbGFuZz1cXFwidHNcXFwiPlxcbmltcG9ydCB7IHJlZiwgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xcbmltcG9ydCB7IGlzQmx1cmhhc2hWYWxpZCB9IGZyb20gJ2JsdXJoYXNoJztcXG5pbXBvcnQgQmx1cmhhc2hDYW52YXNEZW1vIGZyb20gJy4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZSc7XFxuaW1wb3J0IEJsdXJoYXNoSW1hZ2VFbmNvZGVyIGZyb20gJy4vQmx1cmhhc2hJbWFnZUVuY29kZXIudnVlJztcXG5pbXBvcnQgQmx1cmhhc2hEZW1vIGZyb20gJy4vQmx1cmhhc2hEZW1vLnZ1ZSc7XFxuXFxuY29uc3QgbW9kZSA9IHJlZignaGFzaCcpO1xcbmNvbnN0IGhhc2hJbnB1dCA9IHJlZignTEVIVjZuV0IyeWs4cHlvMGFkUiouN2tDTWRuaicpO1xcbmNvbnN0IGVuY29kZWRIYXNoID0gcmVmKCcnKTtcXG5jb25zdCBoYXNoID0gY29tcHV0ZWQoKCkgPT4gKG1vZGUudmFsdWUgPT09ICdoYXNoJyA/IGhhc2hJbnB1dCA6IGVuY29kZWRIYXNoKS52YWx1ZSk7XFxuY29uc3QgYmx1cmhhc2hWYWxpZCA9IGNvbXB1dGVkKCgpID0+IGlzQmx1cmhhc2hWYWxpZChoYXNoLnZhbHVlKSk7XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlPlxcbmgxIHtcXG4gIG1hcmdpbjogMjRweCAwO1xcbn1cXG5oMiB7XFxuICBmb250LXNpemU6IDEuNGVtO1xcbn1cXG4ucm9vdCB7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIG1heC13aWR0aDogMTAyNHB4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVxcbi5ibHVyaGFzaEVycm9yIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxuICBjb2xvcjogI2NjNDI2MDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LXNpemU6IDAuOWVtO1xcbn1cXG4uY29kZSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xcbn1cXG4uaGludCB7XFxuICBmb250LXNpemU6IDAuOGVtO1xcbiAgY29sb3I6ICM5OTk7XFxuICBtYXJnaW46IDhweCAwO1xcbn1cXG5ociB7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBtYXJnaW46IDI0cHggMDtcXG59XFxuLm1vZGUtc2VsZWN0IHtcXG4gIG1hcmdpbjogMTVweCAwO1xcbn1cXG4ucmFkaW8taW5wdXQge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4ucmFkaW8taW5wdXQgaW5wdXQge1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxufVxcbi5yYWRpby1pbnB1dCArIC5yYWRpby1pbnB1dCB7XFxuICBtYXJnaW4tbGVmdDogMTRweDtcXG59XFxuLnRleHQtaW5wdXQge1xcbiAgd2hpdGUtc3BhY2U6IHByZTtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNkOGQ4ZDg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4udGV4dC1pbnB1dDpmb2N1cyB7XFxuICBib3JkZXItY29sb3I6ICM4YWI3ZWE7XFxufVxcbmZvb3RlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiKDI0MiwgMjQyLCAyNDIpO1xcbiAgbWFyZ2luLXRvcDogNDBweDtcXG4gIHBhZGRpbmc6IDE1cHggMTBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMC45ZW07XFxufVxcbmZvb3RlciB1bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuZm9vdGVyIGxpIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuZm9vdGVyIGxpICsgbGkge1xcbiAgbWFyZ2luLWxlZnQ6IDI0cHg7XFxufVxcbmZvb3RlciBsaSArIGxpOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IC0xNXB4O1xcbiAgY29udGVudDogJ8K3JztcXG4gIGNvbG9yOiAjYzhjOGM4O1xcbn1cXG5mb290ZXIgYSB7XFxuICBjb2xvcjogI2M4YzhjODtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuZm9vdGVyIGE6aG92ZXIge1xcbiAgY29sb3I6ICMzZDUwZmY7XFxufVxcbmZvb3RlciBhOmFjdGl2ZSB7XFxuICBjb2xvcjogIzA0MWFlNTtcXG59XFxuPC9zdHlsZT5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBCbHVyaGFzaCB9IGZyb20gJy4vQmx1cmhhc2gudnVlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQmx1cmhhc2hDYW52YXMgfSBmcm9tICcuL0JsdXJoYXNoQ2FudmFzLnZ1ZSc7XG4iLCJpbXBvcnQgc2NyaXB0IGZyb20gXCIuL0JsdXJoYXNoQ2FudmFzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0JsdXJoYXNoQ2FudmFzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcblxuY29uc3QgX19leHBvcnRzX18gPSBzY3JpcHQ7XG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcblxuaW1wb3J0IFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MjJlNDZiOGMmbGFuZz1jc3NcIlxuXG5jb25zdCBfX2V4cG9ydHNfXyA9IHNjcmlwdDtcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyBjcmVhdGVBcHAgfSBmcm9tICd2dWUnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC52dWUnO1xuXG5jcmVhdGVBcHAoQXBwKS5tb3VudChkb2N1bWVudC5ib2R5KTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0JsdXJoYXNoQ2FudmFzRGVtby52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5cbmltcG9ydCBcIi4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPThjYTEyMDA0JnNjb3BlZD10cnVlJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL1VzZXJzL2RpZWdvcGFpdmEvR2l0L2JlY2tlcmluL3Z1ZWpzLWJsdXJoYXNoL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ19fc2NvcGVJZCcsXCJkYXRhLXYtOGNhMTIwMDRcIl1dKVxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQmx1cmhhc2gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmx1cmhhc2gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuXG5jb25zdCBfX2V4cG9ydHNfXyA9IHNjcmlwdDtcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgc2NyaXB0IGZyb20gXCIuL0JsdXJoYXNoSW1hZ2VFbmNvZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0JsdXJoYXNoSW1hZ2VFbmNvZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcblxuaW1wb3J0IFwiLi9CbHVyaGFzaEltYWdlRW5jb2Rlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1hZmE1MWZkYSZzY29wZWQ9dHJ1ZSZsYW5nPWNzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9Vc2Vycy9kaWVnb3BhaXZhL0dpdC9iZWNrZXJpbi92dWVqcy1ibHVyaGFzaC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydfX3Njb3BlSWQnLFwiZGF0YS12LWFmYTUxZmRhXCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgc2NyaXB0IGZyb20gXCIuL0ZpbGVJbnB1dC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9GaWxlSW5wdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuXG5pbXBvcnQgXCIuL0ZpbGVJbnB1dC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zOTRjMThlNiZzY29wZWQ9dHJ1ZSZsYW5nPWNzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9Vc2Vycy9kaWVnb3BhaXZhL0dpdC9iZWNrZXJpbi92dWVqcy1ibHVyaGFzaC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydfX3Njb3BlSWQnLFwiZGF0YS12LTM5NGMxOGU2XCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgc2NyaXB0IGZyb20gXCIuL0JsdXJoYXNoRGVtby52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9CbHVyaGFzaERlbW8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuXG5pbXBvcnQgXCIuL0JsdXJoYXNoRGVtby52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lOWFmZTI2YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9Vc2Vycy9kaWVnb3BhaXZhL0dpdC9iZWNrZXJpbi92dWVqcy1ibHVyaGFzaC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydfX3Njb3BlSWQnLFwiZGF0YS12LWU5YWZlMjZhXCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTktMCEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yMmU0NmI4YyZsYW5nPWNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vQmx1cmhhc2hDYW52YXNEZW1vLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPThjYTEyMDA0JnNjb3BlZD10cnVlJmxhbmc9Y3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9CbHVyaGFzaEltYWdlRW5jb2Rlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1hZmE1MWZkYSZzY29wZWQ9dHJ1ZSZsYW5nPWNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tOS0wIS4vQmx1cmhhc2hEZW1vLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWU5YWZlMjZhJnNjb3BlZD10cnVlJmxhbmc9Y3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9TZXR0aW5nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTg3NjQzNzM2JnNjb3BlZD10cnVlJmxhbmc9Y3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS05LTAhLi9GaWxlSW5wdXQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9Mzk0YzE4ZTYmc2NvcGVkPXRydWUmbGFuZz1jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwic291cmNlUm9vdCI6IiJ9